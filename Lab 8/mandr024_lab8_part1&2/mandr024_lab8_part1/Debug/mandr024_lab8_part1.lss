
mandr024_lab8_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000024c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000922  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080b  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000336  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026d  00000000  00000000  00001dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	65 c0       	rjmp	.+202    	; 0x100 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7f d0       	rcall	.+254    	; 0x1c2 <main>
  c4:	c1 c0       	rjmp	.+386    	; 0x248 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
	}
}
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	8a e7       	ldi	r24, 0x7A	; 122
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	20 81       	ld	r18, Z
  dc:	20 6e       	ori	r18, 0xE0	; 224
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	00 00       	nop
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <TimerISR>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  f8:	00 00       	nop
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <__vector_13>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 110:	0f 92       	push	r0
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 136:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 13a:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 13e:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	a1 09       	sbc	r26, r1
 146:	b1 09       	sbc	r27, r1
 148:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 14c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 150:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 154:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 158:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 15c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 160:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 164:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 168:	89 2b       	or	r24, r25
 16a:	8a 2b       	or	r24, r26
 16c:	8b 2b       	or	r24, r27
 16e:	89 f4       	brne	.+34     	; 0x192 <__vector_13+0x92>
 170:	bc df       	rcall	.-136    	; 0xea <TimerISR>
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 176:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 17a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 17e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 182:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 186:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 18a:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 18e:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 192:	00 00       	nop
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1b6:	0f 90       	pop	r0
 1b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:

int main(void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <main+0x6>
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <main+0x8>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
	unsigned short my_short = 0xABCD;
 1ce:	8d ec       	ldi	r24, 0xCD	; 205
 1d0:	9b ea       	ldi	r25, 0xAB	; 171
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
	unsigned char x = (char) my_short;
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char B = 0x00;
 1da:	1c 82       	std	Y+4, r1	; 0x04
	DDRA = 0x00; PORTA = 0xFF;
 1dc:	81 e2       	ldi	r24, 0x21	; 33
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	10 82       	st	Z, r1
 1e4:	82 e2       	ldi	r24, 0x22	; 34
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 1ee:	84 e2       	ldi	r24, 0x24	; 36
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
 1f8:	85 e2       	ldi	r24, 0x25	; 37
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 200:	8a e2       	ldi	r24, 0x2A	; 42
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	8b e2       	ldi	r24, 0x2B	; 43
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
	
// 	TimerSet(1);
// 	TimerOn();

	ADC_init();
 212:	5a df       	rcall	.-332    	; 0xc8 <ADC_init>
		
	while(1)
	{	
		my_short = ADC;
 214:	88 e7       	ldi	r24, 0x78	; 120
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	80 81       	ld	r24, Z
 21c:	91 81       	ldd	r25, Z+1	; 0x01
 21e:	9a 83       	std	Y+2, r25	; 0x02
 220:	89 83       	std	Y+1, r24	; 0x01
		x = (char) my_short;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	8b 83       	std	Y+3, r24	; 0x03
		B = (char) (my_short>>8);
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	89 2f       	mov	r24, r25
 22c:	99 27       	eor	r25, r25
 22e:	8c 83       	std	Y+4, r24	; 0x04
		PORTB = x; 
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	2b 81       	ldd	r18, Y+3	; 0x03
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
		PORTD = B & 0x03;
 23a:	8b e2       	ldi	r24, 0x2B	; 43
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	2c 81       	ldd	r18, Y+4	; 0x04
 240:	23 70       	andi	r18, 0x03	; 3
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
// 		
		
	}
 246:	e6 cf       	rjmp	.-52     	; 0x214 <main+0x52>

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
