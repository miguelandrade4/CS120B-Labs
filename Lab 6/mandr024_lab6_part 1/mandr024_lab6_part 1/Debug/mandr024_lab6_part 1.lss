
mandr024_lab6_part 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  0000072e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa4  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f9  00000000  00000000  00001b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000531  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002daf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c1       	rjmp	.+668    	; 0x2d2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e9       	ldi	r30, 0x96	; 150
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ab d2       	rcall	.+1366   	; 0x61a <main>
  c4:	e6 c2       	rjmp	.+1484   	; 0x692 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80;
}

void TimerOff() {
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 d0       	rcall	.+260    	; 0x1ee <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	77 d0       	rcall	.+238    	; 0x1ee <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	49 d0       	rcall	.+146    	; 0x1ee <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	1a d0       	rcall	.+52     	; 0x1ee <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_Cursor>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	1f 92       	push	r1
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 31       	cpi	r24, 0x11	; 17
 1d4:	20 f4       	brcc	.+8      	; 0x1de <LCD_Cursor+0x1a>
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	81 58       	subi	r24, 0x81	; 129
 1da:	96 df       	rcall	.-212    	; 0x108 <LCD_WriteCommand>
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCD_Cursor+0x20>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	81 55       	subi	r24, 0x51	; 81
 1e2:	92 df       	rcall	.-220    	; 0x108 <LCD_WriteCommand>
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <delay_ms>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <delay_ms+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <delay_ms+0x8>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <delay_ms+0xa>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	9e 83       	std	Y+6, r25	; 0x06
 1fe:	8d 83       	std	Y+5, r24	; 0x05
 200:	1a 82       	std	Y+2, r1	; 0x02
 202:	19 82       	std	Y+1, r1	; 0x01
 204:	13 c0       	rjmp	.+38     	; 0x22c <delay_ms+0x3e>
 206:	1c 82       	std	Y+4, r1	; 0x04
 208:	1b 82       	std	Y+3, r1	; 0x03
 20a:	06 c0       	rjmp	.+12     	; 0x218 <delay_ms+0x2a>
 20c:	00 00       	nop
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	9c 81       	ldd	r25, Y+4	; 0x04
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	8b 83       	std	Y+3, r24	; 0x03
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	93 40       	sbci	r25, 0x03	; 3
 220:	ac f3       	brlt	.-22     	; 0x20c <delay_ms+0x1e>
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	3a 81       	ldd	r19, Y+2	; 0x02
 230:	8d 81       	ldd	r24, Y+5	; 0x05
 232:	9e 81       	ldd	r25, Y+6	; 0x06
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	34 f3       	brlt	.-52     	; 0x206 <delay_ms+0x18>
 23a:	00 00       	nop
 23c:	26 96       	adiw	r28, 0x06	; 6
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <TimerOn>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	81 e8       	ldi	r24, 0x81	; 129
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	2b e0       	ldi	r18, 0x0B	; 11
 25c:	fc 01       	movw	r30, r24
 25e:	20 83       	st	Z, r18
 260:	88 e8       	ldi	r24, 0x88	; 136
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	2d e7       	ldi	r18, 0x7D	; 125
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	31 83       	std	Z+1, r19	; 0x01
 26c:	20 83       	st	Z, r18
 26e:	8f e6       	ldi	r24, 0x6F	; 111
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	22 e0       	ldi	r18, 0x02	; 2
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
 278:	84 e8       	ldi	r24, 0x84	; 132
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	fc 01       	movw	r30, r24
 27e:	11 82       	std	Z+1, r1	; 0x01
 280:	10 82       	st	Z, r1
 282:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 286:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 28a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 28e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 292:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 296:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 29a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 29e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 2a2:	8f e5       	ldi	r24, 0x5F	; 95
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	2f e5       	ldi	r18, 0x5F	; 95
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	20 81       	ld	r18, Z
 2ae:	20 68       	ori	r18, 0x80	; 128
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
 2b4:	00 00       	nop
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <TimerISR>:

void TimerISR() {
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <TimerFlag>
}
 2ca:	00 00       	nop
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <__vector_13>:


ISR(TIMER1_COMPA_vect) {
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2da:	0f 92       	push	r0
 2dc:	11 24       	eor	r1, r1
 2de:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2e2:	0f 92       	push	r0
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
	
	_avr_timer_cntcurr--;
 304:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 308:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 30c:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 310:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	a1 09       	sbc	r26, r1
 318:	b1 09       	sbc	r27, r1
 31a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 31e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 322:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 326:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) {
 32a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 32e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 332:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 336:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 33a:	89 2b       	or	r24, r25
 33c:	8a 2b       	or	r24, r26
 33e:	8b 2b       	or	r24, r27
 340:	89 f4       	brne	.+34     	; 0x364 <__vector_13+0x92>
		TimerISR();
 342:	bc df       	rcall	.-136    	; 0x2bc <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 348:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 34c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 350:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 354:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 358:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 35c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 360:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
	}
}
 364:	00 00       	nop
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 388:	0f 90       	pop	r0
 38a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <TimerSet>:


void TimerSet(unsigned long M) {
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	00 d0       	rcall	.+0      	; 0x39a <TimerSet+0x6>
 39a:	00 d0       	rcall	.+0      	; 0x39c <TimerSet+0x8>
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	69 83       	std	Y+1, r22	; 0x01
 3a2:	7a 83       	std	Y+2, r23	; 0x02
 3a4:	8b 83       	std	Y+3, r24	; 0x03
 3a6:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 3a8:	89 81       	ldd	r24, Y+1	; 0x01
 3aa:	9a 81       	ldd	r25, Y+2	; 0x02
 3ac:	ab 81       	ldd	r26, Y+3	; 0x03
 3ae:	bc 81       	ldd	r27, Y+4	; 0x04
 3b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3b8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 3bc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 3c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3c8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3cc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 3d4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 3d8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 3dc:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
}
 3e0:	00 00       	nop
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <tick>:



void tick()
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
	switch(SM2_STATES)  // transitions
 3f8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SM2_STATES>
 3fc:	88 2f       	mov	r24, r24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	91 05       	cpc	r25, r1
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	4b c0       	rjmp	.+150    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	91 05       	cpc	r25, r1
 40c:	2c f4       	brge	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	59 f0       	breq	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	69 f0       	breq	.+26     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 416:	b6 c0       	rjmp	.+364    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
 418:	83 30       	cpi	r24, 0x03	; 3
 41a:	91 05       	cpc	r25, r1
 41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 41e:	73 c0       	rjmp	.+230    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 420:	04 97       	sbiw	r24, 0x04	; 4
 422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	a9 c0       	rjmp	.+338    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
 426:	ae c0       	rjmp	.+348    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
	{
		case SM2_START:
			
			SM2_STATES = SM2_INIT;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			
		break;
 42e:	ac c0       	rjmp	.+344    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		
		case SM2_INIT:
			if(tempVal == 1)
 430:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	79 f4       	brne	.+30     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			{
				if(tempNum < 9)
 438:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 43c:	89 30       	cpi	r24, 0x09	; 9
 43e:	28 f4       	brcc	.+10     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				{
					tempNum++;
 440:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 444:	8f 5f       	subi	r24, 0xFF	; 255
 446:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tempNum>
				}
				
				timeChk = 0;
 44a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_ONE;
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			else
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
		break;
 454:	99 c0       	rjmp	.+306    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
				
				timeChk = 0;
				SM2_STATES = SM2_ONE;
			}
		
			else if(tempVal == 0)
 456:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 45a:	88 23       	and	r24, r24
 45c:	21 f4       	brne	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			{
				SM2_STATES = SM2_INIT;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			else
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
		break;
 464:	91 c0       	rjmp	.+290    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			else if(tempVal == 0)
			{
				SM2_STATES = SM2_INIT;
			}
		
			else if(tempVal == 2)
 466:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	91 f4       	brne	.+36     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
			{
				if(tempNum > 0)
 46e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 472:	88 23       	and	r24, r24
 474:	31 f0       	breq	.+12     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
				{
					tempNum--;
 476:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 47a:	81 50       	subi	r24, 0x01	; 1
 47c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tempNum>
 480:	02 c0       	rjmp	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				}
			
				else
				{
					tempNum = 0;
 482:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
				}
				
				timeChk = 0;
 486:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_TWO;
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			else
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
		break;
 490:	7b c0       	rjmp	.+246    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
				SM2_STATES = SM2_TWO;
			}
		
			else
			{
				tempNum = 0x00;
 492:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 496:	84 e0       	ldi	r24, 0x04	; 4
 498:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			}
		break;
 49c:	75 c0       	rjmp	.+234    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		
		case SM2_ONE:
			if(tempVal == 1 && timeChk < 1)
 49e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	41 f4       	brne	.+16     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 4aa:	88 23       	and	r24, r24
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
			{
				SM2_STATES = SM2_ONE;
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
 4b4:	16 c0       	rjmp	.+44     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			}
			
			else if(tempVal == 1 && timeChk == 1) 
 4b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	91 f4       	brne	.+36     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	71 f4       	brne	.+28     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
			{
				if(tempNum < 9)
 4c6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 4ca:	89 30       	cpi	r24, 0x09	; 9
 4cc:	28 f4       	brcc	.+10     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				{
					tempNum++;
 4ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 4d2:	8f 5f       	subi	r24, 0xFF	; 255
 4d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tempNum>
				}
				timeChk = 0;
 4d8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_ONE;
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			}
		
			if (tempVal == 3)
 4e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	41 f4       	brne	.+16     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
			{
				timeChk = 0;
 4ea:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				tempNum = 0x00;
 4ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
				timeChk = 0;
				SM2_STATES = SM2_INIT;
			
			}
		
		break;
 4f8:	47 c0       	rjmp	.+142    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
			
			}
		
			else
			{
				timeChk = 0;
 4fa:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_INIT;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			
			}
		
		break;
 504:	41 c0       	rjmp	.+130    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		
		case SM2_TWO:
			if(tempVal == 2 && timeChk < 1)
 506:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	41 f4       	brne	.+16     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 50e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 512:	88 23       	and	r24, r24
 514:	21 f4       	brne	.+8      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
			{
				SM2_STATES = SM2_TWO;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
 51c:	2c c0       	rjmp	.+88     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
			}

			else if(tempVal == 2 && timeChk == 1)
 51e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 522:	82 30       	cpi	r24, 0x02	; 2
 524:	b1 f4       	brne	.+44     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 526:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	91 f4       	brne	.+36     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
			{
				if(tempNum > 0)
 52e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 532:	88 23       	and	r24, r24
 534:	31 f0       	breq	.+12     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
				{
					tempNum--;
 536:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 53a:	81 50       	subi	r24, 0x01	; 1
 53c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tempNum>
 540:	02 c0       	rjmp	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
				}
				else
				{
					tempNum = 0;
 542:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
				}
				
				timeChk = 0;
 546:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_TWO;
 54a:	83 e0       	ldi	r24, 0x03	; 3
 54c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
 550:	12 c0       	rjmp	.+36     	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
			}		
			
			else if (tempVal == 3)
 552:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 556:	83 30       	cpi	r24, 0x03	; 3
 558:	41 f4       	brne	.+16     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
			{
				timeChk = 0;
 55a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				tempNum = 0x00;
 55e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			{
				timeChk = 0;
				SM2_STATES = SM2_INIT;
			}
		
		break;
 568:	0f c0       	rjmp	.+30     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
				SM2_STATES = SM2_DEPRESSED;
			}
		
			else
			{
				timeChk = 0;
 56a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_INIT;
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			}
		
		break;
 574:	09 c0       	rjmp	.+18     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
 576:	08 c0       	rjmp	.+16     	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
// 				SM2_STATES = SM2_DEPRESSED;
// 			}
// 		
// 			else
// 			{
				timeChk = 0;
 578:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <timeChk>
				SM2_STATES = SM2_INIT;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <SM2_STATES>
			//}
		
		break;
 582:	02 c0       	rjmp	.+4      	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
		
		default:
		SM2_STATES = SM2_START;
 584:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <SM2_STATES>
	}
	
	switch(SM2_STATES) //Actions
 588:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SM2_STATES>
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	82 30       	cpi	r24, 0x02	; 2
 592:	91 05       	cpc	r25, r1
 594:	e1 f0       	breq	.+56     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	91 05       	cpc	r25, r1
 59a:	2c f4       	brge	.+10     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
 59c:	00 97       	sbiw	r24, 0x00	; 0
 59e:	49 f0       	breq	.+18     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	71 f0       	breq	.+28     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
			LCD_ClearScreen();
			LCD_Cursor(1);
			LCD_WriteData(tempNum + '0');
		break;
	}
}
 5a4:	36 c0       	rjmp	.+108    	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
		
		default:
		SM2_STATES = SM2_START;
	}
	
	switch(SM2_STATES) //Actions
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	91 05       	cpc	r25, r1
 5aa:	e9 f0       	breq	.+58     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
 5ac:	04 97       	sbiw	r24, 0x04	; 4
 5ae:	39 f1       	breq	.+78     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
			LCD_ClearScreen();
			LCD_Cursor(1);
			LCD_WriteData(tempNum + '0');
		break;
	}
}
 5b0:	30 c0       	rjmp	.+96     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
	}
	
	switch(SM2_STATES) //Actions
	{
		case SM2_START:
		LCD_Cursor(1);
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	07 de       	rcall	.-1010   	; 0x1c4 <LCD_Cursor>
		LCD_WriteData(tempNum + '0');
 5b6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 5ba:	80 5d       	subi	r24, 0xD0	; 208
 5bc:	d4 dd       	rcall	.-1112   	; 0x166 <LCD_WriteData>
		break;
		case SM2_INIT:
		LCD_Cursor(1);
 5be:	29 c0       	rjmp	.+82     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	00 de       	rcall	.-1024   	; 0x1c4 <LCD_Cursor>
		LCD_WriteData(tempNum + '0');
 5c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 5c8:	80 5d       	subi	r24, 0xD0	; 208
 5ca:	cd dd       	rcall	.-1126   	; 0x166 <LCD_WriteData>
		break;
 5cc:	22 c0       	rjmp	.+68     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
		case SM2_ONE:
		timeChk++;
 5ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeChk>
		LCD_Cursor(1);
 5d8:	81 e0       	ldi	r24, 0x01	; 1
		LCD_WriteData(tempNum + '0');
 5da:	f4 dd       	rcall	.-1048   	; 0x1c4 <LCD_Cursor>
 5dc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 5e0:	80 5d       	subi	r24, 0xD0	; 208
 5e2:	c1 dd       	rcall	.-1150   	; 0x166 <LCD_WriteData>
		break;
 5e4:	16 c0       	rjmp	.+44     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
		case SM2_TWO:
		timeChk++;
 5e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <timeChk>
 5ea:	8f 5f       	subi	r24, 0xFF	; 255
 5ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <timeChk>
		LCD_Cursor(1);
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	e8 dd       	rcall	.-1072   	; 0x1c4 <LCD_Cursor>
		LCD_WriteData(tempNum + '0');
 5f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 5f8:	80 5d       	subi	r24, 0xD0	; 208
		break;
 5fa:	b5 dd       	rcall	.-1174   	; 0x166 <LCD_WriteData>
		case SM2_DEPRESSED:
			tempNum = 0;
 5fc:	0a c0       	rjmp	.+20     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
			LCD_ClearScreen();
 5fe:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
			LCD_Cursor(1);
 602:	62 dd       	rcall	.-1340   	; 0xc8 <LCD_ClearScreen>
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	de dd       	rcall	.-1092   	; 0x1c4 <LCD_Cursor>
			LCD_WriteData(tempNum + '0');
 608:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tempNum>
 60c:	80 5d       	subi	r24, 0xD0	; 208
 60e:	ab dd       	rcall	.-1194   	; 0x166 <LCD_WriteData>
 610:	00 00       	nop
		break;
 612:	00 00       	nop
	}
}
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <main>:
 61a:	cf 93       	push	r28


int main(void)
{
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 622:	81 e2       	ldi	r24, 0x21	; 33
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	fc 01       	movw	r30, r24
 628:	10 82       	st	Z, r1
 62a:	82 e2       	ldi	r24, 0x22	; 34
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 634:	87 e2       	ldi	r24, 0x27	; 39
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	2f ef       	ldi	r18, 0xFF	; 255
 63a:	fc 01       	movw	r30, r24
 63c:	20 83       	st	Z, r18
 63e:	88 e2       	ldi	r24, 0x28	; 40
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	fc 01       	movw	r30, r24
 644:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 646:	8a e2       	ldi	r24, 0x2A	; 42
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	2f ef       	ldi	r18, 0xFF	; 255
 64c:	fc 01       	movw	r30, r24
 64e:	20 83       	st	Z, r18
 650:	8b e2       	ldi	r24, 0x2B	; 43
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	fc 01       	movw	r30, r24
 656:	10 82       	st	Z, r1
	tempNum = 0x00 & 0x0F;
 658:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tempNum>
	
		TimerSet(125);
 65c:	6d e7       	ldi	r22, 0x7D	; 125
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	97 de       	rcall	.-722    	; 0x394 <TimerSet>
		TimerOn();
 666:	f3 dd       	rcall	.-1050   	; 0x24e <TimerOn>
		
		LCD_init();
 668:	39 dd       	rcall	.-1422   	; 0xdc <LCD_init>
 66a:	2e dd       	rcall	.-1444   	; 0xc8 <LCD_ClearScreen>
		LCD_ClearScreen();
 66c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <SM2_STATES>
	
	SM2_STATES = SM2_START;
 670:	80 e2       	ldi	r24, 0x20	; 32
 672:	90 e0       	ldi	r25, 0x00	; 0
	
	while (1)
	{
		tempVal = ~PINA & 0x03;
 674:	fc 01       	movw	r30, r24
 676:	80 81       	ld	r24, Z
 678:	80 95       	com	r24
 67a:	83 70       	andi	r24, 0x03	; 3
 67c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 680:	b7 de       	rcall	.-658    	; 0x3f0 <tick>
		tick();
 682:	00 00       	nop
 684:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <TimerFlag>
		while (!TimerFlag);
 688:	88 23       	and	r24, r24
 68a:	e1 f3       	breq	.-8      	; 0x684 <main+0x6a>
 68c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <TimerFlag>
		TimerFlag = 0;
 690:	ef cf       	rjmp	.-34     	; 0x670 <main+0x56>

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
	}
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
