
mandr024_lab1_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000884  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ac  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000439  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	da c0       	rjmp	.+436    	; 0x250 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>
#define range 84

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	27 97       	sbiw	r28, 0x07	; 7
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
  ba:	82 e2       	ldi	r24, 0x22	; 34
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF;
  c4:	84 e2       	ldi	r24, 0x24	; 36
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	fc 01       	movw	r30, r24
  ca:	10 82       	st	Z, r1
  cc:	85 e2       	ldi	r24, 0x25	; 37
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
	DDRC = 0x00; PORTC = 0xFF; // Configure port C's 8 pins as inputs
  d6:	87 e2       	ldi	r24, 0x27	; 39
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	fc 01       	movw	r30, r24
  dc:	10 82       	st	Z, r1
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
  e8:	8a e2       	ldi	r24, 0x2A	; 42
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	8b e2       	ldi	r24, 0x2B	; 43
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	10 82       	st	Z, r1
	unsigned short tempNum;
	unsigned short tempNumTwo;
    /* Replace with your application code */
    while (1) 
    {
		tempA = PINA;
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	80 81       	ld	r24, Z
 102:	89 83       	std	Y+1, r24	; 0x01
		tempB = PINB;
 104:	83 e2       	ldi	r24, 0x23	; 35
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	fc 01       	movw	r30, r24
 10a:	80 81       	ld	r24, Z
 10c:	8a 83       	std	Y+2, r24	; 0x02
		tempC = PINC;
 10e:	86 e2       	ldi	r24, 0x26	; 38
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	8b 83       	std	Y+3, r24	; 0x03
		
		tempNumTwo = tempA + tempB + tempC;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	8a 81       	ldd	r24, Y+2	; 0x02
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	28 0f       	add	r18, r24
 126:	39 1f       	adc	r19, r25
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	82 0f       	add	r24, r18
 130:	93 1f       	adc	r25, r19
 132:	9d 83       	std	Y+5, r25	; 0x05
 134:	8c 83       	std	Y+4, r24	; 0x04
		
		tempNum = tempA - tempC;
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	28 2f       	mov	r18, r24
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	a9 01       	movw	r20, r18
 144:	48 1b       	sub	r20, r24
 146:	59 0b       	sbc	r21, r25
 148:	ca 01       	movw	r24, r20
 14a:	9f 83       	std	Y+7, r25	; 0x07
 14c:	8e 83       	std	Y+6, r24	; 0x06
		
		tempNum = abs(tempNum);
 14e:	8e 81       	ldd	r24, Y+6	; 0x06
 150:	9f 81       	ldd	r25, Y+7	; 0x07
 152:	99 23       	and	r25, r25
 154:	1c f4       	brge	.+6      	; 0x15c <main+0xbe>
 156:	91 95       	neg	r25
 158:	81 95       	neg	r24
 15a:	91 09       	sbc	r25, r1
 15c:	9f 83       	std	Y+7, r25	; 0x07
 15e:	8e 83       	std	Y+6, r24	; 0x06
		
		if( tempNumTwo >= 140)
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	9d 81       	ldd	r25, Y+5	; 0x05
 164:	8c 38       	cpi	r24, 0x8C	; 140
 166:	91 05       	cpc	r25, r1
 168:	80 f0       	brcs	.+32     	; 0x18a <main+0xec>
		{
			if(tempNum >= 80)
 16a:	8e 81       	ldd	r24, Y+6	; 0x06
 16c:	9f 81       	ldd	r25, Y+7	; 0x07
 16e:	80 35       	cpi	r24, 0x50	; 80
 170:	91 05       	cpc	r25, r1
 172:	30 f0       	brcs	.+12     	; 0x180 <main+0xe2>
			{
				PORTD = 0x02;
 174:	8b e2       	ldi	r24, 0x2B	; 43
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	22 e0       	ldi	r18, 0x02	; 2
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	05 c0       	rjmp	.+10     	; 0x18a <main+0xec>
			}
			
			else
			{
				PORTD = 0x01;
 180:	8b e2       	ldi	r24, 0x2B	; 43
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
			}
				
		}
		
		if( tempNumTwo > 255 && tempNumTwo < 339) //range of 84 for 1 bit each estimate quick and easy
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	9d 81       	ldd	r25, Y+5	; 0x05
 18e:	8f 3f       	cpi	r24, 0xFF	; 255
 190:	91 05       	cpc	r25, r1
 192:	61 f0       	breq	.+24     	; 0x1ac <main+0x10e>
 194:	58 f0       	brcs	.+22     	; 0x1ac <main+0x10e>
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	9d 81       	ldd	r25, Y+5	; 0x05
 19a:	83 35       	cpi	r24, 0x53	; 83
 19c:	91 40       	sbci	r25, 0x01	; 1
 19e:	30 f4       	brcc	.+12     	; 0x1ac <main+0x10e>
		{
			PORTD = 0x04;
 1a0:	8b e2       	ldi	r24, 0x2B	; 43
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	24 e0       	ldi	r18, 0x04	; 4
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
 1aa:	51 c0       	rjmp	.+162    	; 0x24e <main+0x1b0>
		}
		else if( tempNumTwo > 339 && tempNumTwo < 423)
 1ac:	8c 81       	ldd	r24, Y+4	; 0x04
 1ae:	9d 81       	ldd	r25, Y+5	; 0x05
 1b0:	84 35       	cpi	r24, 0x54	; 84
 1b2:	91 40       	sbci	r25, 0x01	; 1
 1b4:	58 f0       	brcs	.+22     	; 0x1cc <main+0x12e>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	9d 81       	ldd	r25, Y+5	; 0x05
 1ba:	87 3a       	cpi	r24, 0xA7	; 167
 1bc:	91 40       	sbci	r25, 0x01	; 1
 1be:	30 f4       	brcc	.+12     	; 0x1cc <main+0x12e>
		{
			PORTD = 0x08;
 1c0:	8b e2       	ldi	r24, 0x2B	; 43
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	28 e0       	ldi	r18, 0x08	; 8
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 83       	st	Z, r18
 1ca:	41 c0       	rjmp	.+130    	; 0x24e <main+0x1b0>
		}
		else if( tempNumTwo > 423 && tempNumTwo < 507)
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	88 3a       	cpi	r24, 0xA8	; 168
 1d2:	91 40       	sbci	r25, 0x01	; 1
 1d4:	58 f0       	brcs	.+22     	; 0x1ec <main+0x14e>
 1d6:	8c 81       	ldd	r24, Y+4	; 0x04
 1d8:	9d 81       	ldd	r25, Y+5	; 0x05
 1da:	8b 3f       	cpi	r24, 0xFB	; 251
 1dc:	91 40       	sbci	r25, 0x01	; 1
 1de:	30 f4       	brcc	.+12     	; 0x1ec <main+0x14e>
		{
			PORTD = 0x10;
 1e0:	8b e2       	ldi	r24, 0x2B	; 43
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	20 e1       	ldi	r18, 0x10	; 16
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
 1ea:	31 c0       	rjmp	.+98     	; 0x24e <main+0x1b0>
		}
		else if( tempNumTwo > 507 && tempNumTwo < 591)
 1ec:	8c 81       	ldd	r24, Y+4	; 0x04
 1ee:	9d 81       	ldd	r25, Y+5	; 0x05
 1f0:	8c 3f       	cpi	r24, 0xFC	; 252
 1f2:	91 40       	sbci	r25, 0x01	; 1
 1f4:	58 f0       	brcs	.+22     	; 0x20c <main+0x16e>
 1f6:	8c 81       	ldd	r24, Y+4	; 0x04
 1f8:	9d 81       	ldd	r25, Y+5	; 0x05
 1fa:	8f 34       	cpi	r24, 0x4F	; 79
 1fc:	92 40       	sbci	r25, 0x02	; 2
 1fe:	30 f4       	brcc	.+12     	; 0x20c <main+0x16e>
		{
			PORTD = 0x20;
 200:	8b e2       	ldi	r24, 0x2B	; 43
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	20 e2       	ldi	r18, 0x20	; 32
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	21 c0       	rjmp	.+66     	; 0x24e <main+0x1b0>
		}
		else if( tempNumTwo > 591 && tempNumTwo < 675)
 20c:	8c 81       	ldd	r24, Y+4	; 0x04
 20e:	9d 81       	ldd	r25, Y+5	; 0x05
 210:	80 35       	cpi	r24, 0x50	; 80
 212:	92 40       	sbci	r25, 0x02	; 2
 214:	58 f0       	brcs	.+22     	; 0x22c <main+0x18e>
 216:	8c 81       	ldd	r24, Y+4	; 0x04
 218:	9d 81       	ldd	r25, Y+5	; 0x05
 21a:	83 3a       	cpi	r24, 0xA3	; 163
 21c:	92 40       	sbci	r25, 0x02	; 2
 21e:	30 f4       	brcc	.+12     	; 0x22c <main+0x18e>
		{
			PORTD = 0x40;
 220:	8b e2       	ldi	r24, 0x2B	; 43
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	20 e4       	ldi	r18, 0x40	; 64
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18
 22a:	11 c0       	rjmp	.+34     	; 0x24e <main+0x1b0>
		}
		else if( tempNumTwo > 675 && tempNumTwo < 765) // not 84 range but to accommodate
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	9d 81       	ldd	r25, Y+5	; 0x05
 230:	84 3a       	cpi	r24, 0xA4	; 164
 232:	92 40       	sbci	r25, 0x02	; 2
 234:	08 f4       	brcc	.+2      	; 0x238 <main+0x19a>
 236:	61 cf       	rjmp	.-318    	; 0xfa <main+0x5c>
 238:	8c 81       	ldd	r24, Y+4	; 0x04
 23a:	9d 81       	ldd	r25, Y+5	; 0x05
 23c:	8d 3f       	cpi	r24, 0xFD	; 253
 23e:	92 40       	sbci	r25, 0x02	; 2
 240:	08 f0       	brcs	.+2      	; 0x244 <main+0x1a6>
 242:	5b cf       	rjmp	.-330    	; 0xfa <main+0x5c>
		{
			PORTD = 0x80;
 244:	8b e2       	ldi	r24, 0x2B	; 43
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	20 e8       	ldi	r18, 0x80	; 128
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
		}
    }
 24e:	55 cf       	rjmp	.-342    	; 0xfa <main+0x5c>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
