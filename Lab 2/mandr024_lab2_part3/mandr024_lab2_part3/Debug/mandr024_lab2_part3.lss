
mandr024_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000931  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082f  00000000  00000000  00000b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000420  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	28 c0       	rjmp	.+80     	; 0xec <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
}


int main(void)
{
    DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00; // Configure port C's 8 pins as outputs
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	15 b8       	out	0x05, r1	; 5
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	70 e0       	ldi	r23, 0x00	; 0
		signed char i = 0;
		unsigned char driver = 0x00;
		unsigned char key = 0x00;
		unsigned char fastened = 0x00;
		unsigned char tempVal = 0x00;
		PORTB = 0x00;
  ac:	15 b8       	out	0x05, r1	; 5
		
		tempNum = PINA;
  ae:	90 b1       	in	r25, 0x00	; 0
			{
				tempVal = SetBit(tempVal, 7, 0);
			}
		}
		
		if(PINA <= 4)
  b0:	80 b1       	in	r24, 0x00	; 0
  b2:	85 30       	cpi	r24, 0x05	; 5
  b4:	c0 f4       	brcc	.+48     	; 0xe6 <main+0x48>
		{
			tempVal = SetBit(tempVal, 6, 1);
  b6:	20 e4       	ldi	r18, 0x40	; 64
  b8:	17 c0       	rjmp	.+46     	; 0xe8 <main+0x4a>
		}
		
		for(i = 5; i >= 0 ; i--)
		{
			if(tempNum > 0)
  ba:	19 16       	cp	r1, r25
  bc:	84 f4       	brge	.+32     	; 0xde <main+0x40>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  be:	ab 01       	movw	r20, r22
  c0:	08 2e       	mov	r0, r24
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <main+0x2a>
  c4:	44 0f       	add	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	0a 94       	dec	r0
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <main+0x26>
  cc:	24 2b       	or	r18, r20
		{
			if(tempNum > 0)
			{
				unsigned char x = i;
				tempVal = SetBit(tempVal, x, 1);
				tempNum = tempNum - 2;
  ce:	92 50       	subi	r25, 0x02	; 2
				
				if (PINA == 9 && i == 1)
  d0:	30 b1       	in	r19, 0x00	; 0
  d2:	39 30       	cpi	r19, 0x09	; 9
  d4:	21 f4       	brne	.+8      	; 0xde <main+0x40>
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	11 f4       	brne	.+4      	; 0xde <main+0x40>
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  da:	2d 7f       	andi	r18, 0xFD	; 253
				tempNum = tempNum - 2;
				
				if (PINA == 9 && i == 1)
				{
					tempVal = SetBit(tempVal, 1, 0);
					break;
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <main+0x44>
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	60 f7       	brcc	.-40     	; 0xba <main+0x1c>
				
			}
			
		}
		
		PORTB = tempVal;
  e2:	25 b9       	out	0x05, r18	; 5
		
    }
  e4:	e3 cf       	rjmp	.-58     	; 0xac <main+0xe>
  e6:	20 e0       	ldi	r18, 0x00	; 0
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}


int main(void)
{
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	e7 cf       	rjmp	.-50     	; 0xba <main+0x1c>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
