
mandr024_lab2_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ce  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000423  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001c67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4e d0       	rcall	.+156    	; 0x136 <main>
  9a:	c5 c0       	rjmp	.+394    	; 0x226 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <SetBit>:
 * Author : Miguel
 */ 

#include <avr/io.h>

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <SetBit+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	89 83       	std	Y+1, r24	; 0x01
  ac:	6a 83       	std	Y+2, r22	; 0x02
  ae:	4b 83       	std	Y+3, r20	; 0x03
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	88 23       	and	r24, r24
  b4:	71 f0       	breq	.+28     	; 0xd2 <SetBit+0x34>
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	28 2f       	mov	r18, r24
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <SetBit+0x28>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	2a 95       	dec	r18
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <SetBit+0x24>
  ca:	98 2f       	mov	r25, r24
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	89 2b       	or	r24, r25
  d0:	0e c0       	rjmp	.+28     	; 0xee <SetBit+0x50>
  d2:	8a 81       	ldd	r24, Y+2	; 0x02
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <SetBit+0x44>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	2a 95       	dec	r18
  e4:	e2 f7       	brpl	.-8      	; 0xde <SetBit+0x40>
  e6:	98 2f       	mov	r25, r24
  e8:	90 95       	com	r25
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	89 23       	and	r24, r25
}
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <GetBit>:

unsigned char GetBit(unsigned char x, unsigned char k) {
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	00 d0       	rcall	.+0      	; 0x100 <GetBit+0x6>
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a 81       	ldd	r18, Y+2	; 0x02
 110:	22 2f       	mov	r18, r18
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <GetBit+0x20>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	2a 95       	dec	r18
 11c:	e2 f7       	brpl	.-8      	; 0x116 <GetBit+0x1c>
 11e:	81 70       	andi	r24, 0x01	; 1
 120:	99 27       	eor	r25, r25
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	89 2b       	or	r24, r25
 126:	09 f4       	brne	.+2      	; 0x12a <GetBit+0x30>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	82 2f       	mov	r24, r18
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <main>:


int main(void)
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	00 d0       	rcall	.+0      	; 0x13c <main+0x6>
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x8>
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0xa>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fc 01       	movw	r30, r24
 14a:	10 82       	st	Z, r1
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
    DDRB = 0xFF; PORTB = 0x00; // Configure port C's 8 pins as outputs
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	fc 01       	movw	r30, r24
 166:	10 82       	st	Z, r1
	
    while (1) 
    {
		
		signed char tempNum = 0x00;
 168:	1c 82       	std	Y+4, r1	; 0x04
		signed char tempNum_two = 0x00;
 16a:	19 82       	std	Y+1, r1	; 0x01
		signed char i = 0;
 16c:	1a 82       	std	Y+2, r1	; 0x02
		unsigned char key = 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	8d 83       	std	Y+5, r24	; 0x05
		unsigned char tempVal = 0x00;
 172:	1b 82       	std	Y+3, r1	; 0x03
		PORTB = 0x00;
 174:	85 e2       	ldi	r24, 0x25	; 37
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	10 82       	st	Z, r1
		
		tempNum = PINA;
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	8c 83       	std	Y+4, r24	; 0x04
		
				
		if(GetBit(tempNum, 4) && GetBit(tempNum, 6) == 0 && GetBit(tempNum, 5))
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	64 e0       	ldi	r22, 0x04	; 4
 18a:	b7 df       	rcall	.-146    	; 0xfa <GetBit>
 18c:	88 23       	and	r24, r24
 18e:	79 f0       	breq	.+30     	; 0x1ae <main+0x78>
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	b2 df       	rcall	.-156    	; 0xfa <GetBit>
 196:	88 23       	and	r24, r24
 198:	51 f4       	brne	.+20     	; 0x1ae <main+0x78>
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	ad df       	rcall	.-166    	; 0xfa <GetBit>
 1a0:	88 23       	and	r24, r24
 1a2:	29 f0       	breq	.+10     	; 0x1ae <main+0x78>
		{
			tempVal = SetBit(tempVal, 7, 1);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	79 df       	rcall	.-270    	; 0x9e <SetBit>
 1ac:	8b 83       	std	Y+3, r24	; 0x03
		}
		
		tempNum_two = (PINA & 0x0F);
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	8f 70       	andi	r24, 0x0F	; 15
 1b8:	89 83       	std	Y+1, r24	; 0x01
		key = (PINA & 0x0F);
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	8f 70       	andi	r24, 0x0F	; 15
 1c4:	8d 83       	std	Y+5, r24	; 0x05
		
		if(key <= 4)
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	85 30       	cpi	r24, 0x05	; 5
		{
			tempVal = SetBit(tempVal, 6, 1);
 1ca:	28 f4       	brcc	.+10     	; 0x1d6 <main+0xa0>
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	65 df       	rcall	.-310    	; 0x9e <SetBit>
 1d4:	8b 83       	std	Y+3, r24	; 0x03
		}
		
		for(i = 5; i >= 0 ; i--)
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	8a 83       	std	Y+2, r24	; 0x02
 1da:	1c c0       	rjmp	.+56     	; 0x214 <main+0xde>
		{
			if(tempNum_two > 0)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	18 16       	cp	r1, r24
 1e0:	b4 f4       	brge	.+44     	; 0x20e <main+0xd8>
			{
				unsigned char x = i;
 1e2:	8a 81       	ldd	r24, Y+2	; 0x02
				tempVal = SetBit(tempVal, x, 1);
 1e4:	8e 83       	std	Y+6, r24	; 0x06
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	6e 81       	ldd	r22, Y+6	; 0x06
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	58 df       	rcall	.-336    	; 0x9e <SetBit>
 1ee:	8b 83       	std	Y+3, r24	; 0x03
				tempNum_two = tempNum_two - 2;
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	82 50       	subi	r24, 0x02	; 2
 1f4:	89 83       	std	Y+1, r24	; 0x01
				
				if (key == 9 && i == 1)
 1f6:	8d 81       	ldd	r24, Y+5	; 0x05
 1f8:	89 30       	cpi	r24, 0x09	; 9
 1fa:	49 f4       	brne	.+18     	; 0x20e <main+0xd8>
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
 1fe:	81 30       	cpi	r24, 0x01	; 1
				{
					tempVal = SetBit(tempVal, 1, 0);
 200:	31 f4       	brne	.+12     	; 0x20e <main+0xd8>
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	4a df       	rcall	.-364    	; 0x9e <SetBit>
 20a:	8b 83       	std	Y+3, r24	; 0x03
					break;
 20c:	06 c0       	rjmp	.+12     	; 0x21a <main+0xe4>
		if(key <= 4)
		{
			tempVal = SetBit(tempVal, 6, 1);
		}
		
		for(i = 5; i >= 0 ; i--)
 20e:	8a 81       	ldd	r24, Y+2	; 0x02
 210:	81 50       	subi	r24, 0x01	; 1
 212:	8a 83       	std	Y+2, r24	; 0x02
 214:	8a 81       	ldd	r24, Y+2	; 0x02
 216:	88 23       	and	r24, r24
 218:	0c f7       	brge	.-62     	; 0x1dc <main+0xa6>
				
			}
			
		}
		
		PORTB = tempVal;
 21a:	85 e2       	ldi	r24, 0x25	; 37
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2b 81       	ldd	r18, Y+3	; 0x03
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
		
    }
 224:	a1 cf       	rjmp	.-190    	; 0x168 <main+0x32>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
