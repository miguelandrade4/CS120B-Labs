
mandr024_lab2_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ad  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d9  00000000  00000000  00000b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b8  00000000  00000000  0000133a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  000015f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000416  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c4  00000000  00000000  00001a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	29 d0       	rcall	.+82     	; 0xec <main>
  9a:	94 c0       	rjmp	.+296    	; 0x1c4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <GetBit.1609>:
	unsigned char tempCount = 0x00;
	unsigned char tempA = 0x00;
	unsigned char tempB = 0x00;
	
	
	unsigned char GetBit(unsigned char x, unsigned char k) {
  9e:	2f 92       	push	r2
  a0:	3f 92       	push	r3
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <GetBit.1609+0xa>
  a8:	00 d0       	rcall	.+0      	; 0xaa <GetBit.1609+0xc>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	6a 83       	std	Y+2, r22	; 0x02
  b2:	3c 82       	std	Y+4, r3	; 0x04
  b4:	2b 82       	std	Y+3, r2	; 0x03
		return ((x & (0x01 << k)) != 0);
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	88 2f       	mov	r24, r24
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2a 81       	ldd	r18, Y+2	; 0x02
  be:	22 2f       	mov	r18, r18
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <GetBit.1609+0x2a>
  c4:	95 95       	asr	r25
  c6:	87 95       	ror	r24
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <GetBit.1609+0x26>
  cc:	81 70       	andi	r24, 0x01	; 1
  ce:	99 27       	eor	r25, r25
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	89 2b       	or	r24, r25
  d4:	09 f4       	brne	.+2      	; 0xd8 <GetBit.1609+0x3a>
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	82 2f       	mov	r24, r18
	}
  da:	0f 90       	pop	r0
  dc:	0f 90       	pop	r0
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	3f 90       	pop	r3
  e8:	2f 90       	pop	r2
  ea:	08 95       	ret

000000ec <main>:

#include <avr/io.h>


int main(void)
{
  ec:	2f 92       	push	r2
  ee:	3f 92       	push	r3
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0xa>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0xc>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  fe:	81 e2       	ldi	r24, 0x21	; 33
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	10 82       	st	Z, r1
 106:	82 e2       	ldi	r24, 0x22	; 34
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	DDRB = 0x00; PORTB = 0xFF; // Configure port B's 8 pins as inputs,
 110:	84 e2       	ldi	r24, 0x24	; 36
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	10 82       	st	Z, r1
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00; // Configure port C's 8 pins as outputs
 122:	87 e2       	ldi	r24, 0x27	; 39
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	10 82       	st	Z, r1
	
	unsigned char tempCount = 0x00;
 134:	19 82       	std	Y+1, r1	; 0x01
	unsigned char tempA = 0x00;
 136:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char tempB = 0x00;
 138:	1b 82       	std	Y+3, r1	; 0x03
	}

	
    while (1) 
    {
		tempCount = 0x00;
 13a:	19 82       	std	Y+1, r1	; 0x01
		tempA = PINA;
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	fc 01       	movw	r30, r24
 142:	80 81       	ld	r24, Z
 144:	8a 83       	std	Y+2, r24	; 0x02
		tempB = PINB;
 146:	83 e2       	ldi	r24, 0x23	; 35
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	8b 83       	std	Y+3, r24	; 0x03
	
		
		for(unsigned char i = 0; i < 9; i++)
 150:	1c 82       	std	Y+4, r1	; 0x04
 152:	15 c0       	rjmp	.+42     	; 0x17e <main+0x92>
		{
			if((GetBit(tempA, 0) == 1))
 154:	ce 01       	movw	r24, r28
 156:	06 96       	adiw	r24, 0x06	; 6
 158:	1c 01       	movw	r2, r24
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9f df       	rcall	.-194    	; 0x9e <GetBit.1609>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	39 f4       	brne	.+14     	; 0x172 <main+0x86>
			{
				tempCount++;
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	89 83       	std	Y+1, r24	; 0x01
				tempA = tempA>>1;
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	86 95       	lsr	r24
 16e:	8a 83       	std	Y+2, r24	; 0x02
 170:	03 c0       	rjmp	.+6      	; 0x178 <main+0x8c>
			}
			else
			{
				tempA = tempA>>1;
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	86 95       	lsr	r24
 176:	8a 83       	std	Y+2, r24	; 0x02
		tempCount = 0x00;
		tempA = PINA;
		tempB = PINB;
	
		
		for(unsigned char i = 0; i < 9; i++)
 178:	8c 81       	ldd	r24, Y+4	; 0x04
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	8c 83       	std	Y+4, r24	; 0x04
 17e:	8c 81       	ldd	r24, Y+4	; 0x04
 180:	89 30       	cpi	r24, 0x09	; 9
 182:	40 f3       	brcs	.-48     	; 0x154 <main+0x68>
				tempA = tempA>>1;
			}
			
		}
		
		for(unsigned char i = 0; i < 9; i++)
 184:	1d 82       	std	Y+5, r1	; 0x05
 186:	15 c0       	rjmp	.+42     	; 0x1b2 <main+0xc6>
		{
			if((GetBit(tempB, 0) == 1))
 188:	ce 01       	movw	r24, r28
 18a:	06 96       	adiw	r24, 0x06	; 6
 18c:	1c 01       	movw	r2, r24
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	85 df       	rcall	.-246    	; 0x9e <GetBit.1609>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	39 f4       	brne	.+14     	; 0x1a6 <main+0xba>
			{
				tempCount++;
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	89 83       	std	Y+1, r24	; 0x01
				tempB = tempB>>1;
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	86 95       	lsr	r24
 1a2:	8b 83       	std	Y+3, r24	; 0x03
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <main+0xc0>
			}
			else
			{
				tempB = tempB>>1;
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	86 95       	lsr	r24
 1aa:	8b 83       	std	Y+3, r24	; 0x03
				tempA = tempA>>1;
			}
			
		}
		
		for(unsigned char i = 0; i < 9; i++)
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	8d 83       	std	Y+5, r24	; 0x05
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	89 30       	cpi	r24, 0x09	; 9
 1b6:	40 f3       	brcs	.-48     	; 0x188 <main+0x9c>
				tempB = tempB>>1;
			}
			
		}
		
		PORTC = tempCount; 
 1b8:	88 e2       	ldi	r24, 0x28	; 40
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	29 81       	ldd	r18, Y+1	; 0x01
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
		
		
		
    }
 1c2:	bb cf       	rjmp	.-138    	; 0x13a <main+0x4e>

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
