
mandr024_lab4_challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008db  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000516  00000000  00000000  0000161d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000461  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000205f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	63 c0       	rjmp	.+198    	; 0xcc <__bad_interrupt>
   6:	00 00       	nop
   8:	61 c0       	rjmp	.+194    	; 0xcc <__bad_interrupt>
   a:	00 00       	nop
   c:	5f c0       	rjmp	.+190    	; 0xcc <__bad_interrupt>
   e:	00 00       	nop
  10:	5d c0       	rjmp	.+186    	; 0xcc <__bad_interrupt>
  12:	00 00       	nop
  14:	5b c0       	rjmp	.+182    	; 0xcc <__bad_interrupt>
  16:	00 00       	nop
  18:	59 c0       	rjmp	.+178    	; 0xcc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	57 c0       	rjmp	.+174    	; 0xcc <__bad_interrupt>
  1e:	00 00       	nop
  20:	55 c0       	rjmp	.+170    	; 0xcc <__bad_interrupt>
  22:	00 00       	nop
  24:	53 c0       	rjmp	.+166    	; 0xcc <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c0       	rjmp	.+162    	; 0xcc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4f c0       	rjmp	.+158    	; 0xcc <__bad_interrupt>
  2e:	00 00       	nop
  30:	4d c0       	rjmp	.+154    	; 0xcc <__bad_interrupt>
  32:	00 00       	nop
  34:	4b c0       	rjmp	.+150    	; 0xcc <__bad_interrupt>
  36:	00 00       	nop
  38:	49 c0       	rjmp	.+146    	; 0xcc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	47 c0       	rjmp	.+142    	; 0xcc <__bad_interrupt>
  3e:	00 00       	nop
  40:	45 c0       	rjmp	.+138    	; 0xcc <__bad_interrupt>
  42:	00 00       	nop
  44:	43 c0       	rjmp	.+134    	; 0xcc <__bad_interrupt>
  46:	00 00       	nop
  48:	41 c0       	rjmp	.+130    	; 0xcc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3f c0       	rjmp	.+126    	; 0xcc <__bad_interrupt>
  4e:	00 00       	nop
  50:	3d c0       	rjmp	.+122    	; 0xcc <__bad_interrupt>
  52:	00 00       	nop
  54:	3b c0       	rjmp	.+118    	; 0xcc <__bad_interrupt>
  56:	00 00       	nop
  58:	39 c0       	rjmp	.+114    	; 0xcc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	37 c0       	rjmp	.+110    	; 0xcc <__bad_interrupt>
  5e:	00 00       	nop
  60:	35 c0       	rjmp	.+106    	; 0xcc <__bad_interrupt>
  62:	00 00       	nop
  64:	33 c0       	rjmp	.+102    	; 0xcc <__bad_interrupt>
  66:	00 00       	nop
  68:	31 c0       	rjmp	.+98     	; 0xcc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2f c0       	rjmp	.+94     	; 0xcc <__bad_interrupt>
  6e:	00 00       	nop
  70:	2d c0       	rjmp	.+90     	; 0xcc <__bad_interrupt>
  72:	00 00       	nop
  74:	2b c0       	rjmp	.+86     	; 0xcc <__bad_interrupt>
  76:	00 00       	nop
  78:	29 c0       	rjmp	.+82     	; 0xcc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	27 c0       	rjmp	.+78     	; 0xcc <__bad_interrupt>
  7e:	00 00       	nop
  80:	25 c0       	rjmp	.+74     	; 0xcc <__bad_interrupt>
  82:	00 00       	nop
  84:	23 c0       	rjmp	.+70     	; 0xcc <__bad_interrupt>
  86:	00 00       	nop
  88:	21 c0       	rjmp	.+66     	; 0xcc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	81 00       	.word	0x0081	; ????
  8e:	88 00       	.word	0x0088	; ????
  90:	e6 00       	.word	0x00e6	; ????
  92:	20 01       	movw	r4, r0
  94:	2c 01       	movw	r4, r24
  96:	38 01       	movw	r6, r16
  98:	66 01       	movw	r12, r12
  9a:	91 01       	movw	r18, r2
  9c:	c0 01       	movw	r24, r0
  9e:	c7 01       	movw	r24, r14
  a0:	ce 01       	movw	r24, r28
  a2:	d5 01       	movw	r26, r10
  a4:	dc 01       	movw	r26, r24
  a6:	e3 01       	movw	r28, r6
  a8:	ea 01       	movw	r28, r20
  aa:	f1 01       	movw	r30, r2

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a6 30       	cpi	r26, 0x06	; 6
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	99 d1       	rcall	.+818    	; 0x3fc <main>
  ca:	cf c1       	rjmp	.+926    	; 0x46a <_exit>

000000cc <__bad_interrupt>:
  cc:	99 cf       	rjmp	.-206    	; 0x0 <__vectors>

000000ce <tick>:
	unsigned char checkState = 0x00;
	unsigned char halo = 0x00;
	
	
void tick()
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	switch(lightShow)
  d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lightShow>
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	09 2e       	mov	r0, r25
  e0:	00 0c       	add	r0, r0
  e2:	aa 0b       	sbc	r26, r26
  e4:	bb 0b       	sbc	r27, r27
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	27 e0       	ldi	r18, 0x07	; 7
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	84 1b       	sub	r24, r20
  f0:	95 0b       	sbc	r25, r21
  f2:	28 17       	cp	r18, r24
  f4:	39 07       	cpc	r19, r25
  f6:	08 f4       	brcc	.+2      	; 0xfa <tick+0x2c>
  f8:	23 c1       	rjmp	.+582    	; 0x340 <tick+0x272>
  fa:	8a 5b       	subi	r24, 0xBA	; 186
  fc:	9f 4f       	sbci	r25, 0xFF	; 255
  fe:	fc 01       	movw	r30, r24
 100:	ab c1       	rjmp	.+854    	; 0x458 <__tablejump2__>
	{
		case START:
			tempNum = 0xFF;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			lightShow = INIT;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
		break;
 10e:	22 c1       	rjmp	.+580    	; 0x354 <tick+0x286>
		
		case INIT:
			if (tempVal && countChk == 0)
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 114:	88 23       	and	r24, r24
 116:	81 f0       	breq	.+32     	; 0x138 <tick+0x6a>
 118:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 11c:	88 23       	and	r24, r24
 11e:	61 f4       	brne	.+24     	; 0x138 <tick+0x6a>
			{
				++countChk;
 120:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countChk>
				tempNum = 0x55;
 12a:	85 e5       	ldi	r24, 0x55	; 85
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				lightShow = ONE;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 136:	49 c0       	rjmp	.+146    	; 0x1ca <tick+0xfc>
			}
			
			else if (tempVal && countChk == 1)
 138:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 13c:	88 23       	and	r24, r24
 13e:	81 f0       	breq	.+32     	; 0x160 <tick+0x92>
 140:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	61 f4       	brne	.+24     	; 0x160 <tick+0x92>
			{
				++countChk;
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countChk>
				tempNum = 0xAA;
 152:	8a ea       	ldi	r24, 0xAA	; 170
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				lightShow = TWO;
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 15e:	35 c0       	rjmp	.+106    	; 0x1ca <tick+0xfc>
			}
			
			else if (tempVal && countChk == 2)
 160:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 164:	88 23       	and	r24, r24
 166:	91 f0       	breq	.+36     	; 0x18c <tick+0xbe>
 168:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	71 f4       	brne	.+28     	; 0x18c <tick+0xbe>
			{
				++countChk;
 170:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countChk>
				tempNum = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				checkState = 0;
 180:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <checkState>
				lightShow = THREE;
 184:	85 e0       	ldi	r24, 0x05	; 5
 186:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 18a:	1f c0       	rjmp	.+62     	; 0x1ca <tick+0xfc>
			}
			
			else if (tempVal && countChk == 3)
 18c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 190:	88 23       	and	r24, r24
 192:	91 f0       	breq	.+36     	; 0x1b8 <tick+0xea>
 194:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	71 f4       	brne	.+28     	; 0x1b8 <tick+0xea>
			{
				++countChk;
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <countChk>
				checkState = 0;
 1a6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <checkState>
				tempNum = 0x80;
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				lightShow = FOUR;
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 1b6:	09 c0       	rjmp	.+18     	; 0x1ca <tick+0xfc>
			}
			
			else if (countChk == 4)
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <countChk>
 1bc:	84 30       	cpi	r24, 0x04	; 4
 1be:	09 f0       	breq	.+2      	; 0x1c2 <tick+0xf4>
 1c0:	c2 c0       	rjmp	.+388    	; 0x346 <tick+0x278>
			{
				
				lightShow = RESET;
 1c2:	87 e0       	ldi	r24, 0x07	; 7
 1c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
		break;
 1c8:	be c0       	rjmp	.+380    	; 0x346 <tick+0x278>
 1ca:	bd c0       	rjmp	.+378    	; 0x346 <tick+0x278>
			
		case WAIT:
				if(tempVal && halo)
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 1d0:	88 23       	and	r24, r24
 1d2:	c1 f0       	breq	.+48     	; 0x204 <tick+0x136>
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <halo>
 1d8:	88 23       	and	r24, r24
 1da:	a1 f0       	breq	.+40     	; 0x204 <tick+0x136>
				{
					tempNum = tempNum<<2;
 1dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e0:	88 0f       	add	r24, r24
 1e2:	88 0f       	add	r24, r24
 1e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					++tempNum;
 1e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					++checkState;
 1f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <checkState>
					lightShow = THREE;
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
					tempNum = tempNum>>2;
					tempNum += 0x80;
					++checkState;
					lightShow = FOUR;
				}
		break; 	
 202:	a3 c0       	rjmp	.+326    	; 0x34a <tick+0x27c>
					++tempNum;
					++checkState;
					lightShow = THREE;
				}
				
				else if (tempVal && !halo)
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 208:	88 23       	and	r24, r24
 20a:	09 f4       	brne	.+2      	; 0x20e <tick+0x140>
 20c:	9e c0       	rjmp	.+316    	; 0x34a <tick+0x27c>
 20e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <halo>
 212:	88 23       	and	r24, r24
 214:	09 f0       	breq	.+2      	; 0x218 <tick+0x14a>
 216:	99 c0       	rjmp	.+306    	; 0x34a <tick+0x27c>
				{
					tempNum = tempNum>>2;
 218:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 21c:	86 95       	lsr	r24
 21e:	86 95       	lsr	r24
 220:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					tempNum += 0x80;
 224:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 228:	80 58       	subi	r24, 0x80	; 128
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					++checkState;
 22e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <checkState>
					lightShow = FOUR;
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
				}
		break; 	
 23e:	85 c0       	rjmp	.+266    	; 0x34a <tick+0x27c>
			
		case ONE:
			if (tempVal)
 240:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 244:	88 23       	and	r24, r24
 246:	21 f0       	breq	.+8      	; 0x250 <tick+0x182>
			{
				lightShow = ONE;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			else
			{
				lightShow = INIT;
			}
			
		break;	
 24e:	82 c0       	rjmp	.+260    	; 0x354 <tick+0x286>
				lightShow = ONE;
			}
			
			else
			{
				lightShow = INIT;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
			
		break;	
 256:	7e c0       	rjmp	.+252    	; 0x354 <tick+0x286>
		
		case TWO:
			if (tempVal)
 258:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 25c:	88 23       	and	r24, r24
 25e:	21 f0       	breq	.+8      	; 0x268 <tick+0x19a>
			{
				
				lightShow = TWO;
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			else
			{
				lightShow = INIT;
			}
		
		break;
 266:	76 c0       	rjmp	.+236    	; 0x354 <tick+0x286>
				lightShow = TWO;
			}
		
			else
			{
				lightShow = INIT;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
		
		break;
 26e:	72 c0       	rjmp	.+228    	; 0x354 <tick+0x286>
			
		case THREE:
			if(tempVal && checkState != 4)
 270:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 274:	88 23       	and	r24, r24
 276:	41 f0       	breq	.+16     	; 0x288 <tick+0x1ba>
 278:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	21 f0       	breq	.+8      	; 0x288 <tick+0x1ba>
			{
				lightShow = THREE;
 280:	85 e0       	ldi	r24, 0x05	; 5
 282:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 286:	21 c0       	rjmp	.+66     	; 0x2ca <tick+0x1fc>
			}
			
			else if (!tempVal && checkState != 4)
 288:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 28c:	88 23       	and	r24, r24
 28e:	59 f4       	brne	.+22     	; 0x2a6 <tick+0x1d8>
 290:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	39 f0       	breq	.+14     	; 0x2a6 <tick+0x1d8>
			{
				halo = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <halo>
				lightShow = WAIT;
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 2a4:	12 c0       	rjmp	.+36     	; 0x2ca <tick+0x1fc>
			}
			
			else if(tempVal  && checkState == 4)
 2a6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 2aa:	88 23       	and	r24, r24
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <tick+0x1e2>
 2ae:	4f c0       	rjmp	.+158    	; 0x34e <tick+0x280>
 2b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 2b4:	84 30       	cpi	r24, 0x04	; 4
 2b6:	09 f0       	breq	.+2      	; 0x2ba <tick+0x1ec>
 2b8:	4a c0       	rjmp	.+148    	; 0x34e <tick+0x280>
			{
				halo = 0;
 2ba:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <halo>
				checkState = 0;
 2be:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <checkState>
				lightShow = INIT;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
		break;
 2c8:	42 c0       	rjmp	.+132    	; 0x34e <tick+0x280>
 2ca:	41 c0       	rjmp	.+130    	; 0x34e <tick+0x280>
			
		case FOUR:
			if(tempVal && checkState != 4)
 2cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 2d0:	88 23       	and	r24, r24
 2d2:	41 f0       	breq	.+16     	; 0x2e4 <tick+0x216>
 2d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 2d8:	84 30       	cpi	r24, 0x04	; 4
 2da:	21 f0       	breq	.+8      	; 0x2e4 <tick+0x216>
			{
				lightShow = FOUR;
 2dc:	86 e0       	ldi	r24, 0x06	; 6
 2de:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 2e2:	1e c0       	rjmp	.+60     	; 0x320 <tick+0x252>
			}
		
			else if (!tempVal && checkState != 4)
 2e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 2e8:	88 23       	and	r24, r24
 2ea:	51 f4       	brne	.+20     	; 0x300 <tick+0x232>
 2ec:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	31 f0       	breq	.+12     	; 0x300 <tick+0x232>
			{
				halo = 0;
 2f4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <halo>
				lightShow = WAIT;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
 2fe:	10 c0       	rjmp	.+32     	; 0x320 <tick+0x252>
			}
		
			else if(tempVal  && checkState == 4)
 300:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 304:	88 23       	and	r24, r24
 306:	29 f1       	breq	.+74     	; 0x352 <tick+0x284>
 308:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <checkState>
 30c:	84 30       	cpi	r24, 0x04	; 4
 30e:	09 f5       	brne	.+66     	; 0x352 <tick+0x284>
			{
				halo = 0;
 310:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <halo>
				checkState = 0;
 314:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <checkState>
				lightShow = INIT;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
		break;
 31e:	19 c0       	rjmp	.+50     	; 0x352 <tick+0x284>
 320:	18 c0       	rjmp	.+48     	; 0x352 <tick+0x284>
		
		case RESET:
			if (tempVal)
 322:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 326:	88 23       	and	r24, r24
 328:	39 f0       	breq	.+14     	; 0x338 <tick+0x26a>
			{
				tempNum = 0xFF;
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				lightShow = RESET;
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			
			else
			{
				lightShow = INIT;
			}
		break;
 336:	0e c0       	rjmp	.+28     	; 0x354 <tick+0x286>
				lightShow = RESET;
			}
			
			else
			{
				lightShow = INIT;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lightShow>
			}
		break;
 33e:	0a c0       	rjmp	.+20     	; 0x354 <tick+0x286>
		
		default:
			lightShow = START;
 340:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lightShow>
		break;
 344:	07 c0       	rjmp	.+14     	; 0x354 <tick+0x286>
			else if (countChk == 4)
			{
				
				lightShow = RESET;
			}
		break;
 346:	00 00       	nop
 348:	05 c0       	rjmp	.+10     	; 0x354 <tick+0x286>
					tempNum = tempNum>>2;
					tempNum += 0x80;
					++checkState;
					lightShow = FOUR;
				}
		break; 	
 34a:	00 00       	nop
 34c:	03 c0       	rjmp	.+6      	; 0x354 <tick+0x286>
			{
				halo = 0;
				checkState = 0;
				lightShow = INIT;
			}
		break;
 34e:	00 00       	nop
 350:	01 c0       	rjmp	.+2      	; 0x354 <tick+0x286>
			{
				halo = 0;
				checkState = 0;
				lightShow = INIT;
			}
		break;
 352:	00 00       	nop
		default:
			lightShow = START;
		break;
	}
	
	switch(lightShow) //Actions
 354:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <lightShow>
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	09 2e       	mov	r0, r25
 35e:	00 0c       	add	r0, r0
 360:	aa 0b       	sbc	r26, r26
 362:	bb 0b       	sbc	r27, r27
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	27 e0       	ldi	r18, 0x07	; 7
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	84 1b       	sub	r24, r20
 36e:	95 0b       	sbc	r25, r21
 370:	28 17       	cp	r18, r24
 372:	39 07       	cpc	r19, r25
 374:	08 f4       	brcc	.+2      	; 0x378 <tick+0x2aa>
 376:	3e c0       	rjmp	.+124    	; 0x3f4 <tick+0x326>
 378:	82 5b       	subi	r24, 0xB2	; 178
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	fc 01       	movw	r30, r24
 37e:	6c c0       	rjmp	.+216    	; 0x458 <__tablejump2__>
	{
		case START:
		PORTB = tempNum;
 380:	85 e2       	ldi	r24, 0x25	; 37
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
		break;
 38c:	33 c0       	rjmp	.+102    	; 0x3f4 <tick+0x326>
		case INIT:
		PORTB = tempNum;
 38e:	85 e2       	ldi	r24, 0x25	; 37
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 396:	fc 01       	movw	r30, r24
 398:	20 83       	st	Z, r18
		break;
 39a:	2c c0       	rjmp	.+88     	; 0x3f4 <tick+0x326>
		case WAIT:
		PORTB = tempNum;
 39c:	85 e2       	ldi	r24, 0x25	; 37
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18
		break;
 3a8:	25 c0       	rjmp	.+74     	; 0x3f4 <tick+0x326>
		case ONE:
		PORTB = tempNum;
 3aa:	85 e2       	ldi	r24, 0x25	; 37
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
		break;
 3b6:	1e c0       	rjmp	.+60     	; 0x3f4 <tick+0x326>
		case TWO:
		PORTB = tempNum;
 3b8:	85 e2       	ldi	r24, 0x25	; 37
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
		break;
 3c4:	17 c0       	rjmp	.+46     	; 0x3f4 <tick+0x326>
		case THREE:
		PORTB = tempNum;
 3c6:	85 e2       	ldi	r24, 0x25	; 37
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3ce:	fc 01       	movw	r30, r24
 3d0:	20 83       	st	Z, r18
		break;
 3d2:	10 c0       	rjmp	.+32     	; 0x3f4 <tick+0x326>
		case FOUR:
		PORTB = tempNum;
 3d4:	85 e2       	ldi	r24, 0x25	; 37
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3dc:	fc 01       	movw	r30, r24
 3de:	20 83       	st	Z, r18
		break;
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <tick+0x326>
		case RESET:
		countChk = 0;
 3e2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <countChk>
		PORTB = tempNum;
 3e6:	85 e2       	ldi	r24, 0x25	; 37
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
		break;
 3f2:	00 00       	nop
	}
}
 3f4:	00 00       	nop
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <main>:

int main(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	cd b7       	in	r28, 0x3d	; 61
 402:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0x00; PORTA = 0xFF;
 404:	81 e2       	ldi	r24, 0x21	; 33
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	10 82       	st	Z, r1
 40c:	82 e2       	ldi	r24, 0x22	; 34
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	fc 01       	movw	r30, r24
 414:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 416:	84 e2       	ldi	r24, 0x24	; 36
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18
 420:	85 e2       	ldi	r24, 0x25	; 37
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	fc 01       	movw	r30, r24
 426:	10 82       	st	Z, r1
	
	lightShow = START;
 428:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lightShow>
	
	PORTB = 0xFF;
 42c:	85 e2       	ldi	r24, 0x25	; 37
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
	
    while (1) 
    {
		tempVal = ~PINA & 0x01;
 436:	80 e2       	ldi	r24, 0x20	; 32
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	fc 01       	movw	r30, r24
 43c:	80 81       	ld	r24, Z
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	81 70       	andi	r24, 0x01	; 1
 444:	99 27       	eor	r25, r25
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	89 2b       	or	r24, r25
 44a:	09 f0       	breq	.+2      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	82 2f       	mov	r24, r18
 450:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempVal>
		tick();
 454:	3c de       	rcall	.-904    	; 0xce <tick>
    }
 456:	ef cf       	rjmp	.-34     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

00000458 <__tablejump2__>:
 458:	ee 0f       	add	r30, r30
 45a:	ff 1f       	adc	r31, r31
 45c:	00 24       	eor	r0, r0
 45e:	00 1c       	adc	r0, r0
 460:	0b be       	out	0x3b, r0	; 59
 462:	07 90       	elpm	r0, Z+
 464:	f6 91       	elpm	r31, Z
 466:	e0 2d       	mov	r30, r0
 468:	09 94       	ijmp

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
