
mandr024_lab7_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000003b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a86  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000453  00000000  00000000  00001773  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052f  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000099  00000000  00000000  000021bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	08 d1       	rcall	.+528    	; 0x2d4 <main>
  c4:	27 c1       	rjmp	.+590    	; 0x314 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
}
void TimerOff() {
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 100:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 104:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	
	_avr_timer_cntcurr--;
 122:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 126:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 12a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 12e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 13c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 140:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 144:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) {
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
}
void TimerOff() {
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 16e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 172:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 19c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 1a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <ThreeLEDS>:
}

void ThreeLEDS()
{
	switch(TL_STATES)
 1aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <TL_STATES>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <ThreeLEDS+0x1c>
 1b2:	18 f0       	brcs	.+6      	; 0x1ba <ThreeLEDS+0x10>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	e9 f0       	breq	.+58     	; 0x1f2 <ThreeLEDS+0x48>
 1b8:	31 c0       	rjmp	.+98     	; 0x21c <ThreeLEDS+0x72>
	{
		case TL_START:
		tempVal = 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempVal>
		TL_STATES = TL_INIT;
 1c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_STATES>
		break;
 1c4:	2e c0       	rjmp	.+92     	; 0x222 <ThreeLEDS+0x78>
		
		case TL_INIT:
		if(count < 3)
 1c6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	48 f4       	brcc	.+18     	; 0x1e0 <ThreeLEDS+0x36>
		{
			tempVal = tempVal<<1;
 1ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempVal>
 1d2:	88 0f       	add	r24, r24
 1d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempVal>
			TL_STATES = TL_LED_ON;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_STATES>
 1de:	27 c0       	rjmp	.+78     	; 0x22e <ThreeLEDS+0x84>
		}
		
		else
		{
			tempVal = 1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempVal>
			TL_STATES = TL_LED_ON;
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_STATES>
			count = 0;
 1ec:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count>
 1f0:	1e c0       	rjmp	.+60     	; 0x22e <ThreeLEDS+0x84>
		}
		break;
		
		case TL_LED_ON:
		if(count < 3)
 1f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	48 f4       	brcc	.+18     	; 0x20c <ThreeLEDS+0x62>
		{
			tempVal = tempVal<<1;
 1fa:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempVal>
 1fe:	88 0f       	add	r24, r24
 200:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempVal>
			TL_STATES = TL_INIT;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_STATES>
 20a:	0b c0       	rjmp	.+22     	; 0x222 <ThreeLEDS+0x78>
		}
		
		else
		{
			tempVal = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tempVal>
			TL_STATES = TL_INIT;
 212:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <TL_STATES>
			count = 0;
 216:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <count>
 21a:	03 c0       	rjmp	.+6      	; 0x222 <ThreeLEDS+0x78>
		}
		break;
		
		default:
		TL_STATES = TL_START;
 21c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_STATES>
		case TL_LED_ON:
		count++;
		break;
	}
	
}
 220:	08 95       	ret
	switch(TL_STATES)
	{
		case TL_START:
		break;
		case TL_INIT:
		count++;
 222:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count>
		break;
 22c:	08 95       	ret
		case TL_LED_ON:
		count++;
 22e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <count>
 232:	8f 5f       	subi	r24, 0xFF	; 255
 234:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <count>
 238:	08 95       	ret

0000023a <BlinkingLEDS>:
	
}

void BlinkingLEDS()
{
	switch(BL_STATES)
 23a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <BL_STATES>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	51 f0       	breq	.+20     	; 0x256 <BlinkingLEDS+0x1c>
 242:	18 f0       	brcs	.+6      	; 0x24a <BlinkingLEDS+0x10>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	69 f0       	breq	.+26     	; 0x262 <BlinkingLEDS+0x28>
 248:	13 c0       	rjmp	.+38     	; 0x270 <BlinkingLEDS+0x36>
	{
		case BL_START:
		blinkVal = 0;
 24a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkVal>
		BL_STATES = BL_INIT;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <BL_STATES>
		break;
 254:	08 95       	ret
		
		case BL_INIT:
		BL_STATES = BL_ON;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <BL_STATES>
		blinkVal = 0x00;
		break;
		case BL_INIT:
		break;
		case BL_ON:
		blinkVal = 0x00;
 25c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkVal>
		break;
 260:	08 95       	ret
		BL_STATES = BL_ON;
		
		break;
		
		case BL_ON:
		blinkVal = 0x08;
 262:	88 e0       	ldi	r24, 0x08	; 8
 264:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <blinkVal>
		BL_STATES = BL_INIT;
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <BL_STATES>
		break;
 26e:	08 95       	ret
		
		default:
		BL_STATES = BL_START;
 270:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <BL_STATES>
	}
	
	switch(BL_STATES)
	{
		case BL_START:
		blinkVal = 0x00;
 274:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkVal>
 278:	08 95       	ret

0000027a <AddLEDS>:
	
}

void AddLEDS()
{
	switch(AL_STATES)
 27a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <AL_STATES>
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	51 f0       	breq	.+20     	; 0x296 <AddLEDS+0x1c>
 282:	18 f0       	brcs	.+6      	; 0x28a <AddLEDS+0x10>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	99 f0       	breq	.+38     	; 0x2ae <AddLEDS+0x34>
 288:	1d c0       	rjmp	.+58     	; 0x2c4 <AddLEDS+0x4a>
	{
		case AL_START:
		addVal = 0x00;
 28a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <addVal>
		AL_STATES = AL_INIT;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <AL_STATES>
		break;
 294:	1b c0       	rjmp	.+54     	; 0x2cc <AddLEDS+0x52>
		
		case AL_INIT:
		addVal = blinkVal + tempVal;
 296:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blinkVal>
 29a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempVal>
 29e:	89 0f       	add	r24, r25
 2a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <addVal>
		AL_STATES = AL_ON;
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <AL_STATES>
		break;
		case AL_INIT:
		PORTB = addVal;
		break;
		case AL_ON:
		PORTB = addVal;
 2aa:	85 b9       	out	0x05, r24	; 5
		break;
 2ac:	08 95       	ret
		addVal = blinkVal + tempVal;
		AL_STATES = AL_ON;
		break;
		
		case AL_ON:
		addVal = blinkVal + tempVal;
 2ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <blinkVal>
 2b2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tempVal>
 2b6:	89 0f       	add	r24, r25
 2b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <addVal>
		AL_STATES = AL_INIT;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <AL_STATES>
		break;
 2c2:	04 c0       	rjmp	.+8      	; 0x2cc <AddLEDS+0x52>
		
		default:
		AL_STATES = AL_START;
 2c4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <AL_STATES>
	}
	
	switch(AL_STATES)
	{
		case AL_START:
		PORTB = 0x00;
 2c8:	15 b8       	out	0x05, r1	; 5
		case AL_ON:
		PORTB = addVal;
		break;
	}
	
}
 2ca:	08 95       	ret
	{
		case AL_START:
		PORTB = 0x00;
		break;
		case AL_INIT:
		PORTB = addVal;
 2cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <addVal>
 2d0:	85 b9       	out	0x05, r24	; 5
 2d2:	08 95       	ret

000002d4 <main>:
	
}

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	84 b9       	out	0x04, r24	; 4
 2d8:	15 b8       	out	0x05, r1	; 5
	//unsigned char i = 0x00;
	unsigned char TL_elapsedTime = 0x00;
	//const unsigned long timerPeriod = 50;
	
	TimerSet(50);
 2da:	62 e3       	ldi	r22, 0x32	; 50
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	52 df       	rcall	.-348    	; 0x188 <TimerSet>
	TimerOn();
 2e4:	f1 de       	rcall	.-542    	; 0xc8 <TimerOn>
 2e6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <TL_STATES>
	
	TL_STATES = TL_START;
 2ea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <BL_STATES>
	BL_STATES = BL_START;
 2ee:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <AL_STATES>
	AL_STATES = AL_START;
	
	while (1)
	{
		
		ThreeLEDS();
 2f2:	5b df       	rcall	.-330    	; 0x1aa <ThreeLEDS>

int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
	//unsigned char i = 0x00;
	unsigned char TL_elapsedTime = 0x00;
 2f4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		
		ThreeLEDS();
		if (TL_elapsedTime >= 150)
		{
			BlinkingLEDS();
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x28>
 2f8:	a0 df       	rcall	.-192    	; 0x23a <BlinkingLEDS>
			TL_elapsedTime = 0;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
		}
		AddLEDS();
 2fc:	be df       	rcall	.-132    	; 0x27a <AddLEDS>
 2fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		
		
		while(!TimerFlag);
 302:	88 23       	and	r24, r24
 304:	e1 f3       	breq	.-8      	; 0x2fe <main+0x2a>
		TimerFlag = 0;
 306:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TL_elapsedTime += 50;
 30a:	ce 5c       	subi	r28, 0xCE	; 206
	AL_STATES = AL_START;
	
	while (1)
	{
		
		ThreeLEDS();
 30c:	4e df       	rcall	.-356    	; 0x1aa <ThreeLEDS>
 30e:	c6 39       	cpi	r28, 0x96	; 150
		if (TL_elapsedTime >= 150)
 310:	a8 f3       	brcs	.-22     	; 0x2fc <main+0x28>
 312:	f2 cf       	rjmp	.-28     	; 0x2f8 <main+0x24>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
