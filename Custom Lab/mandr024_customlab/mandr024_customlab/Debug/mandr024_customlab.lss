
mandr024_customlab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000005ae  00000642  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  0080010c  0080010c  0000064e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9a  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  00001512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006eb  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000601  00000000  00000000  00002784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000605  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000338a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f8 c0       	rjmp	.+496    	; 0x226 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 33       	cpi	r26, 0x3D	; 61
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ea d1       	rcall	.+980    	; 0x498 <main>
  c4:	72 c2       	rjmp	.+1252   	; 0x5aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_init>:
        if(c==0){return b;}
        a = b;
b = c;
    }
    return 0;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	6d d0       	rcall	.+218    	; 0x1b0 <delay_ms>
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0d d0       	rcall	.+26     	; 0xf4 <LCD_WriteCommand>
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0b d0       	rcall	.+22     	; 0xf4 <LCD_WriteCommand>
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	09 d0       	rcall	.+18     	; 0xf4 <LCD_WriteCommand>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	07 d0       	rcall	.+14     	; 0xf4 <LCD_WriteCommand>
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	62 d0       	rcall	.+196    	; 0x1b0 <delay_ms>
  ec:	00 00       	nop
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <LCD_WriteCommand>:
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	82 e2       	ldi	r24, 0x22	; 34
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	22 e2       	ldi	r18, 0x22	; 34
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	2e 7f       	andi	r18, 0xFE	; 254
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	29 81       	ldd	r18, Y+1	; 0x01
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
 11c:	82 e2       	ldi	r24, 0x22	; 34
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	22 e2       	ldi	r18, 0x22	; 34
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	22 60       	ori	r18, 0x02	; 2
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	00 00       	nop
 130:	82 e2       	ldi	r24, 0x22	; 34
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	22 e2       	ldi	r18, 0x22	; 34
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	2d 7f       	andi	r18, 0xFD	; 253
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	34 d0       	rcall	.+104    	; 0x1b0 <delay_ms>
 148:	00 00       	nop
 14a:	0f 90       	pop	r0
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_WriteData>:
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	1f 92       	push	r1
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	82 e2       	ldi	r24, 0x22	; 34
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	22 e2       	ldi	r18, 0x22	; 34
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	21 60       	ori	r18, 0x01	; 1
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
 170:	8b e2       	ldi	r24, 0x2B	; 43
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
 17a:	82 e2       	ldi	r24, 0x22	; 34
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	22 e2       	ldi	r18, 0x22	; 34
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	22 60       	ori	r18, 0x02	; 2
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	00 00       	nop
 18e:	82 e2       	ldi	r24, 0x22	; 34
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	22 e2       	ldi	r18, 0x22	; 34
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	2d 7f       	andi	r18, 0xFD	; 253
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	05 d0       	rcall	.+10     	; 0x1b0 <delay_ms>
 1a6:	00 00       	nop
 1a8:	0f 90       	pop	r0
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <delay_ms>:
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <delay_ms+0x6>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <delay_ms+0x8>
 1b8:	00 d0       	rcall	.+0      	; 0x1ba <delay_ms+0xa>
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	9e 83       	std	Y+6, r25	; 0x06
 1c0:	8d 83       	std	Y+5, r24	; 0x05
 1c2:	1a 82       	std	Y+2, r1	; 0x02
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <delay_ms+0x3e>
 1c8:	1c 82       	std	Y+4, r1	; 0x04
 1ca:	1b 82       	std	Y+3, r1	; 0x03
 1cc:	06 c0       	rjmp	.+12     	; 0x1da <delay_ms+0x2a>
 1ce:	00 00       	nop
 1d0:	8b 81       	ldd	r24, Y+3	; 0x03
 1d2:	9c 81       	ldd	r25, Y+4	; 0x04
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	9c 83       	std	Y+4, r25	; 0x04
 1d8:	8b 83       	std	Y+3, r24	; 0x03
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	9c 81       	ldd	r25, Y+4	; 0x04
 1de:	87 30       	cpi	r24, 0x07	; 7
 1e0:	93 40       	sbci	r25, 0x03	; 3
 1e2:	ac f3       	brlt	.-22     	; 0x1ce <delay_ms+0x1e>
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	29 81       	ldd	r18, Y+1	; 0x01
 1f0:	3a 81       	ldd	r19, Y+2	; 0x02
 1f2:	8d 81       	ldd	r24, Y+5	; 0x05
 1f4:	9e 81       	ldd	r25, Y+6	; 0x06
 1f6:	28 17       	cp	r18, r24
 1f8:	39 07       	cpc	r19, r25
 1fa:	34 f3       	brlt	.-52     	; 0x1c8 <delay_ms+0x18>
 1fc:	00 00       	nop
 1fe:	26 96       	adiw	r28, 0x06	; 6
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <TimerISR>:
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <__vector_13>:
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 236:	0f 92       	push	r0
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 25c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 260:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 264:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	a1 09       	sbc	r26, r1
 26c:	b1 09       	sbc	r27, r1
 26e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 272:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 276:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 27a:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 27e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 282:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 286:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 28a:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 28e:	89 2b       	or	r24, r25
 290:	8a 2b       	or	r24, r26
 292:	8b 2b       	or	r24, r27
 294:	89 f4       	brne	.+34     	; 0x2b8 <__vector_13+0x92>
 296:	bc df       	rcall	.-136    	; 0x210 <TimerISR>
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 29c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2a0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2a4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2a8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 2ac:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 2b0:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 2b4:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 2b8:	00 00       	nop
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2dc:	0f 90       	pop	r0
 2de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2e2:	0f 90       	pop	r0
 2e4:	1f 90       	pop	r1
 2e6:	18 95       	reti

000002e8 <EEPROM_write>:
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <EEPROM_write+0x6>
 2ee:	1f 92       	push	r1
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	9a 83       	std	Y+2, r25	; 0x02
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	6b 83       	std	Y+3, r22	; 0x03
 2fa:	8f e3       	ldi	r24, 0x3F	; 63
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	2f e3       	ldi	r18, 0x3F	; 63
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	20 81       	ld	r18, Z
 306:	2f 70       	andi	r18, 0x0F	; 15
 308:	fc 01       	movw	r30, r24
 30a:	20 83       	st	Z, r18
 30c:	00 00       	nop
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	fc 01       	movw	r30, r24
 314:	80 81       	ld	r24, Z
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	82 70       	andi	r24, 0x02	; 2
 31c:	99 27       	eor	r25, r25
 31e:	89 2b       	or	r24, r25
 320:	b1 f7       	brne	.-20     	; 0x30e <EEPROM_write+0x26>
 322:	81 e4       	ldi	r24, 0x41	; 65
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	3a 81       	ldd	r19, Y+2	; 0x02
 32a:	fc 01       	movw	r30, r24
 32c:	31 83       	std	Z+1, r19	; 0x01
 32e:	20 83       	st	Z, r18
 330:	80 e4       	ldi	r24, 0x40	; 64
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	2b 81       	ldd	r18, Y+3	; 0x03
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18
 33a:	8f e3       	ldi	r24, 0x3F	; 63
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2f e3       	ldi	r18, 0x3F	; 63
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	24 60       	ori	r18, 0x04	; 4
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
 34c:	8f e3       	ldi	r24, 0x3F	; 63
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2f e3       	ldi	r18, 0x3F	; 63
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	20 81       	ld	r18, Z
 358:	22 60       	ori	r18, 0x02	; 2
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
 35e:	00 00       	nop
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <EEPROM_read>:
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <EEPROM_read+0x6>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	00 00       	nop
 37c:	8f e3       	ldi	r24, 0x3F	; 63
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	80 81       	ld	r24, Z
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	82 70       	andi	r24, 0x02	; 2
 38a:	99 27       	eor	r25, r25
 38c:	89 2b       	or	r24, r25
 38e:	b1 f7       	brne	.-20     	; 0x37c <EEPROM_read+0x10>
 390:	81 e4       	ldi	r24, 0x41	; 65
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	29 81       	ldd	r18, Y+1	; 0x01
 396:	3a 81       	ldd	r19, Y+2	; 0x02
 398:	fc 01       	movw	r30, r24
 39a:	31 83       	std	Z+1, r19	; 0x01
 39c:	20 83       	st	Z, r18
 39e:	8f e3       	ldi	r24, 0x3F	; 63
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	2f e3       	ldi	r18, 0x3F	; 63
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	21 60       	ori	r18, 0x01	; 1
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
 3b0:	80 e4       	ldi	r24, 0x40	; 64
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <tostring>:
	0x0A,
	0x00
};

void tostring(char str[], int num)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	2c 97       	sbiw	r28, 0x0c	; 12
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	9a 87       	std	Y+10, r25	; 0x0a
 3d8:	89 87       	std	Y+9, r24	; 0x09
 3da:	7c 87       	std	Y+12, r23	; 0x0c
 3dc:	6b 87       	std	Y+11, r22	; 0x0b
	int i, rem, len = 0, n;
 3de:	1c 82       	std	Y+4, r1	; 0x04
 3e0:	1b 82       	std	Y+3, r1	; 0x03
	n = num;
 3e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e6:	9e 83       	std	Y+6, r25	; 0x06
 3e8:	8d 83       	std	Y+5, r24	; 0x05
	
	while (n != 0)
 3ea:	0e c0       	rjmp	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		len++;
 3ec:	8b 81       	ldd	r24, Y+3	; 0x03
 3ee:	9c 81       	ldd	r25, Y+4	; 0x04
 3f0:	01 96       	adiw	r24, 0x01	; 1
 3f2:	9c 83       	std	Y+4, r25	; 0x04
 3f4:	8b 83       	std	Y+3, r24	; 0x03
		n /= 10;
 3f6:	8d 81       	ldd	r24, Y+5	; 0x05
 3f8:	9e 81       	ldd	r25, Y+6	; 0x06
 3fa:	2a e0       	ldi	r18, 0x0A	; 10
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	b9 01       	movw	r22, r18
 400:	ad d0       	rcall	.+346    	; 0x55c <__divmodhi4>
 402:	cb 01       	movw	r24, r22
 404:	9e 83       	std	Y+6, r25	; 0x06
 406:	8d 83       	std	Y+5, r24	; 0x05
void tostring(char str[], int num)
{
	int i, rem, len = 0, n;
	n = num;
	
	while (n != 0)
 408:	8d 81       	ldd	r24, Y+5	; 0x05
 40a:	9e 81       	ldd	r25, Y+6	; 0x06
 40c:	89 2b       	or	r24, r25
 40e:	71 f7       	brne	.-36     	; 0x3ec <tostring+0x2a>
	{
		len++;
		n /= 10;
	}

	for (i = 0; i < len; i++)
 410:	1a 82       	std	Y+2, r1	; 0x02
 412:	19 82       	std	Y+1, r1	; 0x01
 414:	28 c0       	rjmp	.+80     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		rem = num % 10;
 416:	8b 85       	ldd	r24, Y+11	; 0x0b
 418:	9c 85       	ldd	r25, Y+12	; 0x0c
 41a:	2a e0       	ldi	r18, 0x0A	; 10
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	9d d0       	rcall	.+314    	; 0x55c <__divmodhi4>
 422:	98 87       	std	Y+8, r25	; 0x08
 424:	8f 83       	std	Y+7, r24	; 0x07
		num = num / 10;
 426:	8b 85       	ldd	r24, Y+11	; 0x0b
 428:	9c 85       	ldd	r25, Y+12	; 0x0c
 42a:	2a e0       	ldi	r18, 0x0A	; 10
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	b9 01       	movw	r22, r18
 430:	95 d0       	rcall	.+298    	; 0x55c <__divmodhi4>
 432:	cb 01       	movw	r24, r22
 434:	9c 87       	std	Y+12, r25	; 0x0c
 436:	8b 87       	std	Y+11, r24	; 0x0b
		str[len - (i + 1)] = rem + '0';
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	9a 81       	ldd	r25, Y+2	; 0x02
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	2b 81       	ldd	r18, Y+3	; 0x03
 440:	3c 81       	ldd	r19, Y+4	; 0x04
 442:	a9 01       	movw	r20, r18
 444:	48 1b       	sub	r20, r24
 446:	59 0b       	sbc	r21, r25
 448:	ca 01       	movw	r24, r20
 44a:	9c 01       	movw	r18, r24
 44c:	89 85       	ldd	r24, Y+9	; 0x09
 44e:	9a 85       	ldd	r25, Y+10	; 0x0a
 450:	82 0f       	add	r24, r18
 452:	93 1f       	adc	r25, r19
 454:	2f 81       	ldd	r18, Y+7	; 0x07
 456:	20 5d       	subi	r18, 0xD0	; 208
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
	{
		len++;
		n /= 10;
	}

	for (i = 0; i < len; i++)
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	9a 83       	std	Y+2, r25	; 0x02
 464:	89 83       	std	Y+1, r24	; 0x01
 466:	29 81       	ldd	r18, Y+1	; 0x01
 468:	3a 81       	ldd	r19, Y+2	; 0x02
 46a:	8b 81       	ldd	r24, Y+3	; 0x03
 46c:	9c 81       	ldd	r25, Y+4	; 0x04
 46e:	28 17       	cp	r18, r24
 470:	39 07       	cpc	r19, r25
 472:	8c f2       	brlt	.-94     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}

	str[len] = '\0';
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	9c 81       	ldd	r25, Y+4	; 0x04
 478:	29 85       	ldd	r18, Y+9	; 0x09
 47a:	3a 85       	ldd	r19, Y+10	; 0x0a
 47c:	82 0f       	add	r24, r18
 47e:	93 1f       	adc	r25, r19
 480:	fc 01       	movw	r30, r24
 482:	10 82       	st	Z, r1
}
 484:	00 00       	nop
 486:	2c 96       	adiw	r28, 0x0c	; 12
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <main>:

int main(void)
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
 4a0:	64 97       	sbiw	r28, 0x14	; 20
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF; PORTD = 0x00; // LCD data lines
 4ac:	8a e2       	ldi	r24, 0x2A	; 42
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	2f ef       	ldi	r18, 0xFF	; 255
 4b2:	fc 01       	movw	r30, r24
 4b4:	20 83       	st	Z, r18
 4b6:	8b e2       	ldi	r24, 0x2B	; 43
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	10 82       	st	Z, r1
	DDRA = 0xFF; PORTA = 0x00; // LCD control lines
 4be:	81 e2       	ldi	r24, 0x21	; 33
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	82 e2       	ldi	r24, 0x22	; 34
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	10 82       	st	Z, r1
    /* Replace with your application code */
	char stringTemp[3];
	unsigned char position = 0x00;
 4d0:	19 82       	std	Y+1, r1	; 0x01
	
	unsigned long int tmpGCD = 1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a0 e0       	ldi	r26, 0x00	; 0
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	8a 83       	std	Y+2, r24	; 0x02
 4dc:	9b 83       	std	Y+3, r25	; 0x03
 4de:	ac 83       	std	Y+4, r26	; 0x04
 4e0:	bd 83       	std	Y+5, r27	; 0x05
	
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4};
 4e2:	88 e0       	ldi	r24, 0x08	; 8
 4e4:	e4 e0       	ldi	r30, 0x04	; 4
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	de 01       	movw	r26, r28
 4ea:	1d 96       	adiw	r26, 0x0d	; 13
 4ec:	01 90       	ld	r0, Z+
 4ee:	0d 92       	st	X+, r0
 4f0:	8a 95       	dec	r24
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <main+0x54>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
 4f4:	84 e0       	ldi	r24, 0x04	; 4
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9f 83       	std	Y+7, r25	; 0x07
 4fa:	8e 83       	std	Y+6, r24	; 0x06
// 	task1.period = SMTick1_period;//Task Period.
// 	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
// 	task1.TickFct = &SMTick1;//Function pointer for the tick.

	unsigned short i;
	LCD_init();
 4fc:	e5 dd       	rcall	.-1078   	; 0xc8 <LCD_init>
	
	EEPROM_write(0x00, 0x47);
 4fe:	67 e4       	ldi	r22, 0x47	; 71
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	f1 de       	rcall	.-542    	; 0x2e8 <EEPROM_write>
	LCD_WriteData(EEPROM_read(0x0000));
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	30 df       	rcall	.-416    	; 0x36c <EEPROM_read>
 50c:	22 de       	rcall	.-956    	; 0x152 <LCD_WriteData>
	
	LCD_WriteData(EEPROM_read(0x0001));
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	2c df       	rcall	.-424    	; 0x36c <EEPROM_read>
 514:	1e de       	rcall	.-964    	; 0x152 <LCD_WriteData>
	LCD_WriteData(EEPROM_read(0x0002));
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	28 df       	rcall	.-432    	; 0x36c <EEPROM_read>
 51c:	1a de       	rcall	.-972    	; 0x152 <LCD_WriteData>
 51e:	83 e0       	ldi	r24, 0x03	; 3
	
	int tempVal = (int)EEPROM_read(0x03);
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	24 df       	rcall	.-440    	; 0x36c <EEPROM_read>
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	99 87       	std	Y+9, r25	; 0x09
 52a:	88 87       	std	Y+8, r24	; 0x08
	
	tostring(stringTemp,tempVal);
 52c:	28 85       	ldd	r18, Y+8	; 0x08
 52e:	39 85       	ldd	r19, Y+9	; 0x09
 530:	ce 01       	movw	r24, r28
 532:	0a 96       	adiw	r24, 0x0a	; 10
 534:	b9 01       	movw	r22, r18
	
	LCD_WriteData(stringTemp[0]);
 536:	45 df       	rcall	.-374    	; 0x3c2 <tostring>
 538:	8a 85       	ldd	r24, Y+10	; 0x0a
 53a:	0b de       	rcall	.-1002   	; 0x152 <LCD_WriteData>
	LCD_WriteData(stringTemp[1]);
 53c:	8b 85       	ldd	r24, Y+11	; 0x0b
 53e:	09 de       	rcall	.-1006   	; 0x152 <LCD_WriteData>
 540:	8c 85       	ldd	r24, Y+12	; 0x0c
	LCD_WriteData(stringTemp[2]);
 542:	07 de       	rcall	.-1010   	; 0x152 <LCD_WriteData>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	90 e0       	ldi	r25, 0x00	; 0
		
	LCD_WriteData(EEPROM_read(0x00FF));
 548:	11 df       	rcall	.-478    	; 0x36c <EEPROM_read>
 54a:	03 de       	rcall	.-1018   	; 0x152 <LCD_WriteData>
 54c:	00 00       	nop
 54e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 552:	88 23       	and	r24, r24
    while (1) 
    {
		
		
		while(!TimerFlag);
 554:	e1 f3       	breq	.-8      	; 0x54e <main+0xb6>
 556:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 55a:	f8 cf       	rjmp	.-16     	; 0x54c <main+0xb4>

0000055c <__divmodhi4>:
 55c:	97 fb       	bst	r25, 7
		TimerFlag = 0;
 55e:	07 2e       	mov	r0, r23
 560:	16 f4       	brtc	.+4      	; 0x566 <__divmodhi4+0xa>
    }
 562:	00 94       	com	r0
 564:	06 d0       	rcall	.+12     	; 0x572 <__divmodhi4_neg1>
 566:	77 fd       	sbrc	r23, 7
 568:	08 d0       	rcall	.+16     	; 0x57a <__divmodhi4_neg2>
 56a:	0b d0       	rcall	.+22     	; 0x582 <__udivmodhi4>
 56c:	07 fc       	sbrc	r0, 7
 56e:	05 d0       	rcall	.+10     	; 0x57a <__divmodhi4_neg2>
 570:	3e f4       	brtc	.+14     	; 0x580 <__divmodhi4_exit>

00000572 <__divmodhi4_neg1>:
 572:	90 95       	com	r25
 574:	81 95       	neg	r24
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	08 95       	ret

0000057a <__divmodhi4_neg2>:
 57a:	70 95       	com	r23
 57c:	61 95       	neg	r22
 57e:	7f 4f       	sbci	r23, 0xFF	; 255

00000580 <__divmodhi4_exit>:
 580:	08 95       	ret

00000582 <__udivmodhi4>:
 582:	aa 1b       	sub	r26, r26
 584:	bb 1b       	sub	r27, r27
 586:	51 e1       	ldi	r21, 0x11	; 17
 588:	07 c0       	rjmp	.+14     	; 0x598 <__udivmodhi4_ep>

0000058a <__udivmodhi4_loop>:
 58a:	aa 1f       	adc	r26, r26
 58c:	bb 1f       	adc	r27, r27
 58e:	a6 17       	cp	r26, r22
 590:	b7 07       	cpc	r27, r23
 592:	10 f0       	brcs	.+4      	; 0x598 <__udivmodhi4_ep>
 594:	a6 1b       	sub	r26, r22
 596:	b7 0b       	sbc	r27, r23

00000598 <__udivmodhi4_ep>:
 598:	88 1f       	adc	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	5a 95       	dec	r21
 59e:	a9 f7       	brne	.-22     	; 0x58a <__udivmodhi4_loop>
 5a0:	80 95       	com	r24
 5a2:	90 95       	com	r25
 5a4:	bc 01       	movw	r22, r24
 5a6:	cd 01       	movw	r24, r26
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
