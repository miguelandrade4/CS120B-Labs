
mandr024_customlab_EEPROMtest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00001bc8  00001c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008001e0  008001e0  00001d3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001419  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  000032dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f6  00000000  00000000  00003c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005510  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b86  00000000  00000000  00005968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008d6  00000000  00000000  000064ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00006dc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
       6:	00 00       	nop
       8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
       a:	00 00       	nop
       c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	e6 c1       	rjmp	.+972    	; 0x402 <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	be 03       	fmulsu	r19, r22
      8e:	c2 03       	fmuls	r20, r18
      90:	e2 03       	fmuls	r22, r18
      92:	e6 03       	fmuls	r22, r22
      94:	02 04       	cpc	r0, r2
      96:	06 04       	cpc	r0, r6
      98:	0a 04       	cpc	r0, r10
      9a:	1e 04       	cpc	r1, r14
      9c:	d4 04       	cpc	r13, r4
      9e:	d4 04       	cpc	r13, r4
      a0:	a0 04       	cpc	r10, r0
      a2:	d4 04       	cpc	r13, r4
      a4:	ba 04       	cpc	r11, r10
      a6:	c7 04       	cpc	r12, r7
      a8:	d4 04       	cpc	r13, r4
      aa:	d4 04       	cpc	r13, r4

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 ec       	ldi	r30, 0xC8	; 200
      c0:	fb e1       	ldi	r31, 0x1B	; 27
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 3e       	cpi	r26, 0xE0	; 224
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	22 e0       	ldi	r18, 0x02	; 2
      d4:	a0 ee       	ldi	r26, 0xE0	; 224
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a8 30       	cpi	r26, 0x08	; 8
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 c3 0b 	call	0x1786	; 0x1786 <main>
      e6:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <LCD_ClearScreen>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	1a d0       	rcall	.+52     	; 0x12c <LCD_WriteCommand>
      f8:	00 00       	nop
      fa:	df 91       	pop	r29
      fc:	cf 91       	pop	r28
      fe:	08 95       	ret

00000100 <LCD_init>:
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	84 e6       	ldi	r24, 0x64	; 100
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	da d0       	rcall	.+436    	; 0x2c2 <delay_ms>
     10e:	88 e3       	ldi	r24, 0x38	; 56
     110:	0d d0       	rcall	.+26     	; 0x12c <LCD_WriteCommand>
     112:	86 e0       	ldi	r24, 0x06	; 6
     114:	0b d0       	rcall	.+22     	; 0x12c <LCD_WriteCommand>
     116:	8f e0       	ldi	r24, 0x0F	; 15
     118:	09 d0       	rcall	.+18     	; 0x12c <LCD_WriteCommand>
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	07 d0       	rcall	.+14     	; 0x12c <LCD_WriteCommand>
     11e:	8a e0       	ldi	r24, 0x0A	; 10
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	cf d0       	rcall	.+414    	; 0x2c2 <delay_ms>
     124:	00 00       	nop
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	08 95       	ret

0000012c <LCD_WriteCommand>:
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	1f 92       	push	r1
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	89 83       	std	Y+1, r24	; 0x01
     138:	82 e2       	ldi	r24, 0x22	; 34
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	22 e2       	ldi	r18, 0x22	; 34
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	f9 01       	movw	r30, r18
     142:	20 81       	ld	r18, Z
     144:	2e 7f       	andi	r18, 0xFE	; 254
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
     14a:	8b e2       	ldi	r24, 0x2B	; 43
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	29 81       	ldd	r18, Y+1	; 0x01
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
     154:	82 e2       	ldi	r24, 0x22	; 34
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	22 e2       	ldi	r18, 0x22	; 34
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	f9 01       	movw	r30, r18
     15e:	20 81       	ld	r18, Z
     160:	22 60       	ori	r18, 0x02	; 2
     162:	fc 01       	movw	r30, r24
     164:	20 83       	st	Z, r18
     166:	00 00       	nop
     168:	82 e2       	ldi	r24, 0x22	; 34
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	22 e2       	ldi	r18, 0x22	; 34
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	f9 01       	movw	r30, r18
     172:	20 81       	ld	r18, Z
     174:	2d 7f       	andi	r18, 0xFD	; 253
     176:	fc 01       	movw	r30, r24
     178:	20 83       	st	Z, r18
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	a1 d0       	rcall	.+322    	; 0x2c2 <delay_ms>
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <LCD_WriteData>:
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
     196:	82 e2       	ldi	r24, 0x22	; 34
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	22 e2       	ldi	r18, 0x22	; 34
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	f9 01       	movw	r30, r18
     1a0:	20 81       	ld	r18, Z
     1a2:	21 60       	ori	r18, 0x01	; 1
     1a4:	fc 01       	movw	r30, r24
     1a6:	20 83       	st	Z, r18
     1a8:	8b e2       	ldi	r24, 0x2B	; 43
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	29 81       	ldd	r18, Y+1	; 0x01
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
     1b2:	82 e2       	ldi	r24, 0x22	; 34
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	22 e2       	ldi	r18, 0x22	; 34
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	22 60       	ori	r18, 0x02	; 2
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
     1c4:	00 00       	nop
     1c6:	82 e2       	ldi	r24, 0x22	; 34
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	22 e2       	ldi	r18, 0x22	; 34
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	f9 01       	movw	r30, r18
     1d0:	20 81       	ld	r18, Z
     1d2:	2d 7f       	andi	r18, 0xFD	; 253
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	72 d0       	rcall	.+228    	; 0x2c2 <delay_ms>
     1de:	00 00       	nop
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <LCD_DisplayString>:
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <LCD_DisplayString+0x6>
     1ee:	00 d0       	rcall	.+0      	; 0x1f0 <LCD_DisplayString+0x8>
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	8a 83       	std	Y+2, r24	; 0x02
     1f6:	7c 83       	std	Y+4, r23	; 0x04
     1f8:	6b 83       	std	Y+3, r22	; 0x03
     1fa:	78 df       	rcall	.-272    	; 0xec <LCD_ClearScreen>
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	0f c0       	rjmp	.+30     	; 0x220 <LCD_DisplayString+0x38>
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	98 0f       	add	r25, r24
     208:	99 83       	std	Y+1, r25	; 0x01
     20a:	18 d0       	rcall	.+48     	; 0x23c <LCD_Cursor>
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	9c 81       	ldd	r25, Y+4	; 0x04
     210:	9c 01       	movw	r18, r24
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
     216:	3c 83       	std	Y+4, r19	; 0x04
     218:	2b 83       	std	Y+3, r18	; 0x03
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	b5 df       	rcall	.-150    	; 0x18a <LCD_WriteData>
     220:	8b 81       	ldd	r24, Y+3	; 0x03
     222:	9c 81       	ldd	r25, Y+4	; 0x04
     224:	fc 01       	movw	r30, r24
     226:	80 81       	ld	r24, Z
     228:	88 23       	and	r24, r24
     22a:	59 f7       	brne	.-42     	; 0x202 <LCD_DisplayString+0x1a>
     22c:	00 00       	nop
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <LCD_Cursor>:
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	1f 92       	push	r1
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	81 31       	cpi	r24, 0x11	; 17
     24c:	20 f4       	brcc	.+8      	; 0x256 <LCD_Cursor+0x1a>
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	81 58       	subi	r24, 0x81	; 129
     252:	6c df       	rcall	.-296    	; 0x12c <LCD_WriteCommand>
     254:	03 c0       	rjmp	.+6      	; 0x25c <LCD_Cursor+0x20>
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	81 55       	subi	r24, 0x51	; 81
     25a:	68 df       	rcall	.-304    	; 0x12c <LCD_WriteCommand>
     25c:	00 00       	nop
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <LCD_CustomChar>:
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	00 d0       	rcall	.+0      	; 0x26c <LCD_CustomChar+0x6>
     26c:	00 d0       	rcall	.+0      	; 0x26e <LCD_CustomChar+0x8>
     26e:	cd b7       	in	r28, 0x3d	; 61
     270:	de b7       	in	r29, 0x3e	; 62
     272:	8a 83       	std	Y+2, r24	; 0x02
     274:	7c 83       	std	Y+4, r23	; 0x04
     276:	6b 83       	std	Y+3, r22	; 0x03
     278:	8a 81       	ldd	r24, Y+2	; 0x02
     27a:	88 30       	cpi	r24, 0x08	; 8
     27c:	d0 f4       	brcc	.+52     	; 0x2b2 <LCD_CustomChar+0x4c>
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	08 96       	adiw	r24, 0x08	; 8
     286:	88 0f       	add	r24, r24
     288:	88 0f       	add	r24, r24
     28a:	88 0f       	add	r24, r24
     28c:	4f df       	rcall	.-354    	; 0x12c <LCD_WriteCommand>
     28e:	19 82       	std	Y+1, r1	; 0x01
     290:	0d c0       	rjmp	.+26     	; 0x2ac <LCD_CustomChar+0x46>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 2f       	mov	r24, r24
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	2b 81       	ldd	r18, Y+3	; 0x03
     29a:	3c 81       	ldd	r19, Y+4	; 0x04
     29c:	82 0f       	add	r24, r18
     29e:	93 1f       	adc	r25, r19
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	72 df       	rcall	.-284    	; 0x18a <LCD_WriteData>
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	8f 5f       	subi	r24, 0xFF	; 255
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	88 30       	cpi	r24, 0x08	; 8
     2b0:	80 f3       	brcs	.-32     	; 0x292 <LCD_CustomChar+0x2c>
     2b2:	00 00       	nop
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <delay_ms>:
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <delay_ms+0x6>
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <delay_ms+0x8>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <delay_ms+0xa>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	9e 83       	std	Y+6, r25	; 0x06
     2d2:	8d 83       	std	Y+5, r24	; 0x05
     2d4:	1a 82       	std	Y+2, r1	; 0x02
     2d6:	19 82       	std	Y+1, r1	; 0x01
     2d8:	13 c0       	rjmp	.+38     	; 0x300 <delay_ms+0x3e>
     2da:	1c 82       	std	Y+4, r1	; 0x04
     2dc:	1b 82       	std	Y+3, r1	; 0x03
     2de:	06 c0       	rjmp	.+12     	; 0x2ec <delay_ms+0x2a>
     2e0:	00 00       	nop
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	9c 81       	ldd	r25, Y+4	; 0x04
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	9c 83       	std	Y+4, r25	; 0x04
     2ea:	8b 83       	std	Y+3, r24	; 0x03
     2ec:	8b 81       	ldd	r24, Y+3	; 0x03
     2ee:	9c 81       	ldd	r25, Y+4	; 0x04
     2f0:	87 30       	cpi	r24, 0x07	; 7
     2f2:	93 40       	sbci	r25, 0x03	; 3
     2f4:	ac f3       	brlt	.-22     	; 0x2e0 <delay_ms+0x1e>
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	9a 83       	std	Y+2, r25	; 0x02
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	3a 81       	ldd	r19, Y+2	; 0x02
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	9e 81       	ldd	r25, Y+6	; 0x06
     308:	28 17       	cp	r18, r24
     30a:	39 07       	cpc	r19, r25
     30c:	34 f3       	brlt	.-52     	; 0x2da <delay_ms+0x18>
     30e:	00 00       	nop
     310:	26 96       	adiw	r28, 0x06	; 6
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <TimerSet>:
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	00 d0       	rcall	.+0      	; 0x328 <TimerSet+0x6>
     328:	00 d0       	rcall	.+0      	; 0x32a <TimerSet+0x8>
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	69 83       	std	Y+1, r22	; 0x01
     330:	7a 83       	std	Y+2, r23	; 0x02
     332:	8b 83       	std	Y+3, r24	; 0x03
     334:	9c 83       	std	Y+4, r25	; 0x04
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
     342:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
     346:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
     34a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
     34e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     352:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     356:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     35a:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     35e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <_avr_timer_cntcurr>
     362:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     366:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     36a:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     36e:	00 00       	nop
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <TimerOn>:
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	81 e8       	ldi	r24, 0x81	; 129
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2b e0       	ldi	r18, 0x0B	; 11
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18
     390:	88 e8       	ldi	r24, 0x88	; 136
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	2d e7       	ldi	r18, 0x7D	; 125
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	31 83       	std	Z+1, r19	; 0x01
     39c:	20 83       	st	Z, r18
     39e:	8f e6       	ldi	r24, 0x6F	; 111
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	22 e0       	ldi	r18, 0x02	; 2
     3a4:	fc 01       	movw	r30, r24
     3a6:	20 83       	st	Z, r18
     3a8:	84 e8       	ldi	r24, 0x84	; 132
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	11 82       	std	Z+1, r1	; 0x01
     3b0:	10 82       	st	Z, r1
     3b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     3b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     3ba:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     3be:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     3c2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <_avr_timer_cntcurr>
     3c6:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     3ca:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     3ce:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     3d2:	8f e5       	ldi	r24, 0x5F	; 95
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	2f e5       	ldi	r18, 0x5F	; 95
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	20 68       	ori	r18, 0x80	; 128
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
     3e4:	00 00       	nop
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <TimerISR>:
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
     3fa:	00 00       	nop
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <__vector_13>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     412:	0f 92       	push	r0
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <_avr_timer_cntcurr>
     438:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     43c:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     440:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	a1 09       	sbc	r26, r1
     448:	b1 09       	sbc	r27, r1
     44a:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <_avr_timer_cntcurr>
     44e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     452:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     456:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     45a:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <_avr_timer_cntcurr>
     45e:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     462:	a0 91 e3 01 	lds	r26, 0x01E3	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     466:	b0 91 e4 01 	lds	r27, 0x01E4	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     46a:	89 2b       	or	r24, r25
     46c:	8a 2b       	or	r24, r26
     46e:	8b 2b       	or	r24, r27
     470:	89 f4       	brne	.+34     	; 0x494 <__vector_13+0x92>
     472:	bc df       	rcall	.-136    	; 0x3ec <TimerISR>
     474:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     478:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     47c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     480:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     484:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <_avr_timer_cntcurr>
     488:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <_avr_timer_cntcurr+0x1>
     48c:	a0 93 e3 01 	sts	0x01E3, r26	; 0x8001e3 <_avr_timer_cntcurr+0x2>
     490:	b0 93 e4 01 	sts	0x01E4, r27	; 0x8001e4 <_avr_timer_cntcurr+0x3>
     494:	00 00       	nop
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	ff 91       	pop	r31
     49c:	ef 91       	pop	r30
     49e:	bf 91       	pop	r27
     4a0:	af 91       	pop	r26
     4a2:	9f 91       	pop	r25
     4a4:	8f 91       	pop	r24
     4a6:	7f 91       	pop	r23
     4a8:	6f 91       	pop	r22
     4aa:	5f 91       	pop	r21
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     4b8:	0f 90       	pop	r0
     4ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <EEPROM_write>:
int playerPoints = 0x00;
unsigned char winFlag = 0x00;
	

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <EEPROM_write+0x6>
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     4d6:	00 00       	nop
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	80 81       	ld	r24, Z
     4e0:	88 2f       	mov	r24, r24
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	82 70       	andi	r24, 0x02	; 2
     4e6:	99 27       	eor	r25, r25
     4e8:	89 2b       	or	r24, r25
     4ea:	b1 f7       	brne	.-20     	; 0x4d8 <EEPROM_write+0x14>
	;
	/* Set up address and Data Registers */
	EEAR = uiAddress;
     4ec:	81 e4       	ldi	r24, 0x41	; 65
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	29 81       	ldd	r18, Y+1	; 0x01
     4f2:	3a 81       	ldd	r19, Y+2	; 0x02
     4f4:	fc 01       	movw	r30, r24
     4f6:	31 83       	std	Z+1, r19	; 0x01
     4f8:	20 83       	st	Z, r18
	EEDR = ucData;
     4fa:	80 e4       	ldi	r24, 0x40	; 64
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	2b 81       	ldd	r18, Y+3	; 0x03
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
	/* Write logical one to EEMPE */
	EECR |= (1<<EEMPE);
     504:	8f e3       	ldi	r24, 0x3F	; 63
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	2f e3       	ldi	r18, 0x3F	; 63
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	f9 01       	movw	r30, r18
     50e:	20 81       	ld	r18, Z
     510:	24 60       	ori	r18, 0x04	; 4
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
	/* Start eeprom write by setting EEPE */
	EECR |= (1<<EEPE);
     516:	8f e3       	ldi	r24, 0x3F	; 63
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2f e3       	ldi	r18, 0x3F	; 63
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	f9 01       	movw	r30, r18
     520:	20 81       	ld	r18, Z
     522:	22 60       	ori	r18, 0x02	; 2
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
}
     528:	00 00       	nop
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	00 d0       	rcall	.+0      	; 0x53c <EEPROM_read+0x6>
     53c:	cd b7       	in	r28, 0x3d	; 61
     53e:	de b7       	in	r29, 0x3e	; 62
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
     544:	00 00       	nop
     546:	8f e3       	ldi	r24, 0x3F	; 63
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	82 70       	andi	r24, 0x02	; 2
     554:	99 27       	eor	r25, r25
     556:	89 2b       	or	r24, r25
     558:	b1 f7       	brne	.-20     	; 0x546 <EEPROM_read+0x10>
	;
	/* Set up address register */
	EEAR = uiAddress;
     55a:	81 e4       	ldi	r24, 0x41	; 65
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	29 81       	ldd	r18, Y+1	; 0x01
     560:	3a 81       	ldd	r19, Y+2	; 0x02
     562:	fc 01       	movw	r30, r24
     564:	31 83       	std	Z+1, r19	; 0x01
     566:	20 83       	st	Z, r18
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     568:	8f e3       	ldi	r24, 0x3F	; 63
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	2f e3       	ldi	r18, 0x3F	; 63
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	21 60       	ori	r18, 0x01	; 1
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	/* Return data from Data Register */
	return EEDR;
     57a:	80 e4       	ldi	r24, 0x40	; 64
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	fc 01       	movw	r30, r24
     580:	80 81       	ld	r24, Z
}
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <tostring>:

void tostring(char str[], int num)
{
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	2c 97       	sbiw	r28, 0x0c	; 12
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	9a 87       	std	Y+10, r25	; 0x0a
     5a2:	89 87       	std	Y+9, r24	; 0x09
     5a4:	7c 87       	std	Y+12, r23	; 0x0c
     5a6:	6b 87       	std	Y+11, r22	; 0x0b
	int i, rem, len = 0, n;
     5a8:	1c 82       	std	Y+4, r1	; 0x04
     5aa:	1b 82       	std	Y+3, r1	; 0x03
	n = num;
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	9e 83       	std	Y+6, r25	; 0x06
     5b2:	8d 83       	std	Y+5, r24	; 0x05
	
	while (n != 0)
     5b4:	0f c0       	rjmp	.+30     	; 0x5d4 <tostring+0x48>
	{
		len++;
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
		n /= 10;
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
     5c4:	2a e0       	ldi	r18, 0x0A	; 10
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	b9 01       	movw	r22, r18
     5ca:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__divmodhi4>
     5ce:	cb 01       	movw	r24, r22
     5d0:	9e 83       	std	Y+6, r25	; 0x06
     5d2:	8d 83       	std	Y+5, r24	; 0x05
void tostring(char str[], int num)
{
	int i, rem, len = 0, n;
	n = num;
	
	while (n != 0)
     5d4:	8d 81       	ldd	r24, Y+5	; 0x05
     5d6:	9e 81       	ldd	r25, Y+6	; 0x06
     5d8:	89 2b       	or	r24, r25
     5da:	69 f7       	brne	.-38     	; 0x5b6 <tostring+0x2a>
	{
		len++;
		n /= 10;
	}

	for (i = 0; i < len; i++)
     5dc:	1a 82       	std	Y+2, r1	; 0x02
     5de:	19 82       	std	Y+1, r1	; 0x01
     5e0:	2a c0       	rjmp	.+84     	; 0x636 <tostring+0xaa>
	{
		rem = num % 10;
     5e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5e6:	2a e0       	ldi	r18, 0x0A	; 10
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	b9 01       	movw	r22, r18
     5ec:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__divmodhi4>
     5f0:	98 87       	std	Y+8, r25	; 0x08
     5f2:	8f 83       	std	Y+7, r24	; 0x07
		num = num / 10;
     5f4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5f6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5f8:	2a e0       	ldi	r18, 0x0A	; 10
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	b9 01       	movw	r22, r18
     5fe:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__divmodhi4>
     602:	cb 01       	movw	r24, r22
     604:	9c 87       	std	Y+12, r25	; 0x0c
     606:	8b 87       	std	Y+11, r24	; 0x0b
		str[len - (i + 1)] = rem + '0';
     608:	89 81       	ldd	r24, Y+1	; 0x01
     60a:	9a 81       	ldd	r25, Y+2	; 0x02
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	2b 81       	ldd	r18, Y+3	; 0x03
     610:	3c 81       	ldd	r19, Y+4	; 0x04
     612:	a9 01       	movw	r20, r18
     614:	48 1b       	sub	r20, r24
     616:	59 0b       	sbc	r21, r25
     618:	ca 01       	movw	r24, r20
     61a:	9c 01       	movw	r18, r24
     61c:	89 85       	ldd	r24, Y+9	; 0x09
     61e:	9a 85       	ldd	r25, Y+10	; 0x0a
     620:	82 0f       	add	r24, r18
     622:	93 1f       	adc	r25, r19
     624:	2f 81       	ldd	r18, Y+7	; 0x07
     626:	20 5d       	subi	r18, 0xD0	; 208
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
	{
		len++;
		n /= 10;
	}

	for (i = 0; i < len; i++)
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	29 81       	ldd	r18, Y+1	; 0x01
     638:	3a 81       	ldd	r19, Y+2	; 0x02
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	28 17       	cp	r18, r24
     640:	39 07       	cpc	r19, r25
     642:	7c f2       	brlt	.-98     	; 0x5e2 <tostring+0x56>
		rem = num % 10;
		num = num / 10;
		str[len - (i + 1)] = rem + '0';
	}

	str[len] = '\0';
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	9c 81       	ldd	r25, Y+4	; 0x04
     648:	29 85       	ldd	r18, Y+9	; 0x09
     64a:	3a 85       	ldd	r19, Y+10	; 0x0a
     64c:	82 0f       	add	r24, r18
     64e:	93 1f       	adc	r25, r19
     650:	fc 01       	movw	r30, r24
     652:	10 82       	st	Z, r1
}
     654:	00 00       	nop
     656:	2c 96       	adiw	r28, 0x0c	; 12
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <START_TEST>:
};

enum START_SM{START_START,START_INIT, START_DISPLAY, START_PRESS} START_STATE;
	
void START_TEST()
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
	switch(START_STATE)
     670:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <START_STATE>
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	91 05       	cpc	r25, r1
     67c:	81 f0       	breq	.+32     	; 0x69e <START_TEST+0x36>
     67e:	82 30       	cpi	r24, 0x02	; 2
     680:	91 05       	cpc	r25, r1
     682:	1c f4       	brge	.+6      	; 0x68a <START_TEST+0x22>
     684:	89 2b       	or	r24, r25
     686:	39 f0       	breq	.+14     	; 0x696 <START_TEST+0x2e>
     688:	39 c0       	rjmp	.+114    	; 0x6fc <START_TEST+0x94>
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	91 05       	cpc	r25, r1
     68e:	b9 f0       	breq	.+46     	; 0x6be <START_TEST+0x56>
     690:	03 97       	sbiw	r24, 0x03	; 3
     692:	81 f1       	breq	.+96     	; 0x6f4 <START_TEST+0x8c>
     694:	33 c0       	rjmp	.+102    	; 0x6fc <START_TEST+0x94>
	{
		case START_START:
			START_STATE = START_INIT;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
		break;
     69c:	33 c0       	rjmp	.+102    	; 0x704 <START_TEST+0x9c>
		
		case START_INIT:
			if (start)
     69e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <start>
     6a2:	88 23       	and	r24, r24
     6a4:	21 f0       	breq	.+8      	; 0x6ae <START_TEST+0x46>
			{
				START_STATE = START_INIT;	
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
			}
			else if(!start)
			{
				START_STATE = START_DISPLAY;
			}
		break;
     6ac:	2a c0       	rjmp	.+84     	; 0x702 <START_TEST+0x9a>
		case START_INIT:
			if (start)
			{
				START_STATE = START_INIT;	
			}
			else if(!start)
     6ae:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <start>
     6b2:	88 23       	and	r24, r24
     6b4:	31 f5       	brne	.+76     	; 0x702 <START_TEST+0x9a>
			{
				START_STATE = START_DISPLAY;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
			}
		break;
     6bc:	22 c0       	rjmp	.+68     	; 0x702 <START_TEST+0x9a>
		
		case START_DISPLAY:
			buttonPress = ~PINB & 0x01;
     6be:	83 e2       	ldi	r24, 0x23	; 35
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	fc 01       	movw	r30, r24
     6c4:	80 81       	ld	r24, Z
     6c6:	88 2f       	mov	r24, r24
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	81 70       	andi	r24, 0x01	; 1
     6cc:	99 27       	eor	r25, r25
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	89 2b       	or	r24, r25
     6d2:	09 f0       	breq	.+2      	; 0x6d6 <START_TEST+0x6e>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	82 2f       	mov	r24, r18
     6d8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			
			if(buttonPress == 0x01)
     6dc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	21 f4       	brne	.+8      	; 0x6ec <START_TEST+0x84>
			{
				START_STATE = START_PRESS;
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
			
			else
			{
				START_STATE = START_DISPLAY;
			}
		break;
     6ea:	0c c0       	rjmp	.+24     	; 0x704 <START_TEST+0x9c>
				START_STATE = START_PRESS;
			}
			
			else
			{
				START_STATE = START_DISPLAY;
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
			}
		break;
     6f2:	08 c0       	rjmp	.+16     	; 0x704 <START_TEST+0x9c>
		
		case START_PRESS:
			START_STATE = START_INIT;
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <START_STATE>
		break;
     6fa:	04 c0       	rjmp	.+8      	; 0x704 <START_TEST+0x9c>
		
		default:
		START_STATE = START_START;
     6fc:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <START_STATE>
     700:	01 c0       	rjmp	.+2      	; 0x704 <START_TEST+0x9c>
			}
			else if(!start)
			{
				START_STATE = START_DISPLAY;
			}
		break;
     702:	00 00       	nop
		
		default:
		START_STATE = START_START;
	}
	
	switch(START_STATE)
     704:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <START_STATE>
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	81 30       	cpi	r24, 0x01	; 1
     70e:	91 05       	cpc	r25, r1
     710:	99 f0       	breq	.+38     	; 0x738 <START_TEST+0xd0>
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	91 05       	cpc	r25, r1
     716:	94 f0       	brlt	.+36     	; 0x73c <START_TEST+0xd4>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	91 05       	cpc	r25, r1
     71c:	19 f0       	breq	.+6      	; 0x724 <START_TEST+0xbc>
     71e:	03 97       	sbiw	r24, 0x03	; 3
     720:	31 f0       	breq	.+12     	; 0x72e <START_TEST+0xc6>
		case START_PRESS:
			start = 0x01;
			LCD_ClearScreen();
		break;
	}
}	
     722:	0d c0       	rjmp	.+26     	; 0x73e <START_TEST+0xd6>
		
		case START_INIT:
		break;
		
		case START_DISPLAY:
			LCD_DisplayString(1, startArray);
     724:	68 e0       	ldi	r22, 0x08	; 8
     726:	71 e0       	ldi	r23, 0x01	; 1
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	5e dd       	rcall	.-1348   	; 0x1e8 <LCD_DisplayString>
		break;
     72c:	08 c0       	rjmp	.+16     	; 0x73e <START_TEST+0xd6>
		
		case START_PRESS:
			start = 0x01;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <start>
			LCD_ClearScreen();
     734:	db dc       	rcall	.-1610   	; 0xec <LCD_ClearScreen>
		break;
     736:	03 c0       	rjmp	.+6      	; 0x73e <START_TEST+0xd6>
	{
		case START_START:
		break;
		
		case START_INIT:
		break;
     738:	00 00       	nop
     73a:	01 c0       	rjmp	.+2      	; 0x73e <START_TEST+0xd6>
	}
	
	switch(START_STATE)
	{
		case START_START:
		break;
     73c:	00 00       	nop
		case START_PRESS:
			start = 0x01;
			LCD_ClearScreen();
		break;
	}
}	
     73e:	00 00       	nop
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <CHARACTER_TEST>:

enum CHARACTER_SM{CHAR_START, CHAR_INIT, CHAR_DISPLAY, CHAR_CURSOR, CHAR_RIGHT, CHAR_LEFT, CHAR_PAUSE, CHAR_RELEASE} CHAR_STATE;

void CHARACTER_TEST()
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
	switch (CHAR_STATE)
     74e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <CHAR_STATE>
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	09 2e       	mov	r0, r25
     758:	00 0c       	add	r0, r0
     75a:	aa 0b       	sbc	r26, r26
     75c:	bb 0b       	sbc	r27, r27
     75e:	40 e0       	ldi	r20, 0x00	; 0
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	27 e0       	ldi	r18, 0x07	; 7
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	84 1b       	sub	r24, r20
     768:	95 0b       	sbc	r25, r21
     76a:	28 17       	cp	r18, r24
     76c:	39 07       	cpc	r19, r25
     76e:	08 f4       	brcc	.+2      	; 0x772 <CHARACTER_TEST+0x2c>
     770:	ce c0       	rjmp	.+412    	; 0x90e <CHARACTER_TEST+0x1c8>
     772:	8a 5b       	subi	r24, 0xBA	; 186
     774:	9f 4f       	sbci	r25, 0xFF	; 255
     776:	fc 01       	movw	r30, r24
     778:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__tablejump2__>
	{
		case CHAR_START:
			CHAR_STATE = CHAR_INIT;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
		break;
     782:	c7 c0       	rjmp	.+398    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_INIT:
			if(start && !startGame && !death)
     784:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <start>
     788:	88 23       	and	r24, r24
     78a:	61 f0       	breq	.+24     	; 0x7a4 <CHARACTER_TEST+0x5e>
     78c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     790:	88 23       	and	r24, r24
     792:	41 f4       	brne	.+16     	; 0x7a4 <CHARACTER_TEST+0x5e>
     794:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     798:	88 23       	and	r24, r24
     79a:	21 f4       	brne	.+8      	; 0x7a4 <CHARACTER_TEST+0x5e>
			{
				CHAR_STATE = CHAR_DISPLAY;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			
			else
			{
				CHAR_STATE = CHAR_INIT;
			}
		break;
     7a2:	b7 c0       	rjmp	.+366    	; 0x912 <CHARACTER_TEST+0x1cc>
			if(start && !startGame && !death)
			{
				CHAR_STATE = CHAR_DISPLAY;
			}
			
			else if(restartFlag)
     7a4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <restartFlag>
     7a8:	88 23       	and	r24, r24
     7aa:	41 f0       	breq	.+16     	; 0x7bc <CHARACTER_TEST+0x76>
			{
				death = 0x00;
     7ac:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <death>
				restartFlag = 0x00;
     7b0:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <restartFlag>
				CHAR_STATE = CHAR_DISPLAY;
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			
			else
			{
				CHAR_STATE = CHAR_INIT;
			}
		break;
     7ba:	ab c0       	rjmp	.+342    	; 0x912 <CHARACTER_TEST+0x1cc>
				CHAR_STATE = CHAR_DISPLAY;
			}
			
			else
			{
				CHAR_STATE = CHAR_INIT;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
		break;
     7c2:	a7 c0       	rjmp	.+334    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_DISPLAY:
			CHAR_STATE = CHAR_CURSOR;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
		break;
     7ca:	a3 c0       	rjmp	.+326    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_CURSOR:
			buttonPress = ~PINB & 0x07;
     7cc:	83 e2       	ldi	r24, 0x23	; 35
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	80 95       	com	r24
     7d6:	87 70       	andi	r24, 0x07	; 7
     7d8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			
			if(buttonPress == 0x02)
     7dc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	21 f4       	brne	.+8      	; 0x7ec <CHARACTER_TEST+0xa6>
			{
				CHAR_STATE = CHAR_RIGHT;
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			
			else
			{
				CHAR_STATE = CHAR_CURSOR;
			}
		break;
     7ea:	93 c0       	rjmp	.+294    	; 0x912 <CHARACTER_TEST+0x1cc>
			if(buttonPress == 0x02)
			{
				CHAR_STATE = CHAR_RIGHT;
			}
			
			else if(buttonPress == 0x04)
     7ec:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     7f0:	84 30       	cpi	r24, 0x04	; 4
     7f2:	21 f4       	brne	.+8      	; 0x7fc <CHARACTER_TEST+0xb6>
			{
				CHAR_STATE = CHAR_LEFT;
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			
			else
			{
				CHAR_STATE = CHAR_CURSOR;
			}
		break;
     7fa:	8b c0       	rjmp	.+278    	; 0x912 <CHARACTER_TEST+0x1cc>
			}
			
			
			else
			{
				CHAR_STATE = CHAR_CURSOR;
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
		break;
     802:	87 c0       	rjmp	.+270    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_RIGHT:
			CHAR_STATE = CHAR_PAUSE;
     804:	86 e0       	ldi	r24, 0x06	; 6
     806:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
		break;
     80a:	83 c0       	rjmp	.+262    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_LEFT:
			CHAR_STATE = CHAR_PAUSE;
     80c:	86 e0       	ldi	r24, 0x06	; 6
     80e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
		break;
     812:	7f c0       	rjmp	.+254    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_PAUSE:
			buttonPress = ~PINB & 0x07;		
     814:	83 e2       	ldi	r24, 0x23	; 35
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	fc 01       	movw	r30, r24
     81a:	80 81       	ld	r24, Z
     81c:	80 95       	com	r24
     81e:	87 70       	andi	r24, 0x07	; 7
     820:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if( buttonPress == 0x00)
     824:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     828:	88 23       	and	r24, r24
     82a:	21 f4       	brne	.+8      	; 0x834 <CHARACTER_TEST+0xee>
			{
				CHAR_STATE = CHAR_RELEASE;
     82c:	87 e0       	ldi	r24, 0x07	; 7
     82e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			else
			{
				CHAR_STATE = CHAR_PAUSE;
			}
			
		break;
     832:	6f c0       	rjmp	.+222    	; 0x912 <CHARACTER_TEST+0x1cc>
				CHAR_STATE = CHAR_RELEASE;
			}
			
			else
			{
				CHAR_STATE = CHAR_PAUSE;
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
			
		break;
     83a:	6b c0       	rjmp	.+214    	; 0x912 <CHARACTER_TEST+0x1cc>
		
		case CHAR_RELEASE:
			buttonPress = ~PINB & 0x07;
     83c:	83 e2       	ldi	r24, 0x23	; 35
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	80 95       	com	r24
     846:	87 70       	andi	r24, 0x07	; 7
     848:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if(buttonPress == 0x02)
     84c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     850:	82 30       	cpi	r24, 0x02	; 2
     852:	21 f4       	brne	.+8      	; 0x85c <CHARACTER_TEST+0x116>
			{
				CHAR_STATE = CHAR_RIGHT;
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
			else
			{
				CHAR_STATE = CHAR_RELEASE;
			}
		break;
     85a:	5b c0       	rjmp	.+182    	; 0x912 <CHARACTER_TEST+0x1cc>
			if(buttonPress == 0x02)
			{
				CHAR_STATE = CHAR_RIGHT;
			}
			
			else if(buttonPress == 0x04)
     85c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     860:	84 30       	cpi	r24, 0x04	; 4
     862:	21 f4       	brne	.+8      	; 0x86c <CHARACTER_TEST+0x126>
			{
				CHAR_STATE = CHAR_LEFT;
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
			else
			{
				CHAR_STATE = CHAR_RELEASE;
			}
		break;
     86a:	53 c0       	rjmp	.+166    	; 0x912 <CHARACTER_TEST+0x1cc>
			else if(buttonPress == 0x04)
			{
				CHAR_STATE = CHAR_LEFT;
			}
		
			else if(buttonPress == 0x01 && charPosition == 20)
     86c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     870:	81 30       	cpi	r24, 0x01	; 1
     872:	79 f4       	brne	.+30     	; 0x892 <CHARACTER_TEST+0x14c>
     874:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
     878:	84 31       	cpi	r24, 0x14	; 20
     87a:	59 f4       	brne	.+22     	; 0x892 <CHARACTER_TEST+0x14c>
			{
				chosenAvatar = 1;
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <chosenAvatar>
				startGame = 0x01;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <startGame>
				CHAR_STATE = CHAR_INIT;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
				LCD_ClearScreen();
     88e:	2e dc       	rcall	.-1956   	; 0xec <LCD_ClearScreen>
     890:	3d c0       	rjmp	.+122    	; 0x90c <CHARACTER_TEST+0x1c6>
			}
			
			else if(buttonPress == 0x01 && charPosition == 23)
     892:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	79 f4       	brne	.+30     	; 0x8b8 <CHARACTER_TEST+0x172>
     89a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
     89e:	87 31       	cpi	r24, 0x17	; 23
     8a0:	59 f4       	brne	.+22     	; 0x8b8 <CHARACTER_TEST+0x172>
			{
				chosenAvatar = 2;
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <chosenAvatar>
				startGame = 0x01;
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <startGame>
				CHAR_STATE = CHAR_INIT;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
				LCD_ClearScreen();
     8b4:	1b dc       	rcall	.-1994   	; 0xec <LCD_ClearScreen>
     8b6:	2a c0       	rjmp	.+84     	; 0x90c <CHARACTER_TEST+0x1c6>
			}
			
			else if(buttonPress == 0x01 && charPosition == 26)
     8b8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     8bc:	81 30       	cpi	r24, 0x01	; 1
     8be:	79 f4       	brne	.+30     	; 0x8de <CHARACTER_TEST+0x198>
     8c0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
     8c4:	8a 31       	cpi	r24, 0x1A	; 26
     8c6:	59 f4       	brne	.+22     	; 0x8de <CHARACTER_TEST+0x198>
			{
				chosenAvatar = 3;
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <chosenAvatar>
				startGame = 0x01;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <startGame>
				CHAR_STATE = CHAR_INIT;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
				LCD_ClearScreen();
     8da:	08 dc       	rcall	.-2032   	; 0xec <LCD_ClearScreen>
     8dc:	17 c0       	rjmp	.+46     	; 0x90c <CHARACTER_TEST+0x1c6>
			}
			else if(buttonPress == 0x01 && charPosition == 29)
     8de:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	79 f4       	brne	.+30     	; 0x904 <CHARACTER_TEST+0x1be>
     8e6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
     8ea:	8d 31       	cpi	r24, 0x1D	; 29
     8ec:	59 f4       	brne	.+22     	; 0x904 <CHARACTER_TEST+0x1be>
			{
				chosenAvatar = 4;
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <chosenAvatar>
				startGame = 0x01;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <startGame>
				CHAR_STATE = CHAR_INIT;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
				LCD_ClearScreen();
     900:	f5 db       	rcall	.-2070   	; 0xec <LCD_ClearScreen>
     902:	04 c0       	rjmp	.+8      	; 0x90c <CHARACTER_TEST+0x1c6>
			}
			else
			{
				CHAR_STATE = CHAR_RELEASE;
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <CHAR_STATE>
			}
		break;
     90a:	03 c0       	rjmp	.+6      	; 0x912 <CHARACTER_TEST+0x1cc>
     90c:	02 c0       	rjmp	.+4      	; 0x912 <CHARACTER_TEST+0x1cc>
		
		default: 
		CHAR_STATE = CHAR_START;
     90e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <CHAR_STATE>
	}
	
	switch(CHAR_STATE)
     912:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <CHAR_STATE>
     916:	88 2f       	mov	r24, r24
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	09 2e       	mov	r0, r25
     91c:	00 0c       	add	r0, r0
     91e:	aa 0b       	sbc	r26, r26
     920:	bb 0b       	sbc	r27, r27
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	27 e0       	ldi	r18, 0x07	; 7
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	84 1b       	sub	r24, r20
     92c:	95 0b       	sbc	r25, r21
     92e:	28 17       	cp	r18, r24
     930:	39 07       	cpc	r19, r25
     932:	08 f4       	brcc	.+2      	; 0x936 <CHARACTER_TEST+0x1f0>
     934:	3a c0       	rjmp	.+116    	; 0x9aa <CHARACTER_TEST+0x264>
     936:	82 5b       	subi	r24, 0xB2	; 178
     938:	9f 4f       	sbci	r25, 0xFF	; 255
     93a:	fc 01       	movw	r30, r24
		
		case CHAR_INIT:
		break;
		
		case CHAR_DISPLAY:
			LCD_ClearScreen();
     93c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__tablejump2__>
			LCD_WriteCommand(0x0E);
     940:	d5 db       	rcall	.-2134   	; 0xec <LCD_ClearScreen>
     942:	8e e0       	ldi	r24, 0x0E	; 14
			LCD_DisplayString(1, charArray);
     944:	f3 db       	rcall	.-2074   	; 0x12c <LCD_WriteCommand>
     946:	69 e2       	ldi	r22, 0x29	; 41
     948:	71 e0       	ldi	r23, 0x01	; 1
			LCD_Cursor(20);
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	4d dc       	rcall	.-1894   	; 0x1e8 <LCD_DisplayString>
			LCD_WriteData(1);
     94e:	84 e1       	ldi	r24, 0x14	; 20
     950:	75 dc       	rcall	.-1814   	; 0x23c <LCD_Cursor>
			LCD_Cursor(23);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	1a dc       	rcall	.-1996   	; 0x18a <LCD_WriteData>
			LCD_WriteData(2);
     956:	87 e1       	ldi	r24, 0x17	; 23
     958:	71 dc       	rcall	.-1822   	; 0x23c <LCD_Cursor>
			LCD_Cursor(26);
     95a:	82 e0       	ldi	r24, 0x02	; 2
     95c:	16 dc       	rcall	.-2004   	; 0x18a <LCD_WriteData>
     95e:	8a e1       	ldi	r24, 0x1A	; 26
			LCD_WriteData(3);
     960:	6d dc       	rcall	.-1830   	; 0x23c <LCD_Cursor>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	12 dc       	rcall	.-2012   	; 0x18a <LCD_WriteData>
			LCD_Cursor(29);
     966:	8d e1       	ldi	r24, 0x1D	; 29
     968:	69 dc       	rcall	.-1838   	; 0x23c <LCD_Cursor>
     96a:	84 e0       	ldi	r24, 0x04	; 4
			LCD_WriteData(4);
     96c:	0e dc       	rcall	.-2020   	; 0x18a <LCD_WriteData>
     96e:	81 e1       	ldi	r24, 0x11	; 17
			LCD_Cursor(17);
     970:	65 dc       	rcall	.-1846   	; 0x23c <LCD_Cursor>
     972:	1b c0       	rjmp	.+54     	; 0x9aa <CHARACTER_TEST+0x264>
     974:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
		
		case CHAR_CURSOR:
		break;
		
		case CHAR_RIGHT:
			if(charPosition < 33)
     978:	81 32       	cpi	r24, 0x21	; 33
     97a:	28 f4       	brcc	.+10     	; 0x986 <CHARACTER_TEST+0x240>
     97c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
			{
				charPosition++;
     980:	8f 5f       	subi	r24, 0xFF	; 255
     982:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <charPosition>
     986:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
			}
			
			LCD_Cursor(charPosition);
     98a:	58 dc       	rcall	.-1872   	; 0x23c <LCD_Cursor>
     98c:	0e c0       	rjmp	.+28     	; 0x9aa <CHARACTER_TEST+0x264>
     98e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
			
		break;
		
		case CHAR_LEFT:
			if(charPosition > 17)
     992:	82 31       	cpi	r24, 0x12	; 18
     994:	28 f0       	brcs	.+10     	; 0x9a0 <CHARACTER_TEST+0x25a>
     996:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
			{
				charPosition--;
     99a:	81 50       	subi	r24, 0x01	; 1
     99c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <charPosition>
     9a0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <charPosition>
			}
			
			LCD_Cursor(charPosition);
     9a4:	4b dc       	rcall	.-1898   	; 0x23c <LCD_Cursor>
     9a6:	01 c0       	rjmp	.+2      	; 0x9aa <CHARACTER_TEST+0x264>
     9a8:	00 00       	nop
     9aa:	00 00       	nop
		break;
     9ac:	df 91       	pop	r29
		
		case CHAR_PAUSE:
		break;
		
		case CHAR_RELEASE:
		break;
     9ae:	cf 91       	pop	r28
	}
}
     9b0:	08 95       	ret

000009b2 <GAME_TEST>:
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	cd b7       	in	r28, 0x3d	; 61

enum GAME_SM{GAME_START, GAME_INIT, GAME_DISPLAY, GAME_PAUSE} GAME_STATE;

void GAME_TEST()
{
     9b8:	de b7       	in	r29, 0x3e	; 62
	switch(GAME_STATE)
     9ba:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <GAME_STATE>
     9be:	88 2f       	mov	r24, r24
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	81 30       	cpi	r24, 0x01	; 1
     9c4:	91 05       	cpc	r25, r1
     9c6:	81 f0       	breq	.+32     	; 0x9e8 <GAME_TEST+0x36>
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	91 05       	cpc	r25, r1
     9cc:	1c f4       	brge	.+6      	; 0x9d4 <GAME_TEST+0x22>
     9ce:	89 2b       	or	r24, r25
     9d0:	39 f0       	breq	.+14     	; 0x9e0 <GAME_TEST+0x2e>
     9d2:	26 c0       	rjmp	.+76     	; 0xa20 <GAME_TEST+0x6e>
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	d9 f0       	breq	.+54     	; 0xa10 <GAME_TEST+0x5e>
     9da:	03 97       	sbiw	r24, 0x03	; 3
     9dc:	e9 f0       	breq	.+58     	; 0xa18 <GAME_TEST+0x66>
     9de:	20 c0       	rjmp	.+64     	; 0xa20 <GAME_TEST+0x6e>
	{
		case GAME_START:
			GAME_STATE = GAME_INIT;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <GAME_STATE>
		break;
     9e6:	1e c0       	rjmp	.+60     	; 0xa24 <GAME_TEST+0x72>
		
		case GAME_INIT:
			if(start && startGame && !death)
     9e8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <start>
     9ec:	88 23       	and	r24, r24
     9ee:	61 f0       	breq	.+24     	; 0xa08 <GAME_TEST+0x56>
     9f0:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     9f4:	88 23       	and	r24, r24
     9f6:	41 f0       	breq	.+16     	; 0xa08 <GAME_TEST+0x56>
     9f8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     9fc:	88 23       	and	r24, r24
     9fe:	21 f4       	brne	.+8      	; 0xa08 <GAME_TEST+0x56>
			{
				GAME_STATE = GAME_DISPLAY;
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <GAME_STATE>
			
			else
			{
				GAME_STATE = GAME_INIT;
			}	
		break;
     a06:	0e c0       	rjmp	.+28     	; 0xa24 <GAME_TEST+0x72>
				GAME_STATE = GAME_DISPLAY;
			}
			
			else
			{
				GAME_STATE = GAME_INIT;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <GAME_STATE>
			}	
		break;
     a0e:	0a c0       	rjmp	.+20     	; 0xa24 <GAME_TEST+0x72>
		
		case GAME_DISPLAY:
			GAME_STATE = GAME_PAUSE;	
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <GAME_STATE>
		break;
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <GAME_TEST+0x72>
		
		case GAME_PAUSE:
			GAME_STATE = GAME_PAUSE;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <GAME_STATE>
		break;
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <GAME_TEST+0x72>
		
		default:
			GAME_STATE = GAME_START;	
     a20:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <GAME_STATE>
	}
	
	switch(GAME_STATE)
     a24:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <GAME_STATE>
     a28:	88 2f       	mov	r24, r24
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	81 30       	cpi	r24, 0x01	; 1
     a2e:	91 05       	cpc	r25, r1
     a30:	89 f0       	breq	.+34     	; 0xa54 <GAME_TEST+0xa2>
     a32:	82 30       	cpi	r24, 0x02	; 2
     a34:	91 05       	cpc	r25, r1
     a36:	84 f0       	brlt	.+32     	; 0xa58 <GAME_TEST+0xa6>
     a38:	02 97       	sbiw	r24, 0x02	; 2
     a3a:	81 f4       	brne	.+32     	; 0xa5c <GAME_TEST+0xaa>
		
		case GAME_INIT:
		break;
		
		case GAME_DISPLAY:
			LCD_DisplayString(1, gameArray);
     a3c:	6b e3       	ldi	r22, 0x3B	; 59
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	d2 db       	rcall	.-2140   	; 0x1e8 <LCD_DisplayString>
			LCD_Cursor(17);
     a44:	81 e1       	ldi	r24, 0x11	; 17
     a46:	fa db       	rcall	.-2060   	; 0x23c <LCD_Cursor>
			LCD_WriteData(chosenAvatar);
     a48:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <chosenAvatar>
			LCD_WriteCommand(0x0C);
     a4c:	9e db       	rcall	.-2244   	; 0x18a <LCD_WriteData>
     a4e:	8c e0       	ldi	r24, 0x0C	; 12
     a50:	6d db       	rcall	.-2342   	; 0x12c <LCD_WriteCommand>
		break;
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <GAME_TEST+0xac>
	{
		case GAME_START:
		break;
		
		case GAME_INIT:
		break;
     a54:	00 00       	nop
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <GAME_TEST+0xac>
	}
	
	switch(GAME_STATE)
	{
		case GAME_START:
		break;
     a58:	00 00       	nop
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <GAME_TEST+0xac>
			LCD_WriteData(chosenAvatar);
			LCD_WriteCommand(0x0C);
		break;
		
		case GAME_PAUSE:
		break;
     a5c:	00 00       	nop
	}
}
     a5e:	00 00       	nop
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <MOVE_TEST>:

enum MOVE_SM{MOVE_START, MOVE_INIT, MOVE_UP, MOVE_DOWN, MOVE_PAUSE, MOVE_RELEASE} MOVE_STATE;	

void MOVE_TEST()
{
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	cd b7       	in	r28, 0x3d	; 61
     a6c:	de b7       	in	r29, 0x3e	; 62
	switch(MOVE_STATE)
     a6e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <MOVE_STATE>
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	82 30       	cpi	r24, 0x02	; 2
     a78:	91 05       	cpc	r25, r1
     a7a:	09 f4       	brne	.+2      	; 0xa7e <MOVE_TEST+0x18>
     a7c:	44 c0       	rjmp	.+136    	; 0xb06 <MOVE_TEST+0xa0>
     a7e:	83 30       	cpi	r24, 0x03	; 3
     a80:	91 05       	cpc	r25, r1
     a82:	2c f4       	brge	.+10     	; 0xa8e <MOVE_TEST+0x28>
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	71 f0       	breq	.+28     	; 0xaa4 <MOVE_TEST+0x3e>
     a88:	01 97       	sbiw	r24, 0x01	; 1
     a8a:	81 f0       	breq	.+32     	; 0xaac <MOVE_TEST+0x46>
     a8c:	85 c0       	rjmp	.+266    	; 0xb98 <MOVE_TEST+0x132>
     a8e:	84 30       	cpi	r24, 0x04	; 4
     a90:	91 05       	cpc	r25, r1
     a92:	09 f4       	brne	.+2      	; 0xa96 <MOVE_TEST+0x30>
     a94:	40 c0       	rjmp	.+128    	; 0xb16 <MOVE_TEST+0xb0>
     a96:	84 30       	cpi	r24, 0x04	; 4
     a98:	91 05       	cpc	r25, r1
     a9a:	cc f1       	brlt	.+114    	; 0xb0e <MOVE_TEST+0xa8>
     a9c:	05 97       	sbiw	r24, 0x05	; 5
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <MOVE_TEST+0x3c>
     aa0:	4e c0       	rjmp	.+156    	; 0xb3e <MOVE_TEST+0xd8>
     aa2:	7a c0       	rjmp	.+244    	; 0xb98 <MOVE_TEST+0x132>
	{
		case MOVE_START:
			MOVE_STATE = MOVE_INIT;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
		break;
     aaa:	78 c0       	rjmp	.+240    	; 0xb9c <MOVE_TEST+0x136>
		
		case MOVE_INIT:
			buttonPress = ~PINB & 0x07;
     aac:	83 e2       	ldi	r24, 0x23	; 35
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	fc 01       	movw	r30, r24
     ab2:	80 81       	ld	r24, Z
     ab4:	80 95       	com	r24
     ab6:	87 70       	andi	r24, 0x07	; 7
     ab8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if(startGame && !death && buttonPress == 0x02)
     abc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     ac0:	88 23       	and	r24, r24
     ac2:	61 f0       	breq	.+24     	; 0xadc <MOVE_TEST+0x76>
     ac4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     ac8:	88 23       	and	r24, r24
     aca:	41 f4       	brne	.+16     	; 0xadc <MOVE_TEST+0x76>
     acc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     ad0:	82 30       	cpi	r24, 0x02	; 2
     ad2:	21 f4       	brne	.+8      	; 0xadc <MOVE_TEST+0x76>
			{
				MOVE_STATE = MOVE_UP;
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
     ada:	14 c0       	rjmp	.+40     	; 0xb04 <MOVE_TEST+0x9e>
			}
			
			else if(startGame && !death && buttonPress == 0x04)
     adc:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     ae0:	88 23       	and	r24, r24
     ae2:	61 f0       	breq	.+24     	; 0xafc <MOVE_TEST+0x96>
     ae4:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     ae8:	88 23       	and	r24, r24
     aea:	41 f4       	brne	.+16     	; 0xafc <MOVE_TEST+0x96>
     aec:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     af0:	84 30       	cpi	r24, 0x04	; 4
     af2:	21 f4       	brne	.+8      	; 0xafc <MOVE_TEST+0x96>
			{
				MOVE_STATE = MOVE_DOWN;
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <MOVE_TEST+0x9e>
			}
			
			else
			{
				MOVE_STATE = MOVE_INIT;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
			}
			
		break;
     b02:	4c c0       	rjmp	.+152    	; 0xb9c <MOVE_TEST+0x136>
     b04:	4b c0       	rjmp	.+150    	; 0xb9c <MOVE_TEST+0x136>
		
		case MOVE_UP:
			MOVE_STATE = MOVE_PAUSE;
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
		break;
     b0c:	47 c0       	rjmp	.+142    	; 0xb9c <MOVE_TEST+0x136>
		
		case MOVE_DOWN:
			MOVE_STATE = MOVE_PAUSE;
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
		break;
     b14:	43 c0       	rjmp	.+134    	; 0xb9c <MOVE_TEST+0x136>
		
		case MOVE_PAUSE:
			buttonPress = ~PINB & 0x07;
     b16:	83 e2       	ldi	r24, 0x23	; 35
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	80 95       	com	r24
     b20:	87 70       	andi	r24, 0x07	; 7
     b22:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if(buttonPress == 0x00)
     b26:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     b2a:	88 23       	and	r24, r24
     b2c:	21 f4       	brne	.+8      	; 0xb36 <MOVE_TEST+0xd0>
			{
				MOVE_STATE = MOVE_RELEASE;
     b2e:	85 e0       	ldi	r24, 0x05	; 5
     b30:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
			
			else
			{
				MOVE_STATE = MOVE_PAUSE;
			}
		break;
     b34:	33 c0       	rjmp	.+102    	; 0xb9c <MOVE_TEST+0x136>
				MOVE_STATE = MOVE_RELEASE;
			}
			
			else
			{
				MOVE_STATE = MOVE_PAUSE;
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
			}
		break;
     b3c:	2f c0       	rjmp	.+94     	; 0xb9c <MOVE_TEST+0x136>
		
		case MOVE_RELEASE:
			buttonPress = ~PINB & 0x07;
     b3e:	83 e2       	ldi	r24, 0x23	; 35
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	fc 01       	movw	r30, r24
     b44:	80 81       	ld	r24, Z
     b46:	80 95       	com	r24
     b48:	87 70       	andi	r24, 0x07	; 7
     b4a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if(startGame && !death && buttonPress == 0x02)
     b4e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     b52:	88 23       	and	r24, r24
     b54:	61 f0       	breq	.+24     	; 0xb6e <MOVE_TEST+0x108>
     b56:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     b5a:	88 23       	and	r24, r24
     b5c:	41 f4       	brne	.+16     	; 0xb6e <MOVE_TEST+0x108>
     b5e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	21 f4       	brne	.+8      	; 0xb6e <MOVE_TEST+0x108>
			{
				MOVE_STATE = MOVE_UP;
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
     b6c:	14 c0       	rjmp	.+40     	; 0xb96 <MOVE_TEST+0x130>
			}
		
			else if(startGame && !death && buttonPress == 0x04)
     b6e:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     b72:	88 23       	and	r24, r24
     b74:	61 f0       	breq	.+24     	; 0xb8e <MOVE_TEST+0x128>
     b76:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     b7a:	88 23       	and	r24, r24
     b7c:	41 f4       	brne	.+16     	; 0xb8e <MOVE_TEST+0x128>
     b7e:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	21 f4       	brne	.+8      	; 0xb8e <MOVE_TEST+0x128>
			{
				MOVE_STATE = MOVE_DOWN;
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
     b8c:	04 c0       	rjmp	.+8      	; 0xb96 <MOVE_TEST+0x130>
			}
		
			else
			{
				MOVE_STATE = MOVE_RELEASE;
     b8e:	85 e0       	ldi	r24, 0x05	; 5
     b90:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <MOVE_STATE>
			}		
		break;
     b94:	03 c0       	rjmp	.+6      	; 0xb9c <MOVE_TEST+0x136>
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <MOVE_TEST+0x136>
		
		default:
			MOVE_STATE = MOVE_START; 
     b98:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <MOVE_STATE>
	}
	
	switch(MOVE_STATE)
     b9c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <MOVE_STATE>
     ba0:	88 2f       	mov	r24, r24
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	91 05       	cpc	r25, r1
     ba8:	59 f0       	breq	.+22     	; 0xbc0 <MOVE_TEST+0x15a>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	91 05       	cpc	r25, r1
     bae:	0c f4       	brge	.+2      	; 0xbb2 <MOVE_TEST+0x14c>
     bb0:	3b c0       	rjmp	.+118    	; 0xc28 <MOVE_TEST+0x1c2>
     bb2:	84 30       	cpi	r24, 0x04	; 4
     bb4:	91 05       	cpc	r25, r1
     bb6:	09 f4       	brne	.+2      	; 0xbba <MOVE_TEST+0x154>
     bb8:	39 c0       	rjmp	.+114    	; 0xc2c <MOVE_TEST+0x1c6>
     bba:	04 97       	sbiw	r24, 0x04	; 4
     bbc:	dc f0       	brlt	.+54     	; 0xbf4 <MOVE_TEST+0x18e>
		
		case MOVE_PAUSE:
		break;
		
		case MOVE_RELEASE:
		break;
     bbe:	37 c0       	rjmp	.+110    	; 0xc2e <MOVE_TEST+0x1c8>
		
		case MOVE_INIT:
		break;
		
		case MOVE_UP:
			if(avatarPosition != 1)
     bc0:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <MOVE_TEST+0x172>
			{
				LCD_Cursor(17);
     bc8:	81 e1       	ldi	r24, 0x11	; 17
     bca:	38 db       	rcall	.-2448   	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
     bcc:	8f e5       	ldi	r24, 0x5F	; 95
     bce:	dd da       	rcall	.-2630   	; 0x18a <LCD_WriteData>
				avatarPosition = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <avatarPosition>
     bd6:	07 c0       	rjmp	.+14     	; 0xbe6 <MOVE_TEST+0x180>
			}
			
			else if(avatarPosition == 1)
     bd8:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	19 f4       	brne	.+6      	; 0xbe6 <MOVE_TEST+0x180>
			{
				avatarPosition = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <avatarPosition>
			}
			
			LCD_Cursor(avatarPosition);
     be6:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     bea:	28 db       	rcall	.-2480   	; 0x23c <LCD_Cursor>
			LCD_WriteData(chosenAvatar);
     bec:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <chosenAvatar>
     bf0:	cc da       	rcall	.-2664   	; 0x18a <LCD_WriteData>
     bf2:	1d c0       	rjmp	.+58     	; 0xc2e <MOVE_TEST+0x1c8>
			
			
		break;
     bf4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
		
		case MOVE_DOWN:
			if(avatarPosition != 17)
     bf8:	81 31       	cpi	r24, 0x11	; 17
     bfa:	41 f0       	breq	.+16     	; 0xc0c <MOVE_TEST+0x1a6>
     bfc:	81 e1       	ldi	r24, 0x11	; 17
			{
				avatarPosition = 17;
     bfe:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <avatarPosition>
				LCD_Cursor(1);
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	1b db       	rcall	.-2506   	; 0x23c <LCD_Cursor>
     c06:	8f e5       	ldi	r24, 0x5F	; 95
				LCD_WriteData('_');
     c08:	c0 da       	rcall	.-2688   	; 0x18a <LCD_WriteData>
     c0a:	07 c0       	rjmp	.+14     	; 0xc1a <MOVE_TEST+0x1b4>
     c0c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
			}
			
			else if(avatarPosition == 17)
     c10:	81 31       	cpi	r24, 0x11	; 17
     c12:	19 f4       	brne	.+6      	; 0xc1a <MOVE_TEST+0x1b4>
     c14:	81 e1       	ldi	r24, 0x11	; 17
			{
				avatarPosition = 17;
     c16:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <avatarPosition>
			}
			
			LCD_Cursor(avatarPosition);
     c1a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     c1e:	0e db       	rcall	.-2532   	; 0x23c <LCD_Cursor>
     c20:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <chosenAvatar>
			LCD_WriteData(chosenAvatar);
     c24:	b2 da       	rcall	.-2716   	; 0x18a <LCD_WriteData>
     c26:	03 c0       	rjmp	.+6      	; 0xc2e <MOVE_TEST+0x1c8>
     c28:	00 00       	nop
			
		break;
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <MOVE_TEST+0x1c8>
	
	switch(MOVE_STATE)
	{
		
		case MOVE_START:
		break;
     c2c:	00 00       	nop
     c2e:	00 00       	nop
			LCD_WriteData(chosenAvatar);
			
		break;
		
		case MOVE_PAUSE:
		break;
     c30:	df 91       	pop	r29
		
		case MOVE_RELEASE:
		break;
	}
}
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <SEL_TEST>:
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29

enum SEL_SM{SEL_START, SEL_INIT, SEL_RNG} SEL_STATE;
	
void SEL_TEST()
{
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
	switch(SEL_STATE)
     c3e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <SEL_STATE>
     c42:	88 2f       	mov	r24, r24
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	91 05       	cpc	r25, r1
     c4a:	49 f0       	breq	.+18     	; 0xc5e <SEL_TEST+0x28>
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	91 05       	cpc	r25, r1
     c50:	b1 f0       	breq	.+44     	; 0xc7e <SEL_TEST+0x48>
     c52:	89 2b       	or	r24, r25
     c54:	21 f5       	brne	.+72     	; 0xc9e <SEL_TEST+0x68>
	{
		case SEL_START:
			SEL_STATE = SEL_INIT;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <SEL_STATE>
		break;
     c5c:	22 c0       	rjmp	.+68     	; 0xca2 <SEL_TEST+0x6c>
		
		case SEL_INIT:
			if(!death && startGame)
     c5e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     c62:	88 23       	and	r24, r24
     c64:	41 f4       	brne	.+16     	; 0xc76 <SEL_TEST+0x40>
     c66:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     c6a:	88 23       	and	r24, r24
     c6c:	21 f0       	breq	.+8      	; 0xc76 <SEL_TEST+0x40>
			{
				SEL_STATE = SEL_RNG;
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <SEL_STATE>
			
			else
			{
				SEL_STATE = SEL_INIT;
			}
		break;
     c74:	16 c0       	rjmp	.+44     	; 0xca2 <SEL_TEST+0x6c>
				SEL_STATE = SEL_RNG;
			}
			
			else
			{
				SEL_STATE = SEL_INIT;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <SEL_STATE>
			}
		break;
     c7c:	12 c0       	rjmp	.+36     	; 0xca2 <SEL_TEST+0x6c>
		
		case SEL_RNG:
			if(!death && startGame)
     c7e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     c82:	88 23       	and	r24, r24
     c84:	41 f4       	brne	.+16     	; 0xc96 <SEL_TEST+0x60>
     c86:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     c8a:	88 23       	and	r24, r24
     c8c:	21 f0       	breq	.+8      	; 0xc96 <SEL_TEST+0x60>
			{
				SEL_STATE = SEL_RNG;
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <SEL_STATE>
			
			else
			{
				SEL_STATE = SEL_INIT;
			}
		break;
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <SEL_TEST+0x6c>
				SEL_STATE = SEL_RNG;
			}
			
			else
			{
				SEL_STATE = SEL_INIT;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <SEL_STATE>
			}
		break;
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <SEL_TEST+0x6c>
		
		default:
			SEL_STATE = SEL_START;
     c9e:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <SEL_STATE>
	}
	
	switch(SEL_STATE)
     ca2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <SEL_STATE>
     ca6:	88 2f       	mov	r24, r24
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	91 05       	cpc	r25, r1
     cae:	89 f0       	breq	.+34     	; 0xcd2 <SEL_TEST+0x9c>
     cb0:	02 97       	sbiw	r24, 0x02	; 2
     cb2:	89 f4       	brne	.+34     	; 0xcd6 <SEL_TEST+0xa0>
		
		case SEL_INIT:
		break;
		
		case SEL_RNG:
			enemyChosen =  rand() % 5;
     cb4:	1c d7       	rcall	.+3640   	; 0x1aee <rand>
     cb6:	25 e0       	ldi	r18, 0x05	; 5
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	b9 01       	movw	r22, r18
     cbc:	a1 d6       	rcall	.+3394   	; 0x1a00 <__divmodhi4>
     cbe:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <enemyChosen>
			location =  rand() % 3;			
     cc2:	15 d7       	rcall	.+3626   	; 0x1aee <rand>
     cc4:	23 e0       	ldi	r18, 0x03	; 3
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	b9 01       	movw	r22, r18
     cca:	9a d6       	rcall	.+3380   	; 0x1a00 <__divmodhi4>
     ccc:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <location>
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <SEL_TEST+0xa2>
			
		break;
     cd2:	00 00       	nop
	{
		case SEL_START:
		break;
		
		case SEL_INIT:
		break;
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <SEL_TEST+0xa2>
     cd6:	00 00       	nop
	}
	
	switch(SEL_STATE)
	{
		case SEL_START:
		break;
     cd8:	00 00       	nop
			enemyChosen =  rand() % 5;
			location =  rand() % 3;			
			
		break;
	}
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <ENEMY_TEST>:
     ce0:	cf 93       	push	r28

enum ENEMY_SM{ENEMY_START, ENEMY_INIT} ENEMY_STATE;		
	
void ENEMY_TEST()
{
     ce2:	df 93       	push	r29
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
	switch(ENEMY_STATE)
     ce8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <ENEMY_STATE>
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	19 f0       	breq	.+6      	; 0xcfa <ENEMY_TEST+0x1a>
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	29 f0       	breq	.+10     	; 0xd02 <ENEMY_TEST+0x22>
     cf8:	6e c0       	rjmp	.+220    	; 0xdd6 <ENEMY_TEST+0xf6>
	{
		case ENEMY_START:
			ENEMY_STATE = ENEMY_INIT;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ENEMY_STATE>
		break; 
     d00:	6c c0       	rjmp	.+216    	; 0xdda <ENEMY_TEST+0xfa>
		
		case ENEMY_INIT:
			if(startGame && !death)
     d02:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
     d06:	88 23       	and	r24, r24
     d08:	09 f4       	brne	.+2      	; 0xd0c <ENEMY_TEST+0x2c>
     d0a:	61 c0       	rjmp	.+194    	; 0xdce <ENEMY_TEST+0xee>
     d0c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     d10:	88 23       	and	r24, r24
     d12:	09 f0       	breq	.+2      	; 0xd16 <ENEMY_TEST+0x36>
     d14:	5c c0       	rjmp	.+184    	; 0xdce <ENEMY_TEST+0xee>
			{
				if(enemyChosen == 1 && location == 1)
     d16:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	39 f4       	brne	.+14     	; 0xd2c <ENEMY_TEST+0x4c>
     d1e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	19 f4       	brne	.+6      	; 0xd2c <ENEMY_TEST+0x4c>
				{
					enemyOnePosition = 16;
     d26:	80 e1       	ldi	r24, 0x10	; 16
     d28:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <enemyOnePosition>
				}
				
				if(enemyChosen == 2 && location == 1)
     d2c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d30:	82 30       	cpi	r24, 0x02	; 2
     d32:	39 f4       	brne	.+14     	; 0xd42 <ENEMY_TEST+0x62>
     d34:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	19 f4       	brne	.+6      	; 0xd42 <ENEMY_TEST+0x62>
				{
					
					enemyTwoPosition = 16;
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <enemyTwoPosition>
				}
				if(enemyChosen == 3 && location == 1)
     d42:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	39 f4       	brne	.+14     	; 0xd58 <ENEMY_TEST+0x78>
     d4a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	19 f4       	brne	.+6      	; 0xd58 <ENEMY_TEST+0x78>
				{
					
					enemyThreePosition = 16;
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <enemyThreePosition>
				}
				if(enemyChosen == 4 && location == 1)
     d58:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	39 f4       	brne	.+14     	; 0xd6e <ENEMY_TEST+0x8e>
     d60:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d64:	81 30       	cpi	r24, 0x01	; 1
     d66:	19 f4       	brne	.+6      	; 0xd6e <ENEMY_TEST+0x8e>
				{
					
					enemyFourPosition = 16;
     d68:	80 e1       	ldi	r24, 0x10	; 16
     d6a:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <enemyFourPosition>
				}
				if(enemyChosen == 1 && location == 2)
     d6e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	39 f4       	brne	.+14     	; 0xd84 <ENEMY_TEST+0xa4>
     d76:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d7a:	82 30       	cpi	r24, 0x02	; 2
     d7c:	19 f4       	brne	.+6      	; 0xd84 <ENEMY_TEST+0xa4>
				{
					
					enemyOnePosition = 32;
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <enemyOnePosition>
				}
				
				if(enemyChosen == 2 && location == 2)
     d84:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	39 f4       	brne	.+14     	; 0xd9a <ENEMY_TEST+0xba>
     d8c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	19 f4       	brne	.+6      	; 0xd9a <ENEMY_TEST+0xba>
				{
					enemyTwoPosition = 32;
     d94:	80 e2       	ldi	r24, 0x20	; 32
     d96:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <enemyTwoPosition>
				}
				
				if(enemyChosen == 3 && location == 2)
     d9a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	39 f4       	brne	.+14     	; 0xdb0 <ENEMY_TEST+0xd0>
     da2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	19 f4       	brne	.+6      	; 0xdb0 <ENEMY_TEST+0xd0>
				{
					
					enemyThreePosition = 32;
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <enemyThreePosition>
				}
				
				if(enemyChosen == 4 && location == 2)
     db0:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	39 f4       	brne	.+14     	; 0xdc6 <ENEMY_TEST+0xe6>
     db8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <location>
     dbc:	82 30       	cpi	r24, 0x02	; 2
     dbe:	19 f4       	brne	.+6      	; 0xdc6 <ENEMY_TEST+0xe6>
				{
					enemyFourPosition = 32;
     dc0:	80 e2       	ldi	r24, 0x20	; 32
     dc2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <enemyFourPosition>
				}
								
				ENEMY_STATE = ENEMY_INIT;
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ENEMY_STATE>
			
			else
			{
				ENEMY_STATE = ENEMY_INIT;
			}
		break;
     dcc:	06 c0       	rjmp	.+12     	; 0xdda <ENEMY_TEST+0xfa>
				ENEMY_STATE = ENEMY_INIT;
			}
			
			else
			{
				ENEMY_STATE = ENEMY_INIT;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <ENEMY_STATE>
			}
		break;
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <ENEMY_TEST+0xfa>
	
		default:
			ENEMY_STATE = ENEMY_START;
     dd6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <ENEMY_STATE>
	
	switch(ENEMY_STATE)
	{
		
		case ENEMY_START:
		break;
     dda:	00 00       	nop
		
		case ENEMY_INIT:
		break;		
		break;
	}
}
     ddc:	00 00       	nop
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	08 95       	ret

00000de4 <E1_TEST>:

enum E1_SM{E1_START, E1_INIT, E1_SCROLL} E1_STATE;

void E1_TEST()
{
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	switch(E1_STATE)
     dec:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <E1_STATE>
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 05       	cpc	r25, r1
     df8:	49 f0       	breq	.+18     	; 0xe0c <E1_TEST+0x28>
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	91 05       	cpc	r25, r1
     dfe:	c1 f0       	breq	.+48     	; 0xe30 <E1_TEST+0x4c>
     e00:	89 2b       	or	r24, r25
     e02:	31 f5       	brne	.+76     	; 0xe50 <E1_TEST+0x6c>
	{
		case E1_START:
			E1_STATE = E1_INIT;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <E1_STATE>
		break;
     e0a:	24 c0       	rjmp	.+72     	; 0xe54 <E1_TEST+0x70>
		
		case E1_INIT:
			if(enemyChosen == 1  && !death)
     e0c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	51 f4       	brne	.+20     	; 0xe28 <E1_TEST+0x44>
     e14:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     e18:	88 23       	and	r24, r24
     e1a:	31 f4       	brne	.+12     	; 0xe28 <E1_TEST+0x44>
			{
				stopScrollingOne = 0;
     e1c:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <stopScrollingOne>
				E1_STATE = E1_SCROLL;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <E1_STATE>
		
			else
			{
				E1_STATE = E1_INIT;
			}
		break;
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <E1_TEST+0x70>
				E1_STATE = E1_SCROLL;
			}
		
			else
			{
				E1_STATE = E1_INIT;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <E1_STATE>
			}
		break;
     e2e:	12 c0       	rjmp	.+36     	; 0xe54 <E1_TEST+0x70>
		
		case E1_SCROLL:
			if(stopScrollingOne && death)
     e30:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <stopScrollingOne>
     e34:	88 23       	and	r24, r24
     e36:	41 f0       	breq	.+16     	; 0xe48 <E1_TEST+0x64>
     e38:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     e3c:	88 23       	and	r24, r24
     e3e:	21 f0       	breq	.+8      	; 0xe48 <E1_TEST+0x64>
			{
				E1_STATE= E1_INIT;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <E1_STATE>
			else
			{
				E1_STATE = E1_SCROLL;
				
			}
		break;
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <E1_TEST+0x70>
				E1_STATE= E1_INIT;
			}
			
			else
			{
				E1_STATE = E1_SCROLL;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <E1_STATE>
				
			}
		break;
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <E1_TEST+0x70>
		
		default:
		E1_STATE = E1_START;
     e50:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <E1_STATE>
	}
	
	switch(E1_STATE)
     e54:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <E1_STATE>
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <E1_TEST+0x80>
     e62:	6f c0       	rjmp	.+222    	; 0xf42 <E1_TEST+0x15e>
     e64:	02 97       	sbiw	r24, 0x02	; 2
     e66:	09 f0       	breq	.+2      	; 0xe6a <E1_TEST+0x86>
     e68:	6e c0       	rjmp	.+220    	; 0xf46 <E1_TEST+0x162>
		
		case E1_INIT:
		break;
		
		case E1_SCROLL:
			if(enemyOnePosition > 17)
     e6a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     e6e:	82 31       	cpi	r24, 0x12	; 18
     e70:	80 f1       	brcs	.+96     	; 0xed2 <E1_TEST+0xee>
			{
				enemyOnePosition--;
     e72:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <enemyOnePosition>
				LCD_Cursor(enemyOnePosition);
     e7c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     e80:	dd d9       	rcall	.-3142   	; 0x23c <LCD_Cursor>
				LCD_WriteData('*');
     e82:	8a e2       	ldi	r24, 0x2A	; 42
     e84:	82 d9       	rcall	.-3324   	; 0x18a <LCD_WriteData>
				LCD_Cursor(enemyOnePosition+1);
     e86:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_WriteData('_');
     e8c:	d7 d9       	rcall	.-3154   	; 0x23c <LCD_Cursor>
     e8e:	8f e5       	ldi	r24, 0x5F	; 95
     e90:	7c d9       	rcall	.-3336   	; 0x18a <LCD_WriteData>
				
				if((enemyOnePosition == avatarPosition))
     e92:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <enemyOnePosition>
     e96:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     e9a:	98 17       	cp	r25, r24
     e9c:	59 f4       	brne	.+22     	; 0xeb4 <E1_TEST+0xd0>
				{
					death = 0x01;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
					startGame = 0x00;
     ea4:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
					stopScrollingOne = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <stopScrollingOne>
					enemyOnePosition = 0;
     eae:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <enemyOnePosition>
					enemyOnePosition = 0;
					stopScrollingOne = 1;
				}
			}
		
		break;
     eb2:	4b c0       	rjmp	.+150    	; 0xf4a <E1_TEST+0x166>
					startGame = 0x00;
					stopScrollingOne = 1;
					enemyOnePosition = 0;
				}
				
				else if(enemyOnePosition == 17)
     eb4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     eb8:	81 31       	cpi	r24, 0x11	; 17
     eba:	09 f0       	breq	.+2      	; 0xebe <E1_TEST+0xda>
				{
					LCD_Cursor(17);
     ebc:	46 c0       	rjmp	.+140    	; 0xf4a <E1_TEST+0x166>
     ebe:	81 e1       	ldi	r24, 0x11	; 17
     ec0:	bd d9       	rcall	.-3206   	; 0x23c <LCD_Cursor>
					LCD_WriteData('_');
     ec2:	8f e5       	ldi	r24, 0x5F	; 95
     ec4:	62 d9       	rcall	.-3388   	; 0x18a <LCD_WriteData>
     ec6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <enemyOnePosition>
					enemyOnePosition = 0;
     eca:	81 e0       	ldi	r24, 0x01	; 1
					stopScrollingOne = 1;
     ecc:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <stopScrollingOne>
     ed0:	3c c0       	rjmp	.+120    	; 0xf4a <E1_TEST+0x166>
					enemyOnePosition = 0;
					stopScrollingOne = 1;
				}
			}
		
		break;
     ed2:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
					enemyOnePosition = 0;
					stopScrollingOne = 1;
				}
			}
		
			else if(enemyOnePosition > 1 && enemyOnePosition < 17)
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	08 f4       	brcc	.+2      	; 0xedc <E1_TEST+0xf8>
     eda:	37 c0       	rjmp	.+110    	; 0xf4a <E1_TEST+0x166>
     edc:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     ee0:	81 31       	cpi	r24, 0x11	; 17
     ee2:	98 f5       	brcc	.+102    	; 0xf4a <E1_TEST+0x166>
     ee4:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
			{
				enemyOnePosition--;
     ee8:	81 50       	subi	r24, 0x01	; 1
     eea:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <enemyOnePosition>
				LCD_Cursor(enemyOnePosition);
     eee:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
				LCD_WriteData('*');
     ef2:	a4 d9       	rcall	.-3256   	; 0x23c <LCD_Cursor>
     ef4:	8a e2       	ldi	r24, 0x2A	; 42
				LCD_Cursor(enemyOnePosition+1);
     ef6:	49 d9       	rcall	.-3438   	; 0x18a <LCD_WriteData>
     ef8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	9e d9       	rcall	.-3268   	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
     f00:	8f e5       	ldi	r24, 0x5F	; 95
     f02:	43 d9       	rcall	.-3450   	; 0x18a <LCD_WriteData>
     f04:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <enemyOnePosition>
			
				if((enemyOnePosition == avatarPosition))
     f08:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
     f0c:	98 17       	cp	r25, r24
     f0e:	59 f4       	brne	.+22     	; 0xf26 <E1_TEST+0x142>
     f10:	81 e0       	ldi	r24, 0x01	; 1
				{
					death = 0x01;
     f12:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
     f16:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
					startGame = 0x00;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
					stopScrollingOne = 1;
     f1c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <stopScrollingOne>
					enemyOnePosition = 0;
     f20:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <enemyOnePosition>
				}
				
				else if(enemyOnePosition == 1)
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <E1_TEST+0x166>
     f26:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <enemyOnePosition>
     f2a:	81 30       	cpi	r24, 0x01	; 1
				{
					LCD_Cursor(1);
     f2c:	71 f4       	brne	.+28     	; 0xf4a <E1_TEST+0x166>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	85 d9       	rcall	.-3318   	; 0x23c <LCD_Cursor>
					LCD_WriteData('_');
     f32:	8f e5       	ldi	r24, 0x5F	; 95
     f34:	2a d9       	rcall	.-3500   	; 0x18a <LCD_WriteData>
     f36:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <enemyOnePosition>
					enemyOnePosition = 0;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
					stopScrollingOne = 1;
     f3c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <stopScrollingOne>
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <E1_TEST+0x166>
				}
			}
		
		break;
     f42:	00 00       	nop
	{
		case E1_START:
		break;
		
		case E1_INIT:
		break;
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <E1_TEST+0x168>
     f46:	00 00       	nop
	}
	
	switch(E1_STATE)
	{
		case E1_START:
		break;
     f48:	01 c0       	rjmp	.+2      	; 0xf4c <E1_TEST+0x168>
     f4a:	00 00       	nop
					enemyOnePosition = 0;
					stopScrollingOne = 1;
				}
			}
		
		break;
     f4c:	00 00       	nop
	}
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	08 95       	ret

00000f54 <E2_TEST>:
     f54:	cf 93       	push	r28

enum E2_SM{E2_START, E2_INIT, E2_SCROLL} E2_STATE;

void E2_TEST()
{
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
	switch(E2_STATE)
     f5c:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <E2_STATE>
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	49 f0       	breq	.+18     	; 0xf7c <E2_TEST+0x28>
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	91 05       	cpc	r25, r1
     f6e:	c1 f0       	breq	.+48     	; 0xfa0 <E2_TEST+0x4c>
     f70:	89 2b       	or	r24, r25
     f72:	31 f5       	brne	.+76     	; 0xfc0 <E2_TEST+0x6c>
	{
		case E2_START:
			E2_STATE = E2_INIT;
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <E2_STATE>
		break;
     f7a:	24 c0       	rjmp	.+72     	; 0xfc4 <E2_TEST+0x70>
		
		case E2_INIT:
		if(enemyChosen == 2 && !death)
     f7c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	51 f4       	brne	.+20     	; 0xf98 <E2_TEST+0x44>
     f84:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     f88:	88 23       	and	r24, r24
     f8a:	31 f4       	brne	.+12     	; 0xf98 <E2_TEST+0x44>
		{
			stopScrollingTwo = 0;
     f8c:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <stopScrollingTwo>
			E2_STATE = E2_SCROLL;
     f90:	82 e0       	ldi	r24, 0x02	; 2
     f92:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <E2_STATE>
		
		else
		{
			E2_STATE = E2_INIT;
		}
		break;
     f96:	16 c0       	rjmp	.+44     	; 0xfc4 <E2_TEST+0x70>
			E2_STATE = E2_SCROLL;
		}
		
		else
		{
			E2_STATE = E2_INIT;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <E2_STATE>
		}
		break;
     f9e:	12 c0       	rjmp	.+36     	; 0xfc4 <E2_TEST+0x70>
		
		case E2_SCROLL:
		if(stopScrollingTwo && death)
     fa0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <stopScrollingTwo>
     fa4:	88 23       	and	r24, r24
     fa6:	41 f0       	breq	.+16     	; 0xfb8 <E2_TEST+0x64>
     fa8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
     fac:	88 23       	and	r24, r24
     fae:	21 f0       	breq	.+8      	; 0xfb8 <E2_TEST+0x64>
		{
			E2_STATE = E2_INIT;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <E2_STATE>
		else
		{
			E2_STATE = E2_SCROLL;
			
		}
		break;
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <E2_TEST+0x70>
			E2_STATE = E2_INIT;
		}
		
		else
		{
			E2_STATE = E2_SCROLL;
     fb8:	82 e0       	ldi	r24, 0x02	; 2
     fba:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <E2_STATE>
			
		}
		break;
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <E2_TEST+0x70>
		
		default:
		E2_STATE = E2_START;
     fc0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <E2_STATE>
	}
	
	switch(E2_STATE)
     fc4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <E2_STATE>
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <E2_TEST+0x80>
     fd2:	6a c0       	rjmp	.+212    	; 0x10a8 <E2_TEST+0x154>
     fd4:	02 97       	sbiw	r24, 0x02	; 2
     fd6:	09 f0       	breq	.+2      	; 0xfda <E2_TEST+0x86>
     fd8:	69 c0       	rjmp	.+210    	; 0x10ac <E2_TEST+0x158>
		
		case E2_INIT:
		break;
		
		case E2_SCROLL:
			if(enemyTwoPosition > 17)
     fda:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
     fde:	82 31       	cpi	r24, 0x12	; 18
     fe0:	70 f1       	brcs	.+92     	; 0x103e <E2_TEST+0xea>
			{
				enemyTwoPosition--;
     fe2:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
     fe6:	81 50       	subi	r24, 0x01	; 1
     fe8:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <enemyTwoPosition>
				LCD_Cursor(enemyTwoPosition);
     fec:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
     ff0:	25 d9       	rcall	.-3510   	; 0x23c <LCD_Cursor>
				LCD_WriteData('*');
     ff2:	8a e2       	ldi	r24, 0x2A	; 42
     ff4:	ca d8       	rcall	.-3692   	; 0x18a <LCD_WriteData>
				LCD_Cursor(enemyTwoPosition+1);
     ff6:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
				LCD_WriteData('_');
     ffc:	1f d9       	rcall	.-3522   	; 0x23c <LCD_Cursor>
     ffe:	8f e5       	ldi	r24, 0x5F	; 95
    1000:	c4 d8       	rcall	.-3704   	; 0x18a <LCD_WriteData>
			
				if((enemyTwoPosition == avatarPosition))
    1002:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <enemyTwoPosition>
    1006:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    100a:	98 17       	cp	r25, r24
    100c:	49 f4       	brne	.+18     	; 0x1020 <E2_TEST+0xcc>
				{
					death = 0x01;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
					startGame = 0x00;
    1014:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
					stopScrollingTwo = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <stopScrollingTwo>
					LCD_WriteData('_');
					enemyTwoPosition = 0;
					stopScrollingTwo = 1;
				}
			}
		break;
    101e:	48 c0       	rjmp	.+144    	; 0x10b0 <E2_TEST+0x15c>
					death = 0x01;
					startGame = 0x00;
					stopScrollingTwo = 1;
				}
				
				else if(enemyTwoPosition == 17)
    1020:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
    1024:	81 31       	cpi	r24, 0x11	; 17
    1026:	09 f0       	breq	.+2      	; 0x102a <E2_TEST+0xd6>
				{
					LCD_Cursor(17);
    1028:	43 c0       	rjmp	.+134    	; 0x10b0 <E2_TEST+0x15c>
    102a:	81 e1       	ldi	r24, 0x11	; 17
    102c:	07 d9       	rcall	.-3570   	; 0x23c <LCD_Cursor>
					LCD_WriteData('_');
    102e:	8f e5       	ldi	r24, 0x5F	; 95
    1030:	ac d8       	rcall	.-3752   	; 0x18a <LCD_WriteData>
    1032:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <enemyTwoPosition>
					enemyTwoPosition = 0;
    1036:	81 e0       	ldi	r24, 0x01	; 1
					stopScrollingTwo = 1;
    1038:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <stopScrollingTwo>
    103c:	39 c0       	rjmp	.+114    	; 0x10b0 <E2_TEST+0x15c>
					LCD_WriteData('_');
					enemyTwoPosition = 0;
					stopScrollingTwo = 1;
				}
			}
		break;
    103e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
					enemyTwoPosition = 0;
					stopScrollingTwo = 1;
				}
			}
		
			else if(enemyTwoPosition > 1 && enemyTwoPosition < 17)
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	a8 f1       	brcs	.+106    	; 0x10b0 <E2_TEST+0x15c>
    1046:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
    104a:	81 31       	cpi	r24, 0x11	; 17
    104c:	88 f5       	brcc	.+98     	; 0x10b0 <E2_TEST+0x15c>
    104e:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
			{
				enemyTwoPosition--;
    1052:	81 50       	subi	r24, 0x01	; 1
    1054:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <enemyTwoPosition>
				LCD_Cursor(enemyTwoPosition);
    1058:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
				LCD_WriteData('*');
    105c:	ef d8       	rcall	.-3618   	; 0x23c <LCD_Cursor>
    105e:	8a e2       	ldi	r24, 0x2A	; 42
				LCD_Cursor(enemyTwoPosition+1);
    1060:	94 d8       	rcall	.-3800   	; 0x18a <LCD_WriteData>
    1062:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	e9 d8       	rcall	.-3630   	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
    106a:	8f e5       	ldi	r24, 0x5F	; 95
    106c:	8e d8       	rcall	.-3812   	; 0x18a <LCD_WriteData>
    106e:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <enemyTwoPosition>
				
				if((enemyTwoPosition == avatarPosition))
    1072:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    1076:	98 17       	cp	r25, r24
    1078:	49 f4       	brne	.+18     	; 0x108c <E2_TEST+0x138>
    107a:	81 e0       	ldi	r24, 0x01	; 1
				{
					death = 0x01;
    107c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
    1080:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
					startGame = 0x00;
					stopScrollingTwo = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <stopScrollingTwo>
				}
				
				else if(enemyTwoPosition == 1)
    108a:	12 c0       	rjmp	.+36     	; 0x10b0 <E2_TEST+0x15c>
    108c:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <enemyTwoPosition>
    1090:	81 30       	cpi	r24, 0x01	; 1
				{
					LCD_Cursor(1);
    1092:	71 f4       	brne	.+28     	; 0x10b0 <E2_TEST+0x15c>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	d2 d8       	rcall	.-3676   	; 0x23c <LCD_Cursor>
					LCD_WriteData('_');
    1098:	8f e5       	ldi	r24, 0x5F	; 95
    109a:	77 d8       	rcall	.-3858   	; 0x18a <LCD_WriteData>
    109c:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <enemyTwoPosition>
					enemyTwoPosition = 0;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
					stopScrollingTwo = 1;
    10a2:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <stopScrollingTwo>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <E2_TEST+0x15c>
				}
			}
		break;
    10a8:	00 00       	nop
	{
		case E2_START:
		break;
		
		case E2_INIT:
		break;
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <E2_TEST+0x15e>
    10ac:	00 00       	nop
	}
	
	switch(E2_STATE)
	{
		case E2_START:
		break;
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <E2_TEST+0x15e>
    10b0:	00 00       	nop
					LCD_WriteData('_');
					enemyTwoPosition = 0;
					stopScrollingTwo = 1;
				}
			}
		break;
    10b2:	00 00       	nop
	}
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <E3_TEST>:
    10ba:	cf 93       	push	r28

enum E3_SM{E3_START, E3_INIT, E3_SCROLL} E3_STATE;

void E3_TEST()
{
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	switch(E3_STATE)
    10c2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <E3_STATE>
    10c6:	88 2f       	mov	r24, r24
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	49 f0       	breq	.+18     	; 0x10e2 <E3_TEST+0x28>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	91 05       	cpc	r25, r1
    10d4:	c1 f0       	breq	.+48     	; 0x1106 <E3_TEST+0x4c>
    10d6:	89 2b       	or	r24, r25
    10d8:	31 f5       	brne	.+76     	; 0x1126 <E3_TEST+0x6c>
	{
		case E3_START:
			E3_STATE = E3_INIT;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <E3_STATE>
		break;
    10e0:	24 c0       	rjmp	.+72     	; 0x112a <E3_TEST+0x70>
		
		case E3_INIT:
		if(enemyChosen == 3 && !death)
    10e2:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
    10e6:	83 30       	cpi	r24, 0x03	; 3
    10e8:	51 f4       	brne	.+20     	; 0x10fe <E3_TEST+0x44>
    10ea:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    10ee:	88 23       	and	r24, r24
    10f0:	31 f4       	brne	.+12     	; 0x10fe <E3_TEST+0x44>
		{
			stopScrollingThree = 0;
    10f2:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <stopScrollingThree>
			E3_STATE = E3_SCROLL;
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <E3_STATE>
		
		else
		{
			E3_STATE = E3_INIT;
		}
		break;
    10fc:	16 c0       	rjmp	.+44     	; 0x112a <E3_TEST+0x70>
			E3_STATE = E3_SCROLL;
		}
		
		else
		{
			E3_STATE = E3_INIT;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <E3_STATE>
		}
		break;
    1104:	12 c0       	rjmp	.+36     	; 0x112a <E3_TEST+0x70>
		
		case E3_SCROLL:
		if(stopScrollingThree && death)
    1106:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <stopScrollingThree>
    110a:	88 23       	and	r24, r24
    110c:	41 f0       	breq	.+16     	; 0x111e <E3_TEST+0x64>
    110e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    1112:	88 23       	and	r24, r24
    1114:	21 f0       	breq	.+8      	; 0x111e <E3_TEST+0x64>
		{
			E3_STATE= E3_INIT;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <E3_STATE>
		else
		{
			E3_STATE = E3_SCROLL;
			
		}
		break;
    111c:	06 c0       	rjmp	.+12     	; 0x112a <E3_TEST+0x70>
			E3_STATE= E3_INIT;
		}
		
		else
		{
			E3_STATE = E3_SCROLL;
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <E3_STATE>
			
		}
		break;
    1124:	02 c0       	rjmp	.+4      	; 0x112a <E3_TEST+0x70>
		
		default:
		E3_STATE = E3_START;
    1126:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <E3_STATE>
	}
	
	switch(E3_STATE)
    112a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <E3_STATE>
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <E3_TEST+0x80>
    1138:	6e c0       	rjmp	.+220    	; 0x1216 <E3_TEST+0x15c>
    113a:	02 97       	sbiw	r24, 0x02	; 2
    113c:	09 f0       	breq	.+2      	; 0x1140 <E3_TEST+0x86>
    113e:	6d c0       	rjmp	.+218    	; 0x121a <E3_TEST+0x160>
		
		case E3_INIT:
		break;
		
		case E3_SCROLL:
		if(enemyThreePosition > 17)
    1140:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    1144:	82 31       	cpi	r24, 0x12	; 18
    1146:	78 f1       	brcs	.+94     	; 0x11a6 <E3_TEST+0xec>
		{
			enemyThreePosition--;
    1148:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    114c:	81 50       	subi	r24, 0x01	; 1
    114e:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <enemyThreePosition>
			LCD_Cursor(enemyThreePosition);
    1152:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    1156:	72 d8       	rcall	.-3868   	; 0x23c <LCD_Cursor>
			LCD_WriteData('*');
    1158:	8a e2       	ldi	r24, 0x2A	; 42
    115a:	17 d8       	rcall	.-4050   	; 0x18a <LCD_WriteData>
			LCD_Cursor(enemyThreePosition+1);
    115c:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    1160:	8f 5f       	subi	r24, 0xFF	; 255
			LCD_WriteData('_');
    1162:	6c d8       	rcall	.-3880   	; 0x23c <LCD_Cursor>
    1164:	8f e5       	ldi	r24, 0x5F	; 95
    1166:	11 d8       	rcall	.-4062   	; 0x18a <LCD_WriteData>
			
			if((enemyThreePosition == avatarPosition))
    1168:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <enemyThreePosition>
    116c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    1170:	98 17       	cp	r25, r24
    1172:	49 f4       	brne	.+18     	; 0x1186 <E3_TEST+0xcc>
			{
				death = 0x01;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
				startGame = 0x00;
    117a:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
				stopScrollingThree = 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <stopScrollingThree>
				LCD_WriteData('_');
				enemyThreePosition = 0;
				stopScrollingThree = 1;
			}
		}
		break;
    1184:	4c c0       	rjmp	.+152    	; 0x121e <E3_TEST+0x164>
				death = 0x01;
				startGame = 0x00;
				stopScrollingThree = 1;
			}
			
			else if(enemyThreePosition == 17)
    1186:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    118a:	81 31       	cpi	r24, 0x11	; 17
    118c:	09 f0       	breq	.+2      	; 0x1190 <E3_TEST+0xd6>
			{
				LCD_Cursor(17);
    118e:	47 c0       	rjmp	.+142    	; 0x121e <E3_TEST+0x164>
    1190:	81 e1       	ldi	r24, 0x11	; 17
    1192:	54 d8       	rcall	.-3928   	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
    1194:	8f e5       	ldi	r24, 0x5F	; 95
    1196:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
				enemyThreePosition = 0;
    119a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <enemyThreePosition>
				stopScrollingThree = 1;
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <stopScrollingThree>
				LCD_WriteData('_');
				enemyThreePosition = 0;
				stopScrollingThree = 1;
			}
		}
		break;
    11a4:	3c c0       	rjmp	.+120    	; 0x121e <E3_TEST+0x164>
				enemyThreePosition = 0;
				stopScrollingThree = 1;
			}
		}
		
		else if(enemyThreePosition > 1 && enemyThreePosition < 17)
    11a6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	c0 f1       	brcs	.+112    	; 0x121e <E3_TEST+0x164>
    11ae:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11b2:	81 31       	cpi	r24, 0x11	; 17
    11b4:	a0 f5       	brcc	.+104    	; 0x121e <E3_TEST+0x164>
		{
			enemyThreePosition--;
    11b6:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11ba:	81 50       	subi	r24, 0x01	; 1
    11bc:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <enemyThreePosition>
			LCD_Cursor(enemyThreePosition);
    11c0:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11c4:	3b d8       	rcall	.-3978   	; 0x23c <LCD_Cursor>
			LCD_WriteData('*');
    11c6:	8a e2       	ldi	r24, 0x2A	; 42
    11c8:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			LCD_Cursor(enemyThreePosition+1);
    11cc:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11d0:	8f 5f       	subi	r24, 0xFF	; 255
    11d2:	34 d8       	rcall	.-3992   	; 0x23c <LCD_Cursor>
			LCD_WriteData('_');
    11d4:	8f e5       	ldi	r24, 0x5F	; 95
    11d6:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			
			if((enemyThreePosition == avatarPosition))
    11da:	90 91 f2 01 	lds	r25, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11de:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    11e2:	98 17       	cp	r25, r24
    11e4:	49 f4       	brne	.+18     	; 0x11f8 <E3_TEST+0x13e>
			{
				death = 0x01;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
				startGame = 0x00;
    11ec:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
				stopScrollingThree = 1;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <stopScrollingThree>
			}
			
			else if(enemyThreePosition == 1)
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <E3_TEST+0x164>
    11f8:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <enemyThreePosition>
    11fc:	81 30       	cpi	r24, 0x01	; 1
			{
				LCD_Cursor(1);
    11fe:	79 f4       	brne	.+30     	; 0x121e <E3_TEST+0x164>
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	1c d8       	rcall	.-4040   	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
    1204:	8f e5       	ldi	r24, 0x5F	; 95
    1206:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
				enemyThreePosition = 0;
    120a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <enemyThreePosition>
				stopScrollingThree = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <stopScrollingThree>
			}
		}
		break;
    1214:	04 c0       	rjmp	.+8      	; 0x121e <E3_TEST+0x164>
	{
		case E3_START:
		break;
		
		case E3_INIT:
		break;
    1216:	00 00       	nop
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <E3_TEST+0x166>
	}
	
	switch(E3_STATE)
	{
		case E3_START:
		break;
    121a:	00 00       	nop
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <E3_TEST+0x166>
				LCD_WriteData('_');
				enemyThreePosition = 0;
				stopScrollingThree = 1;
			}
		}
		break;
    121e:	00 00       	nop
	}
}
    1220:	00 00       	nop
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <E4_TEST>:

enum E4_SM{E4_START, E4_INIT, E4_SCROLL} E4_STATE;

void E4_TEST()
{
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	switch(E4_STATE)
    1230:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <E4_STATE>
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	49 f0       	breq	.+18     	; 0x1250 <E4_TEST+0x28>
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	c1 f0       	breq	.+48     	; 0x1274 <E4_TEST+0x4c>
    1244:	89 2b       	or	r24, r25
    1246:	31 f5       	brne	.+76     	; 0x1294 <E4_TEST+0x6c>
	{
		case E4_START:
			E4_STATE = E4_INIT;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <E4_STATE>
		break;
    124e:	24 c0       	rjmp	.+72     	; 0x1298 <E4_TEST+0x70>
		
		case E4_INIT:
		if(enemyChosen == 4 && !death)
    1250:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <enemyChosen>
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	51 f4       	brne	.+20     	; 0x126c <E4_TEST+0x44>
    1258:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    125c:	88 23       	and	r24, r24
    125e:	31 f4       	brne	.+12     	; 0x126c <E4_TEST+0x44>
		{
			stopScrollingFour = 0;
    1260:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <stopScrollingFour>
			E4_STATE = E4_SCROLL;
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <E4_STATE>
		
		else
		{
			E4_STATE = E4_INIT;
		}
		break;
    126a:	16 c0       	rjmp	.+44     	; 0x1298 <E4_TEST+0x70>
			E4_STATE = E4_SCROLL;
		}
		
		else
		{
			E4_STATE = E4_INIT;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <E4_STATE>
		}
		break;
    1272:	12 c0       	rjmp	.+36     	; 0x1298 <E4_TEST+0x70>
		
		case E4_SCROLL:
		if(stopScrollingFour && death)
    1274:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <stopScrollingFour>
    1278:	88 23       	and	r24, r24
    127a:	41 f0       	breq	.+16     	; 0x128c <E4_TEST+0x64>
    127c:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    1280:	88 23       	and	r24, r24
    1282:	21 f0       	breq	.+8      	; 0x128c <E4_TEST+0x64>
		{
			E4_STATE= E4_INIT;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <E4_STATE>
		else
		{
			E4_STATE = E4_SCROLL;
			
		}
		break;
    128a:	06 c0       	rjmp	.+12     	; 0x1298 <E4_TEST+0x70>
			E4_STATE= E4_INIT;
		}
		
		else
		{
			E4_STATE = E4_SCROLL;
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <E4_STATE>
			
		}
		break;
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <E4_TEST+0x70>
		
		default:
		E4_STATE = E4_START;
    1294:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <E4_STATE>
	}
	
	switch(E4_STATE)
    1298:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <E4_STATE>
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <E4_TEST+0x80>
    12a6:	76 c0       	rjmp	.+236    	; 0x1394 <E4_TEST+0x16c>
    12a8:	02 97       	sbiw	r24, 0x02	; 2
    12aa:	09 f0       	breq	.+2      	; 0x12ae <E4_TEST+0x86>
    12ac:	75 c0       	rjmp	.+234    	; 0x1398 <E4_TEST+0x170>
		
		case E4_INIT:
		break;
		
		case E4_SCROLL:
		if(enemyFourPosition > 17)
    12ae:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    12b2:	82 31       	cpi	r24, 0x12	; 18
    12b4:	a0 f1       	brcs	.+104    	; 0x131e <E4_TEST+0xf6>
		{
			enemyFourPosition--;
    12b6:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    12ba:	81 50       	subi	r24, 0x01	; 1
    12bc:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <enemyFourPosition>
			LCD_Cursor(enemyFourPosition);
    12c0:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    12c4:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
			LCD_WriteData('*');
    12c8:	8a e2       	ldi	r24, 0x2A	; 42
    12ca:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			LCD_Cursor(enemyFourPosition+1);
    12ce:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
    12d4:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
			LCD_WriteData('_');
    12d8:	8f e5       	ldi	r24, 0x5F	; 95
    12da:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			
			if((enemyFourPosition == avatarPosition))
    12de:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <enemyFourPosition>
    12e2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    12e6:	98 17       	cp	r25, r24
    12e8:	49 f4       	brne	.+18     	; 0x12fc <E4_TEST+0xd4>
			{
				death = 0x01;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
				startGame = 0x00;
    12f0:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
				stopScrollingFour = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <stopScrollingFour>
				enemyFourPosition = 0;
				stopScrollingFour = 1;
			}
		}
		
		break;
    12fa:	50 c0       	rjmp	.+160    	; 0x139c <E4_TEST+0x174>
				death = 0x01;
				startGame = 0x00;
				stopScrollingFour = 1;
			}
			
			else if(enemyFourPosition == 17)
    12fc:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    1300:	81 31       	cpi	r24, 0x11	; 17
    1302:	09 f0       	breq	.+2      	; 0x1306 <E4_TEST+0xde>
    1304:	4b c0       	rjmp	.+150    	; 0x139c <E4_TEST+0x174>
			{
				LCD_Cursor(17);
    1306:	81 e1       	ldi	r24, 0x11	; 17
    1308:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
    130c:	8f e5       	ldi	r24, 0x5F	; 95
    130e:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
				enemyFourPosition = 0;
    1312:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <enemyFourPosition>
				stopScrollingFour = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <stopScrollingFour>
				enemyFourPosition = 0;
				stopScrollingFour = 1;
			}
		}
		
		break;
    131c:	3f c0       	rjmp	.+126    	; 0x139c <E4_TEST+0x174>
				enemyFourPosition = 0;
				stopScrollingFour = 1;
			}
		}
		
		else if(enemyFourPosition > 1 && enemyFourPosition < 17)
    131e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	d8 f1       	brcs	.+118    	; 0x139c <E4_TEST+0x174>
    1326:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    132a:	81 31       	cpi	r24, 0x11	; 17
    132c:	b8 f5       	brcc	.+110    	; 0x139c <E4_TEST+0x174>
		{
			enemyFourPosition--;
    132e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    1332:	81 50       	subi	r24, 0x01	; 1
    1334:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <enemyFourPosition>
			LCD_Cursor(enemyFourPosition);
    1338:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    133c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
			LCD_WriteData('*');
    1340:	8a e2       	ldi	r24, 0x2A	; 42
    1342:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			LCD_Cursor(enemyFourPosition+1);
    1346:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
			LCD_WriteData('_');
    1350:	8f e5       	ldi	r24, 0x5F	; 95
    1352:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
			
			if((enemyFourPosition == avatarPosition))
    1356:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <enemyFourPosition>
    135a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <avatarPosition>
    135e:	98 17       	cp	r25, r24
    1360:	49 f4       	brne	.+18     	; 0x1374 <E4_TEST+0x14c>
			{
				death = 0x01;
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <death>
				startGame = 0x00;
    1368:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <startGame>
				stopScrollingFour = 1;
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <stopScrollingFour>
				enemyFourPosition = 0;
				stopScrollingFour = 1;
			}
		}
		
		break;
    1372:	14 c0       	rjmp	.+40     	; 0x139c <E4_TEST+0x174>
				death = 0x01;
				startGame = 0x00;
				stopScrollingFour = 1;
			}
			
			else if(enemyFourPosition == 1)
    1374:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <enemyFourPosition>
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	81 f4       	brne	.+32     	; 0x139c <E4_TEST+0x174>
			{
				LCD_Cursor(1);
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
				LCD_WriteData('_');
    1382:	8f e5       	ldi	r24, 0x5F	; 95
    1384:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
				enemyFourPosition = 0;
    1388:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <enemyFourPosition>
				stopScrollingFour = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <stopScrollingFour>
			}
		}
		
		break;
    1392:	04 c0       	rjmp	.+8      	; 0x139c <E4_TEST+0x174>
	{
		case E4_START:
		break;
		
		case E4_INIT:
		break;
    1394:	00 00       	nop
    1396:	03 c0       	rjmp	.+6      	; 0x139e <E4_TEST+0x176>
	}
	
	switch(E4_STATE)
	{
		case E4_START:
		break;
    1398:	00 00       	nop
    139a:	01 c0       	rjmp	.+2      	; 0x139e <E4_TEST+0x176>
				enemyFourPosition = 0;
				stopScrollingFour = 1;
			}
		}
		
		break;
    139c:	00 00       	nop
	}
}
    139e:	00 00       	nop
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	08 95       	ret

000013a6 <POINTS_TEST>:

enum POINTS_SM{POINTS_START, POINTS_INIT, POINTS_INCREMENT, POINTS_NOTHING} POINTS_STATE;

void POINTS_TEST()
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
	switch(POINTS_STATE)
    13ae:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <POINTS_STATE>
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	81 f0       	breq	.+32     	; 0x13dc <POINTS_TEST+0x36>
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	91 05       	cpc	r25, r1
    13c0:	1c f4       	brge	.+6      	; 0x13c8 <POINTS_TEST+0x22>
    13c2:	89 2b       	or	r24, r25
    13c4:	39 f0       	breq	.+14     	; 0x13d4 <POINTS_TEST+0x2e>
    13c6:	2a c0       	rjmp	.+84     	; 0x141c <POINTS_TEST+0x76>
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	91 05       	cpc	r25, r1
    13cc:	b9 f0       	breq	.+46     	; 0x13fc <POINTS_TEST+0x56>
    13ce:	03 97       	sbiw	r24, 0x03	; 3
    13d0:	09 f1       	breq	.+66     	; 0x1414 <POINTS_TEST+0x6e>
    13d2:	24 c0       	rjmp	.+72     	; 0x141c <POINTS_TEST+0x76>
	{
		case POINTS_START:
		POINTS_STATE = POINTS_INIT;
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
		break;
    13da:	23 c0       	rjmp	.+70     	; 0x1422 <POINTS_TEST+0x7c>
		
		case POINTS_INIT:
			if(!death && startGame)
    13dc:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    13e0:	88 23       	and	r24, r24
    13e2:	41 f4       	brne	.+16     	; 0x13f4 <POINTS_TEST+0x4e>
    13e4:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <startGame>
    13e8:	88 23       	and	r24, r24
    13ea:	21 f0       	breq	.+8      	; 0x13f4 <POINTS_TEST+0x4e>
			{
				POINTS_STATE = POINTS_INCREMENT;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
			}
			else
			{
				POINTS_STATE = POINTS_NOTHING;
			}
		break;
    13f2:	17 c0       	rjmp	.+46     	; 0x1422 <POINTS_TEST+0x7c>
			{
				POINTS_STATE = POINTS_INCREMENT;
			}
			else
			{
				POINTS_STATE = POINTS_NOTHING;
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
			}
		break;
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <POINTS_TEST+0x7c>
		
		
		
		case POINTS_INCREMENT:
		if(death)
    13fc:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    1400:	88 23       	and	r24, r24
    1402:	21 f0       	breq	.+8      	; 0x140c <POINTS_TEST+0x66>
		{
			
			POINTS_STATE = POINTS_NOTHING;
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
		
		else
		{
			POINTS_STATE = POINTS_INCREMENT;
		}
		break;
    140a:	0b c0       	rjmp	.+22     	; 0x1422 <POINTS_TEST+0x7c>
			POINTS_STATE = POINTS_NOTHING;
		}
		
		else
		{
			POINTS_STATE = POINTS_INCREMENT;
    140c:	82 e0       	ldi	r24, 0x02	; 2
    140e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
		}
		break;
    1412:	07 c0       	rjmp	.+14     	; 0x1422 <POINTS_TEST+0x7c>
		
		case POINTS_NOTHING:
			POINTS_STATE = POINTS_INIT;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
		break;
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <POINTS_TEST+0x7c>
		
		
		default:
		POINTS_STATE = POINTS_INCREMENT;
    141c:	82 e0       	ldi	r24, 0x02	; 2
    141e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <POINTS_STATE>
	}
	
	switch(POINTS_STATE)
    1422:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <POINTS_STATE>
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	91 05       	cpc	r25, r1
    142e:	d1 f0       	breq	.+52     	; 0x1464 <POINTS_TEST+0xbe>
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	91 05       	cpc	r25, r1
    1434:	cc f0       	brlt	.+50     	; 0x1468 <POINTS_TEST+0xc2>
    1436:	02 97       	sbiw	r24, 0x02	; 2
    1438:	c9 f4       	brne	.+50     	; 0x146c <POINTS_TEST+0xc6>
		
		case POINTS_INIT:
		break;
		
		case POINTS_INCREMENT:
		if(playerPoints == 100)
    143a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    143e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    1442:	84 36       	cpi	r24, 0x64	; 100
    1444:	91 05       	cpc	r25, r1
    1446:	21 f4       	brne	.+8      	; 0x1450 <POINTS_TEST+0xaa>
		{
			winFlag = 0x01;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <winFlag>
		{
			playerPoints++;
		}
		
		
		break;
    144e:	0f c0       	rjmp	.+30     	; 0x146e <POINTS_TEST+0xc8>
			winFlag = 0x01;
		}
		
		else
		{
			playerPoints++;
    1450:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    1454:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <playerPoints+0x1>
    145e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <playerPoints>
		}
		
		
		break;
    1462:	05 c0       	rjmp	.+10     	; 0x146e <POINTS_TEST+0xc8>
	{
		case POINTS_START:
		break;
		
		case POINTS_INIT:
		break;
    1464:	00 00       	nop
    1466:	03 c0       	rjmp	.+6      	; 0x146e <POINTS_TEST+0xc8>
	}
	
	switch(POINTS_STATE)
	{
		case POINTS_START:
		break;
    1468:	00 00       	nop
    146a:	01 c0       	rjmp	.+2      	; 0x146e <POINTS_TEST+0xc8>
		
		
		break;
		
		case POINTS_NOTHING:
		break;
    146c:	00 00       	nop
	}
}
    146e:	00 00       	nop
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <DEATH_TEST>:

enum DEATH_SM{DEATH_START, DEATH_INIT, DEATH_DISPLAY, DEATH_PAUSE, DEATH_SAVE} DEATH_STATE;
	
void DEATH_TEST()
{
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	2b 97       	sbiw	r28, 0x0b	; 11
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char pointPosition = 0x00;
    148a:	19 82       	std	Y+1, r1	; 0x01
	unsigned char sizeArray = 0x00;
    148c:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char newSlot = 0x00;
    148e:	1b 82       	std	Y+3, r1	; 0x03
	char str[3];
	
	switch(DEATH_STATE)
    1490:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <DEATH_STATE>
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	91 05       	cpc	r25, r1
    149c:	11 f1       	breq	.+68     	; 0x14e2 <DEATH_TEST+0x6c>
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	2c f4       	brge	.+10     	; 0x14ae <DEATH_TEST+0x38>
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	49 f0       	breq	.+18     	; 0x14ba <DEATH_TEST+0x44>
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	59 f0       	breq	.+22     	; 0x14c2 <DEATH_TEST+0x4c>
    14ac:	36 c0       	rjmp	.+108    	; 0x151a <DEATH_TEST+0xa4>
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	d9 f0       	breq	.+54     	; 0x14ea <DEATH_TEST+0x74>
    14b4:	04 97       	sbiw	r24, 0x04	; 4
    14b6:	69 f1       	breq	.+90     	; 0x1512 <DEATH_TEST+0x9c>
    14b8:	30 c0       	rjmp	.+96     	; 0x151a <DEATH_TEST+0xa4>
	{
		case DEATH_START:
			DEATH_STATE = DEATH_INIT;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
		break;
    14c0:	2e c0       	rjmp	.+92     	; 0x151e <DEATH_TEST+0xa8>
		
		case DEATH_INIT:
			if(death && timePassed == 0)
    14c2:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    14c6:	88 23       	and	r24, r24
    14c8:	41 f0       	breq	.+16     	; 0x14da <DEATH_TEST+0x64>
    14ca:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timePassed>
    14ce:	88 23       	and	r24, r24
    14d0:	21 f4       	brne	.+8      	; 0x14da <DEATH_TEST+0x64>
			{
				DEATH_STATE = DEATH_DISPLAY;
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
			else
			{
				DEATH_STATE = DEATH_INIT;
			}
			
		break;
    14d8:	22 c0       	rjmp	.+68     	; 0x151e <DEATH_TEST+0xa8>
				DEATH_STATE = DEATH_DISPLAY;
			}
		
			else
			{
				DEATH_STATE = DEATH_INIT;
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
			}
			
		break;
    14e0:	1e c0       	rjmp	.+60     	; 0x151e <DEATH_TEST+0xa8>
		
		case DEATH_DISPLAY:
			DEATH_STATE = DEATH_SAVE;
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
		break;
    14e8:	1a c0       	rjmp	.+52     	; 0x151e <DEATH_TEST+0xa8>
		
		case DEATH_PAUSE:
		if(timePassed == 20)
    14ea:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timePassed>
    14ee:	84 31       	cpi	r24, 0x14	; 20
    14f0:	39 f4       	brne	.+14     	; 0x1500 <DEATH_TEST+0x8a>
		{
			stallFlag = 0x01;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <stallFlag>
			DEATH_STATE = DEATH_INIT;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
		else
		{
			timePassed++;
			DEATH_STATE = DEATH_PAUSE;
		}
		break;
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <DEATH_TEST+0xa8>
			stallFlag = 0x01;
			DEATH_STATE = DEATH_INIT;
		}
		else
		{
			timePassed++;
    1500:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <timePassed>
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <timePassed>
			DEATH_STATE = DEATH_PAUSE;
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
		}
		break;
    1510:	06 c0       	rjmp	.+12     	; 0x151e <DEATH_TEST+0xa8>
		
		case DEATH_SAVE:
			DEATH_STATE = DEATH_PAUSE;
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <DEATH_STATE>
		break;
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DEATH_TEST+0xa8>
		
		default:
			DEATH_STATE = DEATH_START;
    151a:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <DEATH_STATE>
	}
	
	switch(DEATH_STATE)
    151e:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <DEATH_STATE>
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	91 05       	cpc	r25, r1
    152a:	61 f0       	breq	.+24     	; 0x1544 <DEATH_TEST+0xce>
    152c:	83 30       	cpi	r24, 0x03	; 3
    152e:	91 05       	cpc	r25, r1
    1530:	0c f4       	brge	.+2      	; 0x1534 <DEATH_TEST+0xbe>
    1532:	7c c0       	rjmp	.+248    	; 0x162c <DEATH_TEST+0x1b6>
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <DEATH_TEST+0xc6>
    153a:	7a c0       	rjmp	.+244    	; 0x1630 <DEATH_TEST+0x1ba>
    153c:	04 97       	sbiw	r24, 0x04	; 4
    153e:	09 f4       	brne	.+2      	; 0x1542 <DEATH_TEST+0xcc>
    1540:	56 c0       	rjmp	.+172    	; 0x15ee <DEATH_TEST+0x178>
			EEPROM_write(newPos, tempVal);
		break;
		
		
	}
}
    1542:	77 c0       	rjmp	.+238    	; 0x1632 <DEATH_TEST+0x1bc>
		
		case DEATH_INIT:
		break;
		
		case DEATH_DISPLAY:
			pointPosition = 30;
    1544:	8e e1       	ldi	r24, 0x1E	; 30
    1546:	89 83       	std	Y+1, r24	; 0x01
			if (playerPoints > 0 && playerPoints < 10)
    1548:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    154c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    1550:	18 16       	cp	r1, r24
    1552:	19 06       	cpc	r1, r25
    1554:	4c f4       	brge	.+18     	; 0x1568 <DEATH_TEST+0xf2>
    1556:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    155a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    155e:	0a 97       	sbiw	r24, 0x0a	; 10
    1560:	1c f4       	brge	.+6      	; 0x1568 <DEATH_TEST+0xf2>
			{
				sizeArray = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	19 c0       	rjmp	.+50     	; 0x159a <DEATH_TEST+0x124>
			}
			
			else if (playerPoints > 9 && playerPoints < 100)
    1568:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    156c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    1570:	0a 97       	sbiw	r24, 0x0a	; 10
    1572:	54 f0       	brlt	.+20     	; 0x1588 <DEATH_TEST+0x112>
    1574:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    1578:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    157c:	84 36       	cpi	r24, 0x64	; 100
    157e:	91 05       	cpc	r25, r1
    1580:	1c f4       	brge	.+6      	; 0x1588 <DEATH_TEST+0x112>
			{
				sizeArray = 2;
    1582:	82 e0       	ldi	r24, 0x02	; 2
    1584:	8a 83       	std	Y+2, r24	; 0x02
    1586:	09 c0       	rjmp	.+18     	; 0x159a <DEATH_TEST+0x124>
			}
			
			else if (playerPoints >= 100)
    1588:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    158c:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    1590:	84 36       	cpi	r24, 0x64	; 100
    1592:	91 05       	cpc	r25, r1
    1594:	14 f0       	brlt	.+4      	; 0x159a <DEATH_TEST+0x124>
			{
				sizeArray = 3;
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	8a 83       	std	Y+2, r24	; 0x02
			}
			
			LCD_DisplayString(1,"   GAME  OVER    YOUR SCORE = ");		
    159a:	6e e7       	ldi	r22, 0x7E	; 126
    159c:	71 e0       	ldi	r23, 0x01	; 1
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_DisplayString>
			tostring(str, playerPoints);	
    15a4:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <playerPoints>
    15a8:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    15ac:	ce 01       	movw	r24, r28
    15ae:	09 96       	adiw	r24, 0x09	; 9
    15b0:	b9 01       	movw	r22, r18
    15b2:	0e 94 c6 02 	call	0x58c	; 0x58c <tostring>
			for(unsigned char i = 0; i < sizeArray; ++i)
    15b6:	1c 82       	std	Y+4, r1	; 0x04
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <DEATH_TEST+0x16e>
			{	
				LCD_Cursor(pointPosition);
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	0e 94 1e 01 	call	0x23c	; 0x23c <LCD_Cursor>
				LCD_WriteData(str[i]);
    15c0:	8c 81       	ldd	r24, Y+4	; 0x04
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9e 01       	movw	r18, r28
    15c8:	27 5f       	subi	r18, 0xF7	; 247
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	82 0f       	add	r24, r18
    15ce:	93 1f       	adc	r25, r19
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_WriteData>
				pointPosition++;
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
				sizeArray = 3;
			}
			
			LCD_DisplayString(1,"   GAME  OVER    YOUR SCORE = ");		
			tostring(str, playerPoints);	
			for(unsigned char i = 0; i < sizeArray; ++i)
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	8f 5f       	subi	r24, 0xFF	; 255
    15e2:	8c 83       	std	Y+4, r24	; 0x04
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	98 17       	cp	r25, r24
    15ea:	38 f3       	brcs	.-50     	; 0x15ba <DEATH_TEST+0x144>
				LCD_Cursor(pointPosition);
				LCD_WriteData(str[i]);
				pointPosition++;
			}
			
		break;
    15ec:	22 c0       	rjmp	.+68     	; 0x1632 <DEATH_TEST+0x1bc>
		case DEATH_PAUSE:
			
		break;
		
		case DEATH_SAVE:
			for (unsigned char j = 0x00; EEPROM_read(j) != 0xFF; j++ )
    15ee:	1d 82       	std	Y+5, r1	; 0x05
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <DEATH_TEST+0x188>
			{
				newSlot++;
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	8f 5f       	subi	r24, 0xFF	; 255
    15f6:	8b 83       	std	Y+3, r24	; 0x03
		case DEATH_PAUSE:
			
		break;
		
		case DEATH_SAVE:
			for (unsigned char j = 0x00; EEPROM_read(j) != 0xFF; j++ )
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	8f 5f       	subi	r24, 0xFF	; 255
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 9b 02 	call	0x536	; 0x536 <EEPROM_read>
    1608:	8f 3f       	cpi	r24, 0xFF	; 255
    160a:	99 f7       	brne	.-26     	; 0x15f2 <DEATH_TEST+0x17c>
			{
				newSlot++;
			}
			unsigned int newPos = (unsigned int) newSlot;
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9f 83       	std	Y+7, r25	; 0x07
    1614:	8e 83       	std	Y+6, r24	; 0x06
			unsigned char tempVal = (unsigned char) playerPoints;
    1616:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <playerPoints>
    161a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <playerPoints+0x1>
    161e:	88 87       	std	Y+8, r24	; 0x08
			EEPROM_write(newPos, tempVal);
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	68 85       	ldd	r22, Y+8	; 0x08
    1626:	0e 94 62 02 	call	0x4c4	; 0x4c4 <EEPROM_write>
		break;
    162a:	03 c0       	rjmp	.+6      	; 0x1632 <DEATH_TEST+0x1bc>
	}
	
	switch(DEATH_STATE)
	{
		case DEATH_START:
		break;
    162c:	00 00       	nop
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <DEATH_TEST+0x1bc>
			
		break;
		
		case DEATH_PAUSE:
			
		break;
    1630:	00 00       	nop
			EEPROM_write(newPos, tempVal);
		break;
		
		
	}
}
    1632:	00 00       	nop
    1634:	2b 96       	adiw	r28, 0x0b	; 11
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	08 95       	ret

00001646 <RESTART_TEST>:

enum RESTART_SM{RESTART_START, RESTART_INIT, RESTART_DISPLAY, RESTART_PAUSE, RESTART_ONEMORE, RESTART_PAUSE_TWO} RESTART_STATE;

void RESTART_TEST()
{
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	00 d0       	rcall	.+0      	; 0x164c <RESTART_TEST+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <RESTART_TEST+0x8>
    164e:	1f 92       	push	r1
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	int highScore =0x00;
    1654:	1a 82       	std	Y+2, r1	; 0x02
    1656:	19 82       	std	Y+1, r1	; 0x01
	char str[3];
	
	switch(RESTART_STATE)
    1658:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <RESTART_STATE>
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	91 05       	cpc	r25, r1
    1664:	29 f1       	breq	.+74     	; 0x16b0 <RESTART_TEST+0x6a>
    1666:	83 30       	cpi	r24, 0x03	; 3
    1668:	91 05       	cpc	r25, r1
    166a:	2c f4       	brge	.+10     	; 0x1676 <RESTART_TEST+0x30>
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	61 f0       	breq	.+24     	; 0x1688 <RESTART_TEST+0x42>
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	71 f0       	breq	.+28     	; 0x1690 <RESTART_TEST+0x4a>
    1674:	54 c0       	rjmp	.+168    	; 0x171e <RESTART_TEST+0xd8>
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	91 05       	cpc	r25, r1
    167a:	79 f1       	breq	.+94     	; 0x16da <RESTART_TEST+0x94>
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	91 05       	cpc	r25, r1
    1680:	dc f0       	brlt	.+54     	; 0x16b8 <RESTART_TEST+0x72>
    1682:	05 97       	sbiw	r24, 0x05	; 5
    1684:	71 f1       	breq	.+92     	; 0x16e2 <RESTART_TEST+0x9c>
    1686:	4b c0       	rjmp	.+150    	; 0x171e <RESTART_TEST+0xd8>
	{
		case RESTART_START:
			RESTART_STATE = RESTART_INIT;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
		break;
    168e:	49 c0       	rjmp	.+146    	; 0x1722 <RESTART_TEST+0xdc>
		
		case RESTART_INIT:
			if(death && stallFlag)
    1690:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <death>
    1694:	88 23       	and	r24, r24
    1696:	41 f0       	breq	.+16     	; 0x16a8 <RESTART_TEST+0x62>
    1698:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <stallFlag>
    169c:	88 23       	and	r24, r24
    169e:	21 f0       	breq	.+8      	; 0x16a8 <RESTART_TEST+0x62>
			{
				RESTART_STATE = RESTART_DISPLAY;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
			
			else
			{
				RESTART_STATE = RESTART_INIT;
			}
		break;
    16a6:	3d c0       	rjmp	.+122    	; 0x1722 <RESTART_TEST+0xdc>
				RESTART_STATE = RESTART_DISPLAY;
			}
			
			else
			{
				RESTART_STATE = RESTART_INIT;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
			}
		break;
    16ae:	39 c0       	rjmp	.+114    	; 0x1722 <RESTART_TEST+0xdc>
		
		case RESTART_DISPLAY:
			RESTART_STATE = RESTART_PAUSE;
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
		break;
    16b6:	35 c0       	rjmp	.+106    	; 0x1722 <RESTART_TEST+0xdc>
		
		case RESTART_PAUSE:
			if(stallFlagTwo == 20)
    16b8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <stallFlagTwo>
    16bc:	84 31       	cpi	r24, 0x14	; 20
    16be:	21 f4       	brne	.+8      	; 0x16c8 <RESTART_TEST+0x82>
			{
				 RESTART_STATE = RESTART_ONEMORE;
    16c0:	84 e0       	ldi	r24, 0x04	; 4
    16c2:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
			else
			{
				stallFlagTwo++;
				RESTART_STATE = RESTART_PAUSE;
			}
		break;
    16c6:	2d c0       	rjmp	.+90     	; 0x1722 <RESTART_TEST+0xdc>
				 RESTART_STATE = RESTART_ONEMORE;
			}
			
			else
			{
				stallFlagTwo++;
    16c8:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <stallFlagTwo>
    16cc:	8f 5f       	subi	r24, 0xFF	; 255
    16ce:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <stallFlagTwo>
				RESTART_STATE = RESTART_PAUSE;
    16d2:	83 e0       	ldi	r24, 0x03	; 3
    16d4:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
			}
		break;
    16d8:	24 c0       	rjmp	.+72     	; 0x1722 <RESTART_TEST+0xdc>
		
		case RESTART_ONEMORE:
				RESTART_STATE = RESTART_PAUSE_TWO;
    16da:	85 e0       	ldi	r24, 0x05	; 5
    16dc:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
		break;
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <RESTART_TEST+0xdc>
		
		case RESTART_PAUSE_TWO:
			buttonPress =  ~PINB & 0x01;
    16e2:	83 e2       	ldi	r24, 0x23	; 35
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	fc 01       	movw	r30, r24
    16e8:	80 81       	ld	r24, Z
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	81 70       	andi	r24, 0x01	; 1
    16f0:	99 27       	eor	r25, r25
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	89 2b       	or	r24, r25
    16f6:	09 f0       	breq	.+2      	; 0x16fa <RESTART_TEST+0xb4>
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	82 2f       	mov	r24, r18
    16fc:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <buttonPress>
			if(buttonPress)
    1700:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <buttonPress>
    1704:	88 23       	and	r24, r24
    1706:	39 f0       	breq	.+14     	; 0x1716 <RESTART_TEST+0xd0>
			{
				restartFlag = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <restartFlag>
				RESTART_STATE = RESTART_INIT;
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
		
			else
			{
				RESTART_STATE = RESTART_PAUSE_TWO;
			}
		break;
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <RESTART_TEST+0xdc>
				RESTART_STATE = RESTART_INIT;
			}
		
			else
			{
				RESTART_STATE = RESTART_PAUSE_TWO;
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <RESTART_STATE>
			}
		break;
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <RESTART_TEST+0xdc>
		
		default:
			RESTART_STATE = RESTART_START;	
    171e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <RESTART_STATE>
	}
	
	switch(RESTART_STATE)
    1722:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <RESTART_STATE>
    1726:	88 2f       	mov	r24, r24
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	91 05       	cpc	r25, r1
    172e:	31 f0       	breq	.+12     	; 0x173c <RESTART_TEST+0xf6>
    1730:	83 30       	cpi	r24, 0x03	; 3
    1732:	91 05       	cpc	r25, r1
    1734:	f4 f0       	brlt	.+60     	; 0x1772 <RESTART_TEST+0x12c>
    1736:	04 97       	sbiw	r24, 0x04	; 4
    1738:	b1 f0       	breq	.+44     	; 0x1766 <RESTART_TEST+0x120>
			
		break;
		
		case RESTART_PAUSE:
			
		break;
    173a:	1c c0       	rjmp	.+56     	; 0x1774 <RESTART_TEST+0x12e>
// 				
// 			}
			
// 			unsigned int highScore = (unsigned int) largestVal; 
// 			
			highScore = (int) EEPROM_read(0x03);
    173c:	83 e0       	ldi	r24, 0x03	; 3
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 9b 02 	call	0x536	; 0x536 <EEPROM_read>
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
			LCD_DisplayString(1,"   GAME  OVER    HIGH SCORE =100");
    174c:	6d e9       	ldi	r22, 0x9D	; 157
    174e:	71 e0       	ldi	r23, 0x01	; 1
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_DisplayString>
			tostring(str, highScore);
    1756:	29 81       	ldd	r18, Y+1	; 0x01
    1758:	3a 81       	ldd	r19, Y+2	; 0x02
    175a:	ce 01       	movw	r24, r28
    175c:	03 96       	adiw	r24, 0x03	; 3
    175e:	b9 01       	movw	r22, r18
    1760:	0e 94 c6 02 	call	0x58c	; 0x58c <tostring>
			
			
		break;
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <RESTART_TEST+0x12e>
		case RESTART_PAUSE:
			
		break;
		
		case RESTART_ONEMORE:
				LCD_DisplayString(1," PRESS START TO     RESTART     ");
    1766:	6e eb       	ldi	r22, 0xBE	; 190
    1768:	71 e0       	ldi	r23, 0x01	; 1
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_DisplayString>
		break;
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <RESTART_TEST+0x12e>
	}
	
	switch(RESTART_STATE)
	{
		case RESTART_START:
		break;
    1772:	00 00       	nop
		break;
		
		case RESTART_PAUSE_TWO:
		break;
	}
}
    1774:	00 00       	nop
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <main>:


int main(void)
{
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
    178e:	6c 97       	sbiw	r28, 0x1c	; 28
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    DDRD = 0xFF; PORTD = 0x00; // LCD data lines
    179a:	8a e2       	ldi	r24, 0x2A	; 42
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	2f ef       	ldi	r18, 0xFF	; 255
    17a0:	fc 01       	movw	r30, r24
    17a2:	20 83       	st	Z, r18
    17a4:	8b e2       	ldi	r24, 0x2B	; 43
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	fc 01       	movw	r30, r24
    17aa:	10 82       	st	Z, r1
    DDRA = 0xFF; PORTA = 0x00; // LCD control lines
    17ac:	81 e2       	ldi	r24, 0x21	; 33
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	2f ef       	ldi	r18, 0xFF	; 255
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
    17b6:	82 e2       	ldi	r24, 0x22	; 34
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	fc 01       	movw	r30, r24
    17bc:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
    17be:	87 e2       	ldi	r24, 0x27	; 39
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	2f ef       	ldi	r18, 0xFF	; 255
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
    17c8:	88 e2       	ldi	r24, 0x28	; 40
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	fc 01       	movw	r30, r24
    17ce:	10 82       	st	Z, r1
	DDRB = 0x00; PORTB = 0xFF;
    17d0:	84 e2       	ldi	r24, 0x24	; 36
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	fc 01       	movw	r30, r24
    17d6:	10 82       	st	Z, r1
    17d8:	85 e2       	ldi	r24, 0x25	; 37
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	2f ef       	ldi	r18, 0xFF	; 255
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
	 
	unsigned short timerKeptOne  = 0x00;
    17e2:	1a 82       	std	Y+2, r1	; 0x02
    17e4:	19 82       	std	Y+1, r1	; 0x01
	unsigned short timerKeptTwo  = 0x00;
    17e6:	1c 82       	std	Y+4, r1	; 0x04
    17e8:	1b 82       	std	Y+3, r1	; 0x03
	unsigned short timerKeptThree  = 0x00;
    17ea:	1e 82       	std	Y+6, r1	; 0x06
    17ec:	1d 82       	std	Y+5, r1	; 0x05
	unsigned short timerKeptFour  = 0x00;	
    17ee:	18 86       	std	Y+8, r1	; 0x08
    17f0:	1f 82       	std	Y+7, r1	; 0x07
	unsigned short timerKeptFive  = 0x00;
    17f2:	1a 86       	std	Y+10, r1	; 0x0a
    17f4:	19 86       	std	Y+9, r1	; 0x09
	unsigned short timerKeptSix  = 0x00;
    17f6:	1c 86       	std	Y+12, r1	; 0x0c
    17f8:	1b 86       	std	Y+11, r1	; 0x0b
	unsigned short timerKeptSev  = 0x00;
    17fa:	1e 86       	std	Y+14, r1	; 0x0e
    17fc:	1d 86       	std	Y+13, r1	; 0x0d
	unsigned short timerKeptEigh  = 0x00;
    17fe:	18 8a       	std	Y+16, r1	; 0x10
    1800:	1f 86       	std	Y+15, r1	; 0x0f
	unsigned short timerKeptNine  = 0x00;
    1802:	1a 8a       	std	Y+18, r1	; 0x12
    1804:	19 8a       	std	Y+17, r1	; 0x11
	unsigned short timerKeptTen  = 0x00;
    1806:	1c 8a       	std	Y+20, r1	; 0x14
    1808:	1b 8a       	std	Y+19, r1	; 0x13
	unsigned short timerKeptEle  = 0x00;
    180a:	1e 8a       	std	Y+22, r1	; 0x16
    180c:	1d 8a       	std	Y+21, r1	; 0x15
	unsigned short timerKeptTwe  = 0x00;
    180e:	18 8e       	std	Y+24, r1	; 0x18
    1810:	1f 8a       	std	Y+23, r1	; 0x17
	unsigned short timerKeptThi  = 0x00;
    1812:	1a 8e       	std	Y+26, r1	; 0x1a
    1814:	19 8e       	std	Y+25, r1	; 0x19
	unsigned short timerKeptFou  = 0x00;
    1816:	1c 8e       	std	Y+28, r1	; 0x1c
    1818:	1b 8e       	std	Y+27, r1	; 0x1b
	
	LCD_CustomChar(1, customCharOne);
    181a:	6e e5       	ldi	r22, 0x5E	; 94
    181c:	71 e0       	ldi	r23, 0x01	; 1
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 33 01 	call	0x266	; 0x266 <LCD_CustomChar>
	LCD_CustomChar(2, customCharTwo);
    1824:	66 e6       	ldi	r22, 0x66	; 102
    1826:	71 e0       	ldi	r23, 0x01	; 1
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	0e 94 33 01 	call	0x266	; 0x266 <LCD_CustomChar>
	LCD_CustomChar(3, customCharThree);
    182e:	6e e6       	ldi	r22, 0x6E	; 110
    1830:	71 e0       	ldi	r23, 0x01	; 1
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	0e 94 33 01 	call	0x266	; 0x266 <LCD_CustomChar>
	LCD_CustomChar(4, customCharFour);
    1838:	66 e7       	ldi	r22, 0x76	; 118
    183a:	71 e0       	ldi	r23, 0x01	; 1
    183c:	84 e0       	ldi	r24, 0x04	; 4
    183e:	0e 94 33 01 	call	0x266	; 0x266 <LCD_CustomChar>
	LCD_WriteCommand(0x80);
    1842:	80 e8       	ldi	r24, 0x80	; 128
    1844:	0e 94 96 00 	call	0x12c	; 0x12c <LCD_WriteCommand>
	
	
	TimerSet(25);
    1848:	69 e1       	ldi	r22, 0x19	; 25
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0e 94 91 01 	call	0x322	; 0x322 <TimerSet>
	TimerOn();
    1854:	0e 94 bf 01 	call	0x37e	; 0x37e <TimerOn>
	
	LCD_init();
    1858:	0e 94 80 00 	call	0x100	; 0x100 <LCD_init>
	LCD_ClearScreen();
    185c:	0e 94 76 00 	call	0xec	; 0xec <LCD_ClearScreen>
	
	START_STATE = START_START;
    1860:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <START_STATE>
	CHAR_STATE = CHAR_START; 
    1864:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <CHAR_STATE>
	GAME_STATE = GAME_START;
    1868:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <GAME_STATE>
	MOVE_STATE = MOVE_START;
    186c:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <MOVE_STATE>
	SEL_STATE = SEL_START;
    1870:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <SEL_STATE>
	ENEMY_STATE = ENEMY_START;
    1874:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <ENEMY_STATE>
	E1_STATE = E1_START;
    1878:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <E1_STATE>
	E2_STATE = E2_START;
    187c:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <E2_STATE>
	E3_STATE = E3_START;
    1880:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <E3_STATE>
	E4_STATE = E4_START;
    1884:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <E4_STATE>
	DEATH_STATE = DEATH_START;
    1888:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <DEATH_STATE>
	POINTS_STATE = POINTS_START;
    188c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <POINTS_STATE>
	RESTART_STATE = RESTART_START;
    1890:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <RESTART_STATE>
	
    while(1) 
    {
		
		
		if(timerKeptOne >= 1000)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	9a 81       	ldd	r25, Y+2	; 0x02
    1898:	88 3e       	cpi	r24, 0xE8	; 232
    189a:	93 40       	sbci	r25, 0x03	; 3
    189c:	20 f0       	brcs	.+8      	; 0x18a6 <main+0x120>
		{
			START_TEST();
    189e:	0e 94 34 03 	call	0x668	; 0x668 <START_TEST>
			timerKeptOne = 0;
    18a2:	1a 82       	std	Y+2, r1	; 0x02
    18a4:	19 82       	std	Y+1, r1	; 0x01
		}
		
		if(timerKeptTwo >= 100)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	84 36       	cpi	r24, 0x64	; 100
    18ac:	91 05       	cpc	r25, r1
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <main+0x132>
		{
			CHARACTER_TEST();
    18b0:	0e 94 a3 03 	call	0x746	; 0x746 <CHARACTER_TEST>
			timerKeptTwo = 0;
    18b4:	1c 82       	std	Y+4, r1	; 0x04
    18b6:	1b 82       	std	Y+3, r1	; 0x03
		}
		
		if(timerKeptThree >= 100)
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	84 36       	cpi	r24, 0x64	; 100
    18be:	91 05       	cpc	r25, r1
    18c0:	18 f0       	brcs	.+6      	; 0x18c8 <main+0x142>
		{
			GAME_TEST();
    18c2:	77 d8       	rcall	.-3858   	; 0x9b2 <GAME_TEST>
			timerKeptThree = 0;
    18c4:	1e 82       	std	Y+6, r1	; 0x06
    18c6:	1d 82       	std	Y+5, r1	; 0x05
		}
		
		if(timerKeptFour >= 50)
    18c8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ca:	98 85       	ldd	r25, Y+8	; 0x08
    18cc:	c2 97       	sbiw	r24, 0x32	; 50
		{
			MOVE_TEST();
    18ce:	18 f0       	brcs	.+6      	; 0x18d6 <main+0x150>
    18d0:	ca d8       	rcall	.-3692   	; 0xa66 <MOVE_TEST>
			timerKeptFour = 0;
    18d2:	18 86       	std	Y+8, r1	; 0x08
    18d4:	1f 82       	std	Y+7, r1	; 0x07
		}
		
		if (timerKeptFive >= 400)
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	80 39       	cpi	r24, 0x90	; 144
    18dc:	91 40       	sbci	r25, 0x01	; 1
		{
			SEL_TEST();
    18de:	18 f0       	brcs	.+6      	; 0x18e6 <main+0x160>
    18e0:	aa d9       	rcall	.-3244   	; 0xc36 <SEL_TEST>
			timerKeptFive = 0;
    18e2:	1a 86       	std	Y+10, r1	; 0x0a
    18e4:	19 86       	std	Y+9, r1	; 0x09
		}
		
		if(timerKeptSix >= 100)
    18e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    18e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    18ea:	84 36       	cpi	r24, 0x64	; 100
    18ec:	91 05       	cpc	r25, r1
		{
			ENEMY_TEST();
    18ee:	18 f0       	brcs	.+6      	; 0x18f6 <main+0x170>
    18f0:	f7 d9       	rcall	.-3090   	; 0xce0 <ENEMY_TEST>
			timerKeptSix = 0;
    18f2:	1c 86       	std	Y+12, r1	; 0x0c
    18f4:	1b 86       	std	Y+11, r1	; 0x0b
		}
		
		if(timerKeptSev >= 100)
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fa:	84 36       	cpi	r24, 0x64	; 100
    18fc:	91 05       	cpc	r25, r1
		{
			E1_TEST();
    18fe:	18 f0       	brcs	.+6      	; 0x1906 <main+0x180>
    1900:	71 da       	rcall	.-2846   	; 0xde4 <E1_TEST>
			timerKeptSev = 0;
    1902:	1e 86       	std	Y+14, r1	; 0x0e
    1904:	1d 86       	std	Y+13, r1	; 0x0d
		}
		
		if(timerKeptEigh >= 100)
    1906:	8f 85       	ldd	r24, Y+15	; 0x0f
    1908:	98 89       	ldd	r25, Y+16	; 0x10
    190a:	84 36       	cpi	r24, 0x64	; 100
    190c:	91 05       	cpc	r25, r1
		{
			E2_TEST();
    190e:	18 f0       	brcs	.+6      	; 0x1916 <main+0x190>
    1910:	21 db       	rcall	.-2494   	; 0xf54 <E2_TEST>
			timerKeptEigh = 0;
    1912:	18 8a       	std	Y+16, r1	; 0x10
		}
		
		if(timerKeptNine >= 100)
    1914:	1f 86       	std	Y+15, r1	; 0x0f
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	84 36       	cpi	r24, 0x64	; 100
    191c:	91 05       	cpc	r25, r1
		{
			E3_TEST();
    191e:	18 f0       	brcs	.+6      	; 0x1926 <main+0x1a0>
    1920:	cc db       	rcall	.-2152   	; 0x10ba <E3_TEST>
			timerKeptNine = 0;
    1922:	1a 8a       	std	Y+18, r1	; 0x12
		}
		
		if(timerKeptTen >= 100)
    1924:	19 8a       	std	Y+17, r1	; 0x11
    1926:	8b 89       	ldd	r24, Y+19	; 0x13
    1928:	9c 89       	ldd	r25, Y+20	; 0x14
    192a:	84 36       	cpi	r24, 0x64	; 100
    192c:	91 05       	cpc	r25, r1
		{
			E4_TEST();
    192e:	18 f0       	brcs	.+6      	; 0x1936 <main+0x1b0>
			timerKeptTen = 0;
    1930:	7b dc       	rcall	.-1802   	; 0x1228 <E4_TEST>
    1932:	1c 8a       	std	Y+20, r1	; 0x14
		}
		
		if(timerKeptEle >= 100)
    1934:	1b 8a       	std	Y+19, r1	; 0x13
    1936:	8d 89       	ldd	r24, Y+21	; 0x15
    1938:	9e 89       	ldd	r25, Y+22	; 0x16
    193a:	84 36       	cpi	r24, 0x64	; 100
    193c:	91 05       	cpc	r25, r1
		{
			DEATH_TEST();
    193e:	18 f0       	brcs	.+6      	; 0x1946 <main+0x1c0>
			timerKeptEle = 0;
    1940:	9a dd       	rcall	.-1228   	; 0x1476 <DEATH_TEST>
    1942:	1e 8a       	std	Y+22, r1	; 0x16
		}
		
		if(timerKeptThi >= 1000)
    1944:	1d 8a       	std	Y+21, r1	; 0x15
    1946:	89 8d       	ldd	r24, Y+25	; 0x19
    1948:	9a 8d       	ldd	r25, Y+26	; 0x1a
    194a:	88 3e       	cpi	r24, 0xE8	; 232
		{
			POINTS_TEST();
    194c:	93 40       	sbci	r25, 0x03	; 3
    194e:	18 f0       	brcs	.+6      	; 0x1956 <main+0x1d0>
			timerKeptThi = 0;
    1950:	2a dd       	rcall	.-1452   	; 0x13a6 <POINTS_TEST>
    1952:	1a 8e       	std	Y+26, r1	; 0x1a
		}
		
		if(timerKeptFou >= 50)
    1954:	19 8e       	std	Y+25, r1	; 0x19
    1956:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1958:	9c 8d       	ldd	r25, Y+28	; 0x1c
    195a:	c2 97       	sbiw	r24, 0x32	; 50
		{
			RESTART_TEST();
    195c:	18 f0       	brcs	.+6      	; 0x1964 <main+0x1de>
    195e:	73 de       	rcall	.-794    	; 0x1646 <RESTART_TEST>
			timerKeptFou = 0;
    1960:	1c 8e       	std	Y+28, r1	; 0x1c
    1962:	1b 8e       	std	Y+27, r1	; 0x1b
		}
		
		while(!TimerFlag);
    1964:	00 00       	nop
    1966:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
    196a:	88 23       	and	r24, r24
    196c:	e1 f3       	breq	.-8      	; 0x1966 <main+0x1e0>
		TimerFlag = 0;
    196e:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
		
		timerKeptOne += 25;
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	9a 81       	ldd	r25, Y+2	; 0x02
    1976:	49 96       	adiw	r24, 0x19	; 25
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
		timerKeptTwo += 25;
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	49 96       	adiw	r24, 0x19	; 25
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
		timerKeptThree += 25;
    1986:	8d 81       	ldd	r24, Y+5	; 0x05
    1988:	9e 81       	ldd	r25, Y+6	; 0x06
    198a:	49 96       	adiw	r24, 0x19	; 25
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	8d 83       	std	Y+5, r24	; 0x05
		timerKeptFour += 25;
    1990:	8f 81       	ldd	r24, Y+7	; 0x07
    1992:	98 85       	ldd	r25, Y+8	; 0x08
    1994:	49 96       	adiw	r24, 0x19	; 25
    1996:	98 87       	std	Y+8, r25	; 0x08
    1998:	8f 83       	std	Y+7, r24	; 0x07
		timerKeptFive += 25;
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	49 96       	adiw	r24, 0x19	; 25
    19a0:	9a 87       	std	Y+10, r25	; 0x0a
    19a2:	89 87       	std	Y+9, r24	; 0x09
		timerKeptSix += 25;
    19a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19a8:	49 96       	adiw	r24, 0x19	; 25
    19aa:	9c 87       	std	Y+12, r25	; 0x0c
    19ac:	8b 87       	std	Y+11, r24	; 0x0b
		timerKeptSev += 25;
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	49 96       	adiw	r24, 0x19	; 25
    19b4:	9e 87       	std	Y+14, r25	; 0x0e
    19b6:	8d 87       	std	Y+13, r24	; 0x0d
		timerKeptEigh += 25;
    19b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ba:	98 89       	ldd	r25, Y+16	; 0x10
    19bc:	49 96       	adiw	r24, 0x19	; 25
    19be:	98 8b       	std	Y+16, r25	; 0x10
    19c0:	8f 87       	std	Y+15, r24	; 0x0f
		timerKeptNine += 25;
    19c2:	89 89       	ldd	r24, Y+17	; 0x11
    19c4:	9a 89       	ldd	r25, Y+18	; 0x12
    19c6:	49 96       	adiw	r24, 0x19	; 25
    19c8:	9a 8b       	std	Y+18, r25	; 0x12
    19ca:	89 8b       	std	Y+17, r24	; 0x11
		timerKeptTen += 25;
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	49 96       	adiw	r24, 0x19	; 25
    19d2:	9c 8b       	std	Y+20, r25	; 0x14
    19d4:	8b 8b       	std	Y+19, r24	; 0x13
		timerKeptEle += 25;
    19d6:	8d 89       	ldd	r24, Y+21	; 0x15
    19d8:	9e 89       	ldd	r25, Y+22	; 0x16
    19da:	49 96       	adiw	r24, 0x19	; 25
    19dc:	9e 8b       	std	Y+22, r25	; 0x16
    19de:	8d 8b       	std	Y+21, r24	; 0x15
		timerKeptTwe += 25;
    19e0:	8f 89       	ldd	r24, Y+23	; 0x17
    19e2:	98 8d       	ldd	r25, Y+24	; 0x18
    19e4:	49 96       	adiw	r24, 0x19	; 25
    19e6:	98 8f       	std	Y+24, r25	; 0x18
    19e8:	8f 8b       	std	Y+23, r24	; 0x17
		timerKeptThi += 25;
    19ea:	89 8d       	ldd	r24, Y+25	; 0x19
    19ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    19ee:	49 96       	adiw	r24, 0x19	; 25
    19f0:	9a 8f       	std	Y+26, r25	; 0x1a
    19f2:	89 8f       	std	Y+25, r24	; 0x19
		timerKeptFou += 25;
    19f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f8:	49 96       	adiw	r24, 0x19	; 25
    19fa:	9c 8f       	std	Y+28, r25	; 0x1c
    19fc:	8b 8f       	std	Y+27, r24	; 0x1b
    }
    19fe:	4a cf       	rjmp	.-364    	; 0x1894 <main+0x10e>

00001a00 <__divmodhi4>:
    1a00:	97 fb       	bst	r25, 7
    1a02:	07 2e       	mov	r0, r23
    1a04:	16 f4       	brtc	.+4      	; 0x1a0a <__divmodhi4+0xa>
    1a06:	00 94       	com	r0
    1a08:	06 d0       	rcall	.+12     	; 0x1a16 <__divmodhi4_neg1>
    1a0a:	77 fd       	sbrc	r23, 7
    1a0c:	08 d0       	rcall	.+16     	; 0x1a1e <__divmodhi4_neg2>
    1a0e:	14 d0       	rcall	.+40     	; 0x1a38 <__udivmodhi4>
    1a10:	07 fc       	sbrc	r0, 7
    1a12:	05 d0       	rcall	.+10     	; 0x1a1e <__divmodhi4_neg2>
    1a14:	3e f4       	brtc	.+14     	; 0x1a24 <__divmodhi4_exit>

00001a16 <__divmodhi4_neg1>:
    1a16:	90 95       	com	r25
    1a18:	81 95       	neg	r24
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	08 95       	ret

00001a1e <__divmodhi4_neg2>:
    1a1e:	70 95       	com	r23
    1a20:	61 95       	neg	r22
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255

00001a24 <__divmodhi4_exit>:
    1a24:	08 95       	ret

00001a26 <__tablejump2__>:
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	00 24       	eor	r0, r0
    1a2c:	00 1c       	adc	r0, r0
    1a2e:	0b be       	out	0x3b, r0	; 59
    1a30:	07 90       	elpm	r0, Z+
    1a32:	f6 91       	elpm	r31, Z
    1a34:	e0 2d       	mov	r30, r0
    1a36:	09 94       	ijmp

00001a38 <__udivmodhi4>:
    1a38:	aa 1b       	sub	r26, r26
    1a3a:	bb 1b       	sub	r27, r27
    1a3c:	51 e1       	ldi	r21, 0x11	; 17
    1a3e:	07 c0       	rjmp	.+14     	; 0x1a4e <__udivmodhi4_ep>

00001a40 <__udivmodhi4_loop>:
    1a40:	aa 1f       	adc	r26, r26
    1a42:	bb 1f       	adc	r27, r27
    1a44:	a6 17       	cp	r26, r22
    1a46:	b7 07       	cpc	r27, r23
    1a48:	10 f0       	brcs	.+4      	; 0x1a4e <__udivmodhi4_ep>
    1a4a:	a6 1b       	sub	r26, r22
    1a4c:	b7 0b       	sbc	r27, r23

00001a4e <__udivmodhi4_ep>:
    1a4e:	88 1f       	adc	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	5a 95       	dec	r21
    1a54:	a9 f7       	brne	.-22     	; 0x1a40 <__udivmodhi4_loop>
    1a56:	80 95       	com	r24
    1a58:	90 95       	com	r25
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	08 95       	ret

00001a60 <do_rand>:
    1a60:	8f 92       	push	r8
    1a62:	9f 92       	push	r9
    1a64:	af 92       	push	r10
    1a66:	bf 92       	push	r11
    1a68:	cf 92       	push	r12
    1a6a:	df 92       	push	r13
    1a6c:	ef 92       	push	r14
    1a6e:	ff 92       	push	r15
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	ec 01       	movw	r28, r24
    1a76:	68 81       	ld	r22, Y
    1a78:	79 81       	ldd	r23, Y+1	; 0x01
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	61 15       	cp	r22, r1
    1a80:	71 05       	cpc	r23, r1
    1a82:	81 05       	cpc	r24, r1
    1a84:	91 05       	cpc	r25, r1
    1a86:	21 f4       	brne	.+8      	; 0x1a90 <do_rand+0x30>
    1a88:	64 e2       	ldi	r22, 0x24	; 36
    1a8a:	79 ed       	ldi	r23, 0xD9	; 217
    1a8c:	8b e5       	ldi	r24, 0x5B	; 91
    1a8e:	97 e0       	ldi	r25, 0x07	; 7
    1a90:	2d e1       	ldi	r18, 0x1D	; 29
    1a92:	33 ef       	ldi	r19, 0xF3	; 243
    1a94:	41 e0       	ldi	r20, 0x01	; 1
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	38 d0       	rcall	.+112    	; 0x1b0a <__divmodsi4>
    1a9a:	49 01       	movw	r8, r18
    1a9c:	5a 01       	movw	r10, r20
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	a7 ea       	ldi	r26, 0xA7	; 167
    1aa4:	b1 e4       	ldi	r27, 0x41	; 65
    1aa6:	4d d0       	rcall	.+154    	; 0x1b42 <__muluhisi3>
    1aa8:	6b 01       	movw	r12, r22
    1aaa:	7c 01       	movw	r14, r24
    1aac:	ac ee       	ldi	r26, 0xEC	; 236
    1aae:	b4 ef       	ldi	r27, 0xF4	; 244
    1ab0:	a5 01       	movw	r20, r10
    1ab2:	94 01       	movw	r18, r8
    1ab4:	52 d0       	rcall	.+164    	; 0x1b5a <__mulohisi3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8c 0d       	add	r24, r12
    1abc:	9d 1d       	adc	r25, r13
    1abe:	ae 1d       	adc	r26, r14
    1ac0:	bf 1d       	adc	r27, r15
    1ac2:	b7 ff       	sbrs	r27, 7
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <do_rand+0x6c>
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	a1 09       	sbc	r26, r1
    1aca:	b0 48       	sbci	r27, 0x80	; 128
    1acc:	88 83       	st	Y, r24
    1ace:	99 83       	std	Y+1, r25	; 0x01
    1ad0:	aa 83       	std	Y+2, r26	; 0x02
    1ad2:	bb 83       	std	Y+3, r27	; 0x03
    1ad4:	9f 77       	andi	r25, 0x7F	; 127
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	ff 90       	pop	r15
    1adc:	ef 90       	pop	r14
    1ade:	df 90       	pop	r13
    1ae0:	cf 90       	pop	r12
    1ae2:	bf 90       	pop	r11
    1ae4:	af 90       	pop	r10
    1ae6:	9f 90       	pop	r9
    1ae8:	8f 90       	pop	r8
    1aea:	08 95       	ret

00001aec <rand_r>:
    1aec:	b9 cf       	rjmp	.-142    	; 0x1a60 <do_rand>

00001aee <rand>:
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	91 e0       	ldi	r25, 0x01	; 1
    1af2:	b6 cf       	rjmp	.-148    	; 0x1a60 <do_rand>

00001af4 <srand>:
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1afc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1b00:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1b04:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1b08:	08 95       	ret

00001b0a <__divmodsi4>:
    1b0a:	05 2e       	mov	r0, r21
    1b0c:	97 fb       	bst	r25, 7
    1b0e:	16 f4       	brtc	.+4      	; 0x1b14 <__divmodsi4+0xa>
    1b10:	00 94       	com	r0
    1b12:	0f d0       	rcall	.+30     	; 0x1b32 <__negsi2>
    1b14:	57 fd       	sbrc	r21, 7
    1b16:	05 d0       	rcall	.+10     	; 0x1b22 <__divmodsi4_neg2>
    1b18:	24 d0       	rcall	.+72     	; 0x1b62 <__udivmodsi4>
    1b1a:	07 fc       	sbrc	r0, 7
    1b1c:	02 d0       	rcall	.+4      	; 0x1b22 <__divmodsi4_neg2>
    1b1e:	46 f4       	brtc	.+16     	; 0x1b30 <__divmodsi4_exit>
    1b20:	08 c0       	rjmp	.+16     	; 0x1b32 <__negsi2>

00001b22 <__divmodsi4_neg2>:
    1b22:	50 95       	com	r21
    1b24:	40 95       	com	r20
    1b26:	30 95       	com	r19
    1b28:	21 95       	neg	r18
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b2e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b30 <__divmodsi4_exit>:
    1b30:	08 95       	ret

00001b32 <__negsi2>:
    1b32:	90 95       	com	r25
    1b34:	80 95       	com	r24
    1b36:	70 95       	com	r23
    1b38:	61 95       	neg	r22
    1b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b40:	08 95       	ret

00001b42 <__muluhisi3>:
    1b42:	31 d0       	rcall	.+98     	; 0x1ba6 <__umulhisi3>
    1b44:	a5 9f       	mul	r26, r21
    1b46:	90 0d       	add	r25, r0
    1b48:	b4 9f       	mul	r27, r20
    1b4a:	90 0d       	add	r25, r0
    1b4c:	a4 9f       	mul	r26, r20
    1b4e:	80 0d       	add	r24, r0
    1b50:	91 1d       	adc	r25, r1
    1b52:	11 24       	eor	r1, r1
    1b54:	08 95       	ret

00001b56 <__mulshisi3>:
    1b56:	b7 ff       	sbrs	r27, 7
    1b58:	f4 cf       	rjmp	.-24     	; 0x1b42 <__muluhisi3>

00001b5a <__mulohisi3>:
    1b5a:	f3 df       	rcall	.-26     	; 0x1b42 <__muluhisi3>
    1b5c:	82 1b       	sub	r24, r18
    1b5e:	93 0b       	sbc	r25, r19
    1b60:	08 95       	ret

00001b62 <__udivmodsi4>:
    1b62:	a1 e2       	ldi	r26, 0x21	; 33
    1b64:	1a 2e       	mov	r1, r26
    1b66:	aa 1b       	sub	r26, r26
    1b68:	bb 1b       	sub	r27, r27
    1b6a:	fd 01       	movw	r30, r26
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <__udivmodsi4_ep>

00001b6e <__udivmodsi4_loop>:
    1b6e:	aa 1f       	adc	r26, r26
    1b70:	bb 1f       	adc	r27, r27
    1b72:	ee 1f       	adc	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	a2 17       	cp	r26, r18
    1b78:	b3 07       	cpc	r27, r19
    1b7a:	e4 07       	cpc	r30, r20
    1b7c:	f5 07       	cpc	r31, r21
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <__udivmodsi4_ep>
    1b80:	a2 1b       	sub	r26, r18
    1b82:	b3 0b       	sbc	r27, r19
    1b84:	e4 0b       	sbc	r30, r20
    1b86:	f5 0b       	sbc	r31, r21

00001b88 <__udivmodsi4_ep>:
    1b88:	66 1f       	adc	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	1a 94       	dec	r1
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <__udivmodsi4_loop>
    1b94:	60 95       	com	r22
    1b96:	70 95       	com	r23
    1b98:	80 95       	com	r24
    1b9a:	90 95       	com	r25
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	bd 01       	movw	r22, r26
    1ba2:	cf 01       	movw	r24, r30
    1ba4:	08 95       	ret

00001ba6 <__umulhisi3>:
    1ba6:	a2 9f       	mul	r26, r18
    1ba8:	b0 01       	movw	r22, r0
    1baa:	b3 9f       	mul	r27, r19
    1bac:	c0 01       	movw	r24, r0
    1bae:	a3 9f       	mul	r26, r19
    1bb0:	70 0d       	add	r23, r0
    1bb2:	81 1d       	adc	r24, r1
    1bb4:	11 24       	eor	r1, r1
    1bb6:	91 1d       	adc	r25, r1
    1bb8:	b2 9f       	mul	r27, r18
    1bba:	70 0d       	add	r23, r0
    1bbc:	81 1d       	adc	r24, r1
    1bbe:	11 24       	eor	r1, r1
    1bc0:	91 1d       	adc	r25, r1
    1bc2:	08 95       	ret

00001bc4 <_exit>:
    1bc4:	f8 94       	cli

00001bc6 <__stop_program>:
    1bc6:	ff cf       	rjmp	.-2      	; 0x1bc6 <__stop_program>
