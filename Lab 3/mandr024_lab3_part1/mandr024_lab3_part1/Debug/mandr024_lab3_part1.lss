
mandr024_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000875  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b0  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000437  00000000  00000000  000015c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	4b d0       	rcall	.+150    	; 0x140 <main>
  aa:	69 c0       	rjmp	.+210    	; 0x17e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:

enum States{SM1_START, SM1_INIT, SM1_INIT_PRESS} SM1_STATES;
unsigned char porA;

void tick()
{	
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch (SM1_STATES)
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	49 f0       	breq	.+18     	; 0xd6 <tick+0x28>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	91 05       	cpc	r25, r1
  c8:	91 f0       	breq	.+36     	; 0xee <tick+0x40>
  ca:	89 2b       	or	r24, r25
  cc:	e1 f4       	brne	.+56     	; 0x106 <tick+0x58>
	{
		case SM1_START:
			SM1_STATES = SM1_INIT;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  d4:	1b c0       	rjmp	.+54     	; 0x10c <tick+0x5e>
		
		case SM1_INIT:
			if(porA)
  d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <porA>
  da:	88 23       	and	r24, r24
  dc:	21 f0       	breq	.+8      	; 0xe6 <tick+0x38>
			{
				SM1_STATES = SM1_INIT_PRESS;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else
			{
				SM1_STATES = SM1_INIT;
			}
		
			break;
  e4:	13 c0       	rjmp	.+38     	; 0x10c <tick+0x5e>
				SM1_STATES = SM1_INIT_PRESS;
			}
		
			else
			{
				SM1_STATES = SM1_INIT;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		
			break;
  ec:	0f c0       	rjmp	.+30     	; 0x10c <tick+0x5e>
		
		case SM1_INIT_PRESS:
			if(porA)
  ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <porA>
  f2:	88 23       	and	r24, r24
  f4:	21 f0       	breq	.+8      	; 0xfe <tick+0x50>
			{
				SM1_STATES = SM1_INIT;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else
			{
				SM1_STATES = SM1_INIT_PRESS;
			}
		
			break;
  fc:	07 c0       	rjmp	.+14     	; 0x10c <tick+0x5e>
				SM1_STATES = SM1_INIT;
			}
		
			else
			{
				SM1_STATES = SM1_INIT_PRESS;
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
		
			break;
 104:	03 c0       	rjmp	.+6      	; 0x10c <tick+0x5e>
		
		default:
			SM1_STATES = SM1_START;
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			break;
 10a:	00 00       	nop
	}
	
	switch (SM1_STATES)
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	91 05       	cpc	r25, r1
 118:	19 f0       	breq	.+6      	; 0x120 <tick+0x72>
 11a:	02 97       	sbiw	r24, 0x02	; 2
 11c:	39 f0       	breq	.+14     	; 0x12c <tick+0x7e>
			break;
		case SM1_INIT_PRESS:
			PORTB = 0x02;
			break;
	}
}
 11e:	0c c0       	rjmp	.+24     	; 0x138 <tick+0x8a>
	}
	
	switch (SM1_STATES)
	{
		case SM1_INIT:
			PORTB = 0x01;
 120:	85 e2       	ldi	r24, 0x25	; 37
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
			break;
 12a:	06 c0       	rjmp	.+12     	; 0x138 <tick+0x8a>
		case SM1_INIT_PRESS:
			PORTB = 0x02;
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	22 e0       	ldi	r18, 0x02	; 2
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
			break;
 136:	00 00       	nop
	}
}
 138:	00 00       	nop
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <main>:

int main(void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 148:	81 e2       	ldi	r24, 0x21	; 33
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	10 82       	st	Z, r1
 150:	82 e2       	ldi	r24, 0x22	; 34
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	fc 01       	movw	r30, r24
 158:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	10 82       	st	Z, r1
    /* Replace with your application code */
    while (1) 
    {
		porA = PINA & 0x01;
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	81 70       	andi	r24, 0x01	; 1
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <porA>
		tick();
 17a:	99 df       	rcall	.-206    	; 0xae <tick>
    }
 17c:	f7 cf       	rjmp	.-18     	; 0x16c <main+0x2c>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
