
mandr024_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000893  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  00000c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000377  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b8 d0       	rcall	.+368    	; 0x21a <main>
  aa:	db c0       	rjmp	.+438    	; 0x262 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
unsigned char tempVal;
unsigned char tempNum;


void tick()
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch(SM2_STATES)  // transitions
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	91 05       	cpc	r25, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <tick+0x18>
  c4:	40 c0       	rjmp	.+128    	; 0x146 <tick+0x98>
  c6:	83 30       	cpi	r24, 0x03	; 3
  c8:	91 05       	cpc	r25, r1
  ca:	2c f4       	brge	.+10     	; 0xd6 <tick+0x28>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	59 f0       	breq	.+22     	; 0xe6 <tick+0x38>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	69 f0       	breq	.+26     	; 0xee <tick+0x40>
  d4:	64 c0       	rjmp	.+200    	; 0x19e <tick+0xf0>
  d6:	83 30       	cpi	r24, 0x03	; 3
  d8:	91 05       	cpc	r25, r1
  da:	09 f4       	brne	.+2      	; 0xde <tick+0x30>
  dc:	4a c0       	rjmp	.+148    	; 0x172 <tick+0xc4>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f4       	brne	.+2      	; 0xe4 <tick+0x36>
  e2:	60 c0       	rjmp	.+192    	; 0x1a4 <tick+0xf6>
  e4:	5c c0       	rjmp	.+184    	; 0x19e <tick+0xf0>
	{
		case SM2_START:
			SM2_STATES = SM2_INIT;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  ec:	5c c0       	rjmp	.+184    	; 0x1a6 <tick+0xf8>
		case SM2_INIT:
			if(tempVal == 1)
  ee:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	69 f4       	brne	.+26     	; 0x110 <tick+0x62>
			{
				if(tempNum < 9)
  f6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempNum>
  fa:	89 30       	cpi	r24, 0x09	; 9
  fc:	28 f4       	brcc	.+10     	; 0x108 <tick+0x5a>
				{
					tempNum++;
  fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempNum>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempNum>
				}
				SM2_STATES = SM2_ONE;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else 
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
			break;
 10e:	4b c0       	rjmp	.+150    	; 0x1a6 <tick+0xf8>
					tempNum++;
				}
				SM2_STATES = SM2_ONE;
			}
			
			else if(!tempVal)
 110:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 114:	88 23       	and	r24, r24
 116:	21 f4       	brne	.+8      	; 0x120 <tick+0x72>
			{
				SM2_STATES = SM2_INIT;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else 
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
			break;
 11e:	43 c0       	rjmp	.+134    	; 0x1a6 <tick+0xf8>
			else if(!tempVal)
			{
				SM2_STATES = SM2_INIT;
			}
			
			else if(tempVal == 2)
 120:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	49 f4       	brne	.+18     	; 0x13a <tick+0x8c>
			{
				if(tempNum >= 0)
				{
					tempNum--;
 128:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <tempNum>
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempNum>
				}
				SM2_STATES = SM2_TWO;
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			else 
			{
				tempNum = 0x00;
				SM2_STATES = SM2_DEPRESSED;
			}
			break;
 138:	36 c0       	rjmp	.+108    	; 0x1a6 <tick+0xf8>
				SM2_STATES = SM2_TWO;
			}
			
			else 
			{
				tempNum = 0x00;
 13a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 144:	30 c0       	rjmp	.+96     	; 0x1a6 <tick+0xf8>
			
		case SM2_ONE:
			if(tempVal == 1)
 146:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	21 f4       	brne	.+8      	; 0x156 <tick+0xa8>
			{
				SM2_STATES = SM2_ONE;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			{
				SM2_STATES = SM2_INIT;
				
			}
			
			break;
 154:	28 c0       	rjmp	.+80     	; 0x1a6 <tick+0xf8>
			if(tempVal == 1)
			{
				SM2_STATES = SM2_ONE;
			}
			
			else if (tempVal == 3)
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 15a:	83 30       	cpi	r24, 0x03	; 3
 15c:	31 f4       	brne	.+12     	; 0x16a <tick+0xbc>
			{
				tempNum = 0x00;
 15e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 162:	84 e0       	ldi	r24, 0x04	; 4
 164:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			{
				SM2_STATES = SM2_INIT;
				
			}
			
			break;
 168:	1e c0       	rjmp	.+60     	; 0x1a6 <tick+0xf8>
				
			}
			
			else 
			{
				SM2_STATES = SM2_INIT;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				
			}
			
			break;
 170:	1a c0       	rjmp	.+52     	; 0x1a6 <tick+0xf8>
			
		case SM2_TWO:
			if(tempVal == 2) 
 172:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	21 f4       	brne	.+8      	; 0x182 <tick+0xd4>
			{
				SM2_STATES = SM2_TWO;
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			{
				SM2_STATES = SM2_INIT;
				
			}
			
			break;	
 180:	12 c0       	rjmp	.+36     	; 0x1a6 <tick+0xf8>
			if(tempVal == 2) 
			{
				SM2_STATES = SM2_TWO;
			}
		
			else if (tempVal == 3)
 182:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempVal>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	31 f4       	brne	.+12     	; 0x196 <tick+0xe8>
			{
				tempNum = 0x00;
 18a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <tempNum>
				SM2_STATES = SM2_DEPRESSED;
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			{
				SM2_STATES = SM2_INIT;
				
			}
			
			break;	
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <tick+0xf8>
				SM2_STATES = SM2_DEPRESSED;
			}
			
			else 
			{
				SM2_STATES = SM2_INIT;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				
			}
			
			break;	
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <tick+0xf8>
			
		case SM2_DEPRESSED:
			break;
			
		default:
			SM2_STATES = SM2_START;
 19e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <tick+0xf8>
			}
			
			break;	
			
		case SM2_DEPRESSED:
			break;
 1a4:	00 00       	nop
			
		default:
			SM2_STATES = SM2_START;
	}
	
	switch(SM2_STATES) //Actions
 1a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	91 05       	cpc	r25, r1
 1b2:	e1 f0       	breq	.+56     	; 0x1ec <tick+0x13e>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	91 05       	cpc	r25, r1
 1b8:	2c f4       	brge	.+10     	; 0x1c4 <tick+0x116>
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	49 f0       	breq	.+18     	; 0x1d0 <tick+0x122>
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	71 f0       	breq	.+28     	; 0x1de <tick+0x130>
		break;
		case SM2_DEPRESSED:
			PORTC = 0x00;
		break;
	}
}
 1c2:	27 c0       	rjmp	.+78     	; 0x212 <tick+0x164>
			
		default:
			SM2_STATES = SM2_START;
	}
	
	switch(SM2_STATES) //Actions
 1c4:	83 30       	cpi	r24, 0x03	; 3
 1c6:	91 05       	cpc	r25, r1
 1c8:	c1 f0       	breq	.+48     	; 0x1fa <tick+0x14c>
 1ca:	04 97       	sbiw	r24, 0x04	; 4
 1cc:	e9 f0       	breq	.+58     	; 0x208 <tick+0x15a>
		break;
		case SM2_DEPRESSED:
			PORTC = 0x00;
		break;
	}
}
 1ce:	21 c0       	rjmp	.+66     	; 0x212 <tick+0x164>
	}
	
	switch(SM2_STATES) //Actions
	{
		case SM2_START:
			PORTC = tempNum;
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempNum>
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
		break;
 1dc:	1a c0       	rjmp	.+52     	; 0x212 <tick+0x164>
		case SM2_INIT:
			PORTC = tempNum;
 1de:	88 e2       	ldi	r24, 0x28	; 40
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempNum>
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
		break;
 1ea:	13 c0       	rjmp	.+38     	; 0x212 <tick+0x164>
		case SM2_ONE:
			PORTC = tempNum;
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempNum>
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
		break;
 1f8:	0c c0       	rjmp	.+24     	; 0x212 <tick+0x164>
		case SM2_TWO:
			PORTC = tempNum;
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <tempNum>
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
		break;
 206:	05 c0       	rjmp	.+10     	; 0x212 <tick+0x164>
		case SM2_DEPRESSED:
			PORTC = 0x00;
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	10 82       	st	Z, r1
		break;
 210:	00 00       	nop
	}
}
 212:	00 00       	nop
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:


int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 222:	81 e2       	ldi	r24, 0x21	; 33
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	fc 01       	movw	r30, r24
 228:	10 82       	st	Z, r1
 22a:	82 e2       	ldi	r24, 0x22	; 34
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 234:	87 e2       	ldi	r24, 0x27	; 39
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	fc 01       	movw	r30, r24
 23c:	20 83       	st	Z, r18
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	fc 01       	movw	r30, r24
 244:	10 82       	st	Z, r1
	tempNum = 0x07;	
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <tempNum>
	
	SM2_STATES = SM2_START;
 24c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	
    while (1) 
    {
		tempVal = PINA & 0x03;
 250:	80 e2       	ldi	r24, 0x20	; 32
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	80 81       	ld	r24, Z
 258:	83 70       	andi	r24, 0x03	; 3
 25a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempVal>
		tick();
 25e:	27 df       	rcall	.-434    	; 0xae <tick>
    }
 260:	f7 cf       	rjmp	.-18     	; 0x250 <main+0x36>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
