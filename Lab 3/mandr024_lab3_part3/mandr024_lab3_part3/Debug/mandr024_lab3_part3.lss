
mandr024_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000636  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000006aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e8  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062f  00000000  00000000  00001836  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  00001edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  0000231f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000023dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	00 00       	nop
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	00 00       	nop
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
  66:	00 00       	nop
  68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
  72:	00 00       	nop
  74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
  76:	00 00       	nop
  78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
  82:	00 00       	nop
  84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
  86:	00 00       	nop
  88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9d 00       	.word	0x009d	; ????
  8e:	a1 00       	.word	0x00a1	; ????
  90:	24 01       	movw	r4, r8
  92:	9e 01       	movw	r18, r28
  94:	18 02       	muls	r17, r24
  96:	92 02       	muls	r25, r18
  98:	96 02       	muls	r25, r22
  9a:	bb 02       	muls	r27, r27
  9c:	c2 02       	muls	r28, r18
  9e:	c9 02       	muls	r28, r25
  a0:	d0 02       	muls	r29, r16
  a2:	d7 02       	muls	r29, r23
  a4:	de 02       	muls	r29, r30
  a6:	e5 02       	muls	r30, r21

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d0 e4       	ldi	r29, 0x40	; 64
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	8d d2       	rcall	.+1306   	; 0x5e0 <main>
  c6:	b5 c2       	rjmp	.+1386   	; 0x632 <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <GetBit>:

unsigned char key = 0x00;
unsigned char tempNum = 0x00;
unsigned char valueDis = 0x00;

unsigned char GetBit(unsigned char x, unsigned char k) {
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	00 d0       	rcall	.+0      	; 0xd0 <GetBit+0x6>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	6a 83       	std	Y+2, r22	; 0x02
	return ((x & (0x01 << k)) != 0);
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2a 81       	ldd	r18, Y+2	; 0x02
  e0:	22 2f       	mov	r18, r18
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <GetBit+0x20>
  e6:	95 95       	asr	r25
  e8:	87 95       	ror	r24
  ea:	2a 95       	dec	r18
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <GetBit+0x1c>
  ee:	81 70       	andi	r24, 0x01	; 1
  f0:	99 27       	eor	r25, r25
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	89 2b       	or	r24, r25
  f6:	09 f4       	brne	.+2      	; 0xfa <GetBit+0x30>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	82 2f       	mov	r24, r18
}
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <tick>:


void tick()
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	switch(STATES)
 10e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <STATES>
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	09 2e       	mov	r0, r25
 118:	00 0c       	add	r0, r0
 11a:	aa 0b       	sbc	r26, r26
 11c:	bb 0b       	sbc	r27, r27
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	26 e0       	ldi	r18, 0x06	; 6
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	84 1b       	sub	r24, r20
 128:	95 0b       	sbc	r25, r21
 12a:	28 17       	cp	r18, r24
 12c:	39 07       	cpc	r19, r25
 12e:	08 f4       	brcc	.+2      	; 0x132 <tick+0x2c>
 130:	09 c2       	rjmp	.+1042   	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 132:	8a 5b       	subi	r24, 0xBA	; 186
 134:	9f 4f       	sbci	r25, 0xFF	; 255
 136:	fc 01       	movw	r30, r24
 138:	73 c2       	rjmp	.+1254   	; 0x620 <__tablejump2__>
	{
		case START:
			STATES = INIT;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
		break;
 140:	05 c2       	rjmp	.+1034   	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		
		case INIT:
			if(GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 142:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	c0 df       	rcall	.-128    	; 0xca <GetBit>
 14a:	88 23       	and	r24, r24
 14c:	b1 f0       	breq	.+44     	; 0x17a <tick+0x74>
 14e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	ba df       	rcall	.-140    	; 0xca <GetBit>
 156:	88 23       	and	r24, r24
 158:	81 f4       	brne	.+32     	; 0x17a <tick+0x74>
 15a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	b4 df       	rcall	.-152    	; 0xca <GetBit>
 162:	88 23       	and	r24, r24
 164:	51 f4       	brne	.+20     	; 0x17a <tick+0x74>
 166:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 16a:	67 e0       	ldi	r22, 0x07	; 7
 16c:	ae df       	rcall	.-164    	; 0xca <GetBit>
 16e:	88 23       	and	r24, r24
 170:	21 f4       	brne	.+8      	; 0x17a <tick+0x74>
 172:	82 e0       	ldi	r24, 0x02	; 2
			{
				STATES = ONE;
 174:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 178:	66 c0       	rjmp	.+204    	; 0x246 <tick+0x140>
			}
			
			else if(!GetBit(tempNum,0) && GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 17a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	a4 df       	rcall	.-184    	; 0xca <GetBit>
 182:	88 23       	and	r24, r24
 184:	09 f5       	brne	.+66     	; 0x1c8 <tick+0xc2>
 186:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	9e df       	rcall	.-196    	; 0xca <GetBit>
 18e:	88 23       	and	r24, r24
 190:	d9 f0       	breq	.+54     	; 0x1c8 <tick+0xc2>
 192:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 196:	62 e0       	ldi	r22, 0x02	; 2
 198:	98 df       	rcall	.-208    	; 0xca <GetBit>
 19a:	88 23       	and	r24, r24
 19c:	a9 f4       	brne	.+42     	; 0x1c8 <tick+0xc2>
 19e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 1a2:	67 e0       	ldi	r22, 0x07	; 7
 1a4:	92 df       	rcall	.-220    	; 0xca <GetBit>
 1a6:	88 23       	and	r24, r24
 1a8:	79 f4       	brne	.+30     	; 0x1c8 <tick+0xc2>
 1aa:	83 e0       	ldi	r24, 0x03	; 3
			{
				STATES = TWO;
 1ac:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 1b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
				if(key)
 1b4:	88 23       	and	r24, r24
 1b6:	09 f4       	brne	.+2      	; 0x1ba <tick+0xb4>
 1b8:	46 c0       	rjmp	.+140    	; 0x246 <tick+0x140>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
				{
					valueDis = 0x01;
 1bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <valueDis>
					STATES = UNLOCKED;
 1c0:	86 e0       	ldi	r24, 0x06	; 6
 1c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			}
			
			else if(!GetBit(tempNum,0) && GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
			{
				STATES = TWO;
				if(key)
 1c6:	3f c0       	rjmp	.+126    	; 0x246 <tick+0x140>
					valueDis = 0x01;
					STATES = UNLOCKED;
				}
			}
			
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && GetBit(tempNum,2) && !GetBit(tempNum,7))
 1c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	7d df       	rcall	.-262    	; 0xca <GetBit>
 1d0:	88 23       	and	r24, r24
 1d2:	c9 f4       	brne	.+50     	; 0x206 <tick+0x100>
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	77 df       	rcall	.-274    	; 0xca <GetBit>
 1dc:	88 23       	and	r24, r24
 1de:	99 f4       	brne	.+38     	; 0x206 <tick+0x100>
 1e0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	71 df       	rcall	.-286    	; 0xca <GetBit>
 1e8:	88 23       	and	r24, r24
 1ea:	69 f0       	breq	.+26     	; 0x206 <tick+0x100>
 1ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 1f0:	67 e0       	ldi	r22, 0x07	; 7
 1f2:	6b df       	rcall	.-298    	; 0xca <GetBit>
 1f4:	88 23       	and	r24, r24
 1f6:	39 f4       	brne	.+14     	; 0x206 <tick+0x100>
 1f8:	84 e0       	ldi	r24, 0x04	; 4
			{
				STATES = THREE;
 1fa:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 1fe:	81 e0       	ldi	r24, 0x01	; 1
				key = 0x01;
 200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 204:	20 c0       	rjmp	.+64     	; 0x246 <tick+0x140>
			
			}
			
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && GetBit(tempNum,7))
 206:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	5e df       	rcall	.-324    	; 0xca <GetBit>
 20e:	88 23       	and	r24, r24
 210:	b1 f4       	brne	.+44     	; 0x23e <tick+0x138>
 212:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	58 df       	rcall	.-336    	; 0xca <GetBit>
 21a:	88 23       	and	r24, r24
 21c:	81 f4       	brne	.+32     	; 0x23e <tick+0x138>
 21e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	52 df       	rcall	.-348    	; 0xca <GetBit>
 226:	88 23       	and	r24, r24
 228:	51 f4       	brne	.+20     	; 0x23e <tick+0x138>
 22a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 22e:	67 e0       	ldi	r22, 0x07	; 7
 230:	4c df       	rcall	.-360    	; 0xca <GetBit>
 232:	88 23       	and	r24, r24
 234:	21 f0       	breq	.+8      	; 0x23e <tick+0x138>
 236:	85 e0       	ldi	r24, 0x05	; 5
			{
				STATES = LOCK;
 238:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 23c:	04 c0       	rjmp	.+8      	; 0x246 <tick+0x140>
			}
			
			else
			{
				STATES = INIT;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			}
			
		break;
 244:	83 c1       	rjmp	.+774    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		
		case ONE:
			if(GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 246:	82 c1       	rjmp	.+772    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 248:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	3d df       	rcall	.-390    	; 0xca <GetBit>
 250:	88 23       	and	r24, r24
 252:	b1 f0       	breq	.+44     	; 0x280 <tick+0x17a>
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	37 df       	rcall	.-402    	; 0xca <GetBit>
 25c:	88 23       	and	r24, r24
 25e:	81 f4       	brne	.+32     	; 0x280 <tick+0x17a>
 260:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	31 df       	rcall	.-414    	; 0xca <GetBit>
 268:	88 23       	and	r24, r24
 26a:	51 f4       	brne	.+20     	; 0x280 <tick+0x17a>
 26c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 270:	67 e0       	ldi	r22, 0x07	; 7
 272:	2b df       	rcall	.-426    	; 0xca <GetBit>
 274:	88 23       	and	r24, r24
 276:	21 f4       	brne	.+8      	; 0x280 <tick+0x17a>
			{
				STATES = ONE;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 27e:	5d c0       	rjmp	.+186    	; 0x33a <tick+0x234>
			}
		
			else if(!GetBit(tempNum,0) && GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 280:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	21 df       	rcall	.-446    	; 0xca <GetBit>
 288:	88 23       	and	r24, r24
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <tick+0x1b2>
 28c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	1b df       	rcall	.-458    	; 0xca <GetBit>
 294:	88 23       	and	r24, r24
 296:	81 f0       	breq	.+32     	; 0x2b8 <tick+0x1b2>
 298:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	15 df       	rcall	.-470    	; 0xca <GetBit>
 2a0:	88 23       	and	r24, r24
 2a2:	51 f4       	brne	.+20     	; 0x2b8 <tick+0x1b2>
 2a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2a8:	67 e0       	ldi	r22, 0x07	; 7
 2aa:	0f df       	rcall	.-482    	; 0xca <GetBit>
 2ac:	88 23       	and	r24, r24
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <tick+0x1b2>
			{
				STATES = TWO;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && GetBit(tempNum,2) && !GetBit(tempNum,7))
 2b6:	41 c0       	rjmp	.+130    	; 0x33a <tick+0x234>
 2b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	05 df       	rcall	.-502    	; 0xca <GetBit>
 2c0:	88 23       	and	r24, r24
 2c2:	c9 f4       	brne	.+50     	; 0x2f6 <tick+0x1f0>
 2c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	ff de       	rcall	.-514    	; 0xca <GetBit>
 2cc:	88 23       	and	r24, r24
 2ce:	99 f4       	brne	.+38     	; 0x2f6 <tick+0x1f0>
 2d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2d4:	62 e0       	ldi	r22, 0x02	; 2
 2d6:	f9 de       	rcall	.-526    	; 0xca <GetBit>
 2d8:	88 23       	and	r24, r24
 2da:	69 f0       	breq	.+26     	; 0x2f6 <tick+0x1f0>
 2dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2e0:	67 e0       	ldi	r22, 0x07	; 7
 2e2:	f3 de       	rcall	.-538    	; 0xca <GetBit>
 2e4:	88 23       	and	r24, r24
 2e6:	39 f4       	brne	.+14     	; 0x2f6 <tick+0x1f0>
			{
				STATES = THREE;
 2e8:	84 e0       	ldi	r24, 0x04	; 4
 2ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
				key = 0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2f4:	22 c0       	rjmp	.+68     	; 0x33a <tick+0x234>
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && GetBit(tempNum,7))
 2f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	e6 de       	rcall	.-564    	; 0xca <GetBit>
 2fe:	88 23       	and	r24, r24
 300:	c1 f4       	brne	.+48     	; 0x332 <tick+0x22c>
 302:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	e0 de       	rcall	.-576    	; 0xca <GetBit>
 30a:	88 23       	and	r24, r24
 30c:	91 f4       	brne	.+36     	; 0x332 <tick+0x22c>
 30e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	da de       	rcall	.-588    	; 0xca <GetBit>
 316:	88 23       	and	r24, r24
 318:	61 f4       	brne	.+24     	; 0x332 <tick+0x22c>
 31a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 31e:	67 e0       	ldi	r22, 0x07	; 7
 320:	d4 de       	rcall	.-600    	; 0xca <GetBit>
 322:	88 23       	and	r24, r24
 324:	31 f0       	breq	.+12     	; 0x332 <tick+0x22c>
 326:	85 e0       	ldi	r24, 0x05	; 5
			{
				STATES = LOCK;
 328:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 32c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <valueDis>
				valueDis = 0x00;
 330:	04 c0       	rjmp	.+8      	; 0x33a <tick+0x234>
 332:	81 e0       	ldi	r24, 0x01	; 1
			}
		
			else
			{
				STATES = INIT;
 334:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 338:	09 c1       	rjmp	.+530    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
		
		break;
 33a:	08 c1       	rjmp	.+528    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		
		case TWO:
			if(GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 33c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	c3 de       	rcall	.-634    	; 0xca <GetBit>
 344:	88 23       	and	r24, r24
 346:	b1 f0       	breq	.+44     	; 0x374 <tick+0x26e>
 348:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	bd de       	rcall	.-646    	; 0xca <GetBit>
 350:	88 23       	and	r24, r24
 352:	81 f4       	brne	.+32     	; 0x374 <tick+0x26e>
 354:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	b7 de       	rcall	.-658    	; 0xca <GetBit>
 35c:	88 23       	and	r24, r24
 35e:	51 f4       	brne	.+20     	; 0x374 <tick+0x26e>
 360:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 364:	67 e0       	ldi	r22, 0x07	; 7
 366:	b1 de       	rcall	.-670    	; 0xca <GetBit>
 368:	88 23       	and	r24, r24
 36a:	21 f4       	brne	.+8      	; 0x374 <tick+0x26e>
			{
				STATES = ONE;
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 372:	5d c0       	rjmp	.+186    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		
			else if(!GetBit(tempNum,0) && GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 374:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	a7 de       	rcall	.-690    	; 0xca <GetBit>
 37c:	88 23       	and	r24, r24
 37e:	b1 f4       	brne	.+44     	; 0x3ac <tick+0x2a6>
 380:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	a1 de       	rcall	.-702    	; 0xca <GetBit>
 388:	88 23       	and	r24, r24
 38a:	81 f0       	breq	.+32     	; 0x3ac <tick+0x2a6>
 38c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 390:	62 e0       	ldi	r22, 0x02	; 2
 392:	9b de       	rcall	.-714    	; 0xca <GetBit>
 394:	88 23       	and	r24, r24
 396:	51 f4       	brne	.+20     	; 0x3ac <tick+0x2a6>
 398:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	95 de       	rcall	.-726    	; 0xca <GetBit>
 3a0:	88 23       	and	r24, r24
 3a2:	21 f4       	brne	.+8      	; 0x3ac <tick+0x2a6>
 3a4:	83 e0       	ldi	r24, 0x03	; 3
			{
				STATES = TWO;
 3a6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 3aa:	41 c0       	rjmp	.+130    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && GetBit(tempNum,2) && !GetBit(tempNum,7))
 3ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	8b de       	rcall	.-746    	; 0xca <GetBit>
 3b4:	88 23       	and	r24, r24
 3b6:	c9 f4       	brne	.+50     	; 0x3ea <tick+0x2e4>
 3b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	85 de       	rcall	.-758    	; 0xca <GetBit>
 3c0:	88 23       	and	r24, r24
 3c2:	99 f4       	brne	.+38     	; 0x3ea <tick+0x2e4>
 3c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3c8:	62 e0       	ldi	r22, 0x02	; 2
 3ca:	7f de       	rcall	.-770    	; 0xca <GetBit>
 3cc:	88 23       	and	r24, r24
 3ce:	69 f0       	breq	.+26     	; 0x3ea <tick+0x2e4>
 3d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3d4:	67 e0       	ldi	r22, 0x07	; 7
 3d6:	79 de       	rcall	.-782    	; 0xca <GetBit>
 3d8:	88 23       	and	r24, r24
 3da:	39 f4       	brne	.+14     	; 0x3ea <tick+0x2e4>
 3dc:	84 e0       	ldi	r24, 0x04	; 4
 3de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			{
				STATES = THREE;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
				key = 0x01;
 3e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3e8:	22 c0       	rjmp	.+68     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && GetBit(tempNum,7))
 3ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	6c de       	rcall	.-808    	; 0xca <GetBit>
 3f2:	88 23       	and	r24, r24
 3f4:	c1 f4       	brne	.+48     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	66 de       	rcall	.-820    	; 0xca <GetBit>
 3fe:	88 23       	and	r24, r24
 400:	91 f4       	brne	.+36     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 402:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	60 de       	rcall	.-832    	; 0xca <GetBit>
 40a:	88 23       	and	r24, r24
 40c:	61 f4       	brne	.+24     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 412:	67 e0       	ldi	r22, 0x07	; 7
 414:	5a de       	rcall	.-844    	; 0xca <GetBit>
 416:	88 23       	and	r24, r24
 418:	31 f0       	breq	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41a:	85 e0       	ldi	r24, 0x05	; 5
			{
				STATES = LOCK;
 41c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 420:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <valueDis>
				valueDis = 0x00;
 424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
			}
		
			else
			{
				STATES = INIT;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			}
		
		break;
 42c:	8f c0       	rjmp	.+286    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 42e:	8e c0       	rjmp	.+284    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		
		case THREE:
			if(GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 430:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	49 de       	rcall	.-878    	; 0xca <GetBit>
 438:	88 23       	and	r24, r24
 43a:	b1 f0       	breq	.+44     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 43c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	43 de       	rcall	.-890    	; 0xca <GetBit>
 444:	88 23       	and	r24, r24
 446:	81 f4       	brne	.+32     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 448:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 44c:	62 e0       	ldi	r22, 0x02	; 2
 44e:	3d de       	rcall	.-902    	; 0xca <GetBit>
 450:	88 23       	and	r24, r24
 452:	51 f4       	brne	.+20     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 454:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 458:	67 e0       	ldi	r22, 0x07	; 7
 45a:	37 de       	rcall	.-914    	; 0xca <GetBit>
 45c:	88 23       	and	r24, r24
 45e:	21 f4       	brne	.+8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			{
				STATES = ONE;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			}
		
			else if(!GetBit(tempNum,0) && GetBit(tempNum,1) && !GetBit(tempNum,2) && !GetBit(tempNum,7))
 466:	5d c0       	rjmp	.+186    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 468:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	2d de       	rcall	.-934    	; 0xca <GetBit>
 470:	88 23       	and	r24, r24
 472:	b1 f4       	brne	.+44     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 474:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	27 de       	rcall	.-946    	; 0xca <GetBit>
 47c:	88 23       	and	r24, r24
 47e:	81 f0       	breq	.+32     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 480:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	21 de       	rcall	.-958    	; 0xca <GetBit>
 488:	88 23       	and	r24, r24
 48a:	51 f4       	brne	.+20     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 48c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 490:	67 e0       	ldi	r22, 0x07	; 7
 492:	1b de       	rcall	.-970    	; 0xca <GetBit>
 494:	88 23       	and	r24, r24
 496:	21 f4       	brne	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			{
				STATES = TWO;
 498:	83 e0       	ldi	r24, 0x03	; 3
 49a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 49e:	41 c0       	rjmp	.+130    	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && GetBit(tempNum,2) && !GetBit(tempNum,7))
 4a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	11 de       	rcall	.-990    	; 0xca <GetBit>
 4a8:	88 23       	and	r24, r24
 4aa:	c9 f4       	brne	.+50     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4ac:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	0b de       	rcall	.-1002   	; 0xca <GetBit>
 4b4:	88 23       	and	r24, r24
 4b6:	99 f4       	brne	.+38     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	05 de       	rcall	.-1014   	; 0xca <GetBit>
 4c0:	88 23       	and	r24, r24
 4c2:	69 f0       	breq	.+26     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4c8:	67 e0       	ldi	r22, 0x07	; 7
 4ca:	ff dd       	rcall	.-1026   	; 0xca <GetBit>
 4cc:	88 23       	and	r24, r24
 4ce:	39 f4       	brne	.+14     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4d0:	84 e0       	ldi	r24, 0x04	; 4
 4d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
			{
				STATES = THREE;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				key = 0x01;
 4dc:	22 c0       	rjmp	.+68     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 4de:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4e2:	60 e0       	ldi	r22, 0x00	; 0
			}
		
			else if(!GetBit(tempNum,0) && !GetBit(tempNum,1) && !GetBit(tempNum,2) && GetBit(tempNum,7))
 4e4:	f2 dd       	rcall	.-1052   	; 0xca <GetBit>
 4e6:	88 23       	and	r24, r24
 4e8:	c1 f4       	brne	.+48     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	ec dd       	rcall	.-1064   	; 0xca <GetBit>
 4f2:	88 23       	and	r24, r24
 4f4:	91 f4       	brne	.+36     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 4f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 4fa:	62 e0       	ldi	r22, 0x02	; 2
 4fc:	e6 dd       	rcall	.-1076   	; 0xca <GetBit>
 4fe:	88 23       	and	r24, r24
 500:	61 f4       	brne	.+24     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 502:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
 506:	67 e0       	ldi	r22, 0x07	; 7
 508:	e0 dd       	rcall	.-1088   	; 0xca <GetBit>
 50a:	88 23       	and	r24, r24
 50c:	31 f0       	breq	.+12     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 514:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <valueDis>
 518:	04 c0       	rjmp	.+8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			{
				STATES = LOCK;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
				valueDis = 0x00;
 520:	15 c0       	rjmp	.+42     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 522:	14 c0       	rjmp	.+40     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 524:	81 e0       	ldi	r24, 0x01	; 1
			}
		
			else
			{
				STATES = INIT;
 526:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 52a:	10 c0       	rjmp	.+32     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			}
		
		break;
 52c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempNum>
		
		case LOCK:
			STATES = INIT;
 530:	67 e0       	ldi	r22, 0x07	; 7
 532:	cb dd       	rcall	.-1130   	; 0xca <GetBit>
 534:	88 23       	and	r24, r24
			break;
 536:	49 f0       	breq	.+18     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
			
		case UNLOCKED:
			if(GetBit(tempNum, 7))
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <STATES>
 53e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <valueDis>
 542:	03 c0       	rjmp	.+6      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 544:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <STATES>
			{
				STATES = LOCK;
 548:	01 c0       	rjmp	.+2      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54a:	00 00       	nop
				valueDis = 0x00;
 54c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <STATES>
			}
			break;
 550:	88 2f       	mov	r24, r24
			
		default:
			STATES = START;
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	09 2e       	mov	r0, r25
 556:	00 0c       	add	r0, r0
			if(GetBit(tempNum, 7))
			{
				STATES = LOCK;
				valueDis = 0x00;
			}
			break;
 558:	aa 0b       	sbc	r26, r26
		default:
			STATES = START;
		
	}
	
	switch(STATES)
 55a:	bb 0b       	sbc	r27, r27
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	26 e0       	ldi	r18, 0x06	; 6
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	84 1b       	sub	r24, r20
 566:	95 0b       	sbc	r25, r21
 568:	28 17       	cp	r18, r24
 56a:	39 07       	cpc	r19, r25
 56c:	a8 f1       	brcs	.+106    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 56e:	83 5b       	subi	r24, 0xB3	; 179
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	fc 01       	movw	r30, r24
 574:	55 c0       	rjmp	.+170    	; 0x620 <__tablejump2__>
 576:	85 e2       	ldi	r24, 0x25	; 37
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
 582:	2a c0       	rjmp	.+84     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 584:	85 e2       	ldi	r24, 0x25	; 37
	{
		case START:
			PORTB = valueDis;
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18
 590:	23 c0       	rjmp	.+70     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		break;
 592:	85 e2       	ldi	r24, 0x25	; 37
		
		case INIT:
			PORTB = valueDis;
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18
 59e:	1c c0       	rjmp	.+56     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		break;
 5a0:	85 e2       	ldi	r24, 0x25	; 37
		
		case ONE:
			PORTB = valueDis;
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 5a8:	fc 01       	movw	r30, r24
 5aa:	20 83       	st	Z, r18
 5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		break;
 5ae:	85 e2       	ldi	r24, 0x25	; 37
		
		case TWO:
			PORTB = valueDis;
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 5b6:	fc 01       	movw	r30, r24
 5b8:	20 83       	st	Z, r18
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		break;
 5bc:	85 e2       	ldi	r24, 0x25	; 37
		
		case THREE:
			PORTB = valueDis;
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18
 5c8:	07 c0       	rjmp	.+14     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		break;
 5ca:	85 e2       	ldi	r24, 0x25	; 37
		
		case LOCK:
			PORTB = valueDis;
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <valueDis>
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 83       	st	Z, r18
 5d6:	00 00       	nop
		break;
 5d8:	00 00       	nop
		
		case UNLOCKED:
			PORTB = valueDis;
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <main>:
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	cd b7       	in	r28, 0x3d	; 61
		break;
 5e6:	de b7       	in	r29, 0x3e	; 62
	}
	
}
 5e8:	81 e2       	ldi	r24, 0x21	; 33
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	10 82       	st	Z, r1

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF;
 5f0:	82 e2       	ldi	r24, 0x22	; 34
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	2f ef       	ldi	r18, 0xFF	; 255
 5f6:	fc 01       	movw	r30, r24
 5f8:	20 83       	st	Z, r18
    DDRB = 0xFF; PORTB = 0x00;
 5fa:	84 e2       	ldi	r24, 0x24	; 36
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	fc 01       	movw	r30, r24
 602:	20 83       	st	Z, r18
 604:	85 e2       	ldi	r24, 0x25	; 37
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	fc 01       	movw	r30, r24
 60a:	10 82       	st	Z, r1
	
	STATES = START;
 60c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <STATES>
	
    while (1) 
    {
		tempNum = PINA;
 610:	80 e2       	ldi	r24, 0x20	; 32
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	fc 01       	movw	r30, r24
 616:	80 81       	ld	r24, Z
 618:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempNum>
		tick();
 61c:	74 dd       	rcall	.-1304   	; 0x106 <tick>
    }
 61e:	f8 cf       	rjmp	.-16     	; 0x610 <main+0x30>

00000620 <__tablejump2__>:
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	00 24       	eor	r0, r0
 626:	00 1c       	adc	r0, r0
 628:	0b be       	out	0x3b, r0	; 59
 62a:	07 90       	elpm	r0, Z+
 62c:	f6 91       	elpm	r31, Z
 62e:	e0 2d       	mov	r30, r0
 630:	09 94       	ijmp

00000632 <_exit>:
 632:	f8 94       	cli

00000634 <__stop_program>:
 634:	ff cf       	rjmp	.-2      	; 0x634 <__stop_program>
